"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[5747],{3199:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(4848),a=n(8453);const o={},s="Timezone support in a full-stack application based on NestJS and Angular: working with REST and WebSockets",i={id:"en-posts/fullstack/2024-12-12",title:"Timezone support in a full-stack application based on NestJS and Angular: working with REST and WebSockets",description:"In this article, I would like to share my experience in implementing timezone support in a full stack application built on NestJS and Angular. We will learn how to save user time zone settings in the database and use them correctly when interacting with the server via REST and web sockets.",source:"@site/docs/en-posts/fullstack/2024-12-12.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-12-12",permalink:"/docs/en-posts/fullstack/2024-12-12",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-12-12.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Adding multi-language support to NestJS and Angular applications",permalink:"/docs/en-posts/fullstack/2024-12-03"},next:{title:'Integrating and storing the selected user language into the database in a full-stack application on "Angular" and "NestJS"',permalink:"/docs/en-posts/fullstack/2024-12-16"}},c={},l=[{value:"1. Install all necessary libraries",id:"1-install-all-necessary-libraries",level:3},{value:"2. Adding support for Prisma and Flyway migrations to the authorization module",id:"2-adding-support-for-prisma-and-flyway-migrations-to-the-authorization-module",level:3},{value:"3. Creating a table to store the user&#39;s time zone",id:"3-creating-a-table-to-store-the-users-time-zone",level:3},{value:"4. Generating &quot;DTO&quot; for the new &quot;Auth&quot; database",id:"4-generating-dto-for-the-new-auth-database",level:3},{value:"5. Updating the &quot;PrismaModule&quot; module import parameters for the &quot;Auth&quot; database",id:"5-updating-the-prismamodule-module-import-parameters-for-the-auth-database",level:3},{value:"6. Create a caching service for &quot;Auth&quot; database users",id:"6-create-a-caching-service-for-auth-database-users",level:3},{value:"7. Developing a controller for working with user time zone information",id:"7-developing-a-controller-for-working-with-user-time-zone-information",level:3},{value:"8. Create a service for recursive conversion of &quot;Date&quot; type fields to a specified time zone",id:"8-create-a-service-for-recursive-conversion-of-date-type-fields-to-a-specified-time-zone",level:3},{value:"9. Adding an interceptor for automatic time correction in data",id:"9-adding-an-interceptor-for-automatic-time-correction-in-data",level:3},{value:"10. Adding &quot;AuthGuard&quot; to automatically create users in the &quot;Auth&quot; database",id:"10-adding-authguard-to-automatically-create-users-in-the-auth-database",level:3},{value:"11. Registering the created classes in &quot;AuthModule&quot;",id:"11-registering-the-created-classes-in-authmodule",level:3},{value:"12. Setting up request processing via the &quot;WebSocket&quot; gateway",id:"12-setting-up-request-processing-via-the-websocket-gateway",level:3},{value:"13. Create a new &quot;e2e&quot; test to check the correctness of the conversion of fields of the &quot;Date&quot; type.",id:"13-create-a-new-e2e-test-to-check-the-correctness-of-the-conversion-of-fields-of-the-date-type",level:3},{value:"14. We restart the infrastructure and all applications, check the correctness of the execution of e2e tests",id:"14-we-restart-the-infrastructure-and-all-applications-check-the-correctness-of-the-execution-of-e2e-tests",level:3},{value:"15. Passing an authorization token for websockets via a &quot;query&quot; line",id:"15-passing-an-authorization-token-for-websockets-via-a-query-line",level:3},{value:"16.Replacing the original profile form fields and changing the profile update method",id:"16replacing-the-original-profile-form-fields-and-changing-the-profile-update-method",level:3},{value:"17. Creating an E2E test for an Angular application to check time zone switching",id:"17-creating-an-e2e-test-for-an-angular-application-to-check-time-zone-switching",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"timezone-support-in-a-full-stack-application-based-on-nestjs-and-angular-working-with-rest-and-websockets",children:"Timezone support in a full-stack application based on NestJS and Angular: working with REST and WebSockets"}),"\n",(0,r.jsxs)(t.p,{children:["In this article, I would like to share my experience in implementing timezone support in a full stack application built on ",(0,r.jsx)(t.code,{children:"NestJS"})," and ",(0,r.jsx)(t.code,{children:"Angular"}),". We will learn how to save user time zone settings in the database and use them correctly when interacting with the server via ",(0,r.jsx)(t.code,{children:"REST"})," and web sockets."]}),"\n",(0,r.jsx)(t.h3,{id:"1-install-all-necessary-libraries",children:"1. Install all necessary libraries"}),"\n",(0,r.jsxs)(t.p,{children:["Install the ",(0,r.jsx)(t.code,{children:"date-fns"})," library, which is necessary for working with dates and time zones."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Commands"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm install --save date-fns\n"})}),"\n",(0,r.jsx)(t.h3,{id:"2-adding-support-for-prisma-and-flyway-migrations-to-the-authorization-module",children:"2. Adding support for Prisma and Flyway migrations to the authorization module"}),"\n",(0,r.jsxs)(t.p,{children:["Let's include the ",(0,r.jsx)(t.code,{children:"Prisma"})," and ",(0,r.jsx)(t.code,{children:"Flyway"})," modules in the ",(0,r.jsx)(t.code,{children:"main.ts"})," file to set up interaction with the new ",(0,r.jsx)(t.code,{children:"Auth"})," database."]}),"\n",(0,r.jsxs)(t.p,{children:["Update the file ",(0,r.jsx)(t.em,{children:"apps/server/src/main.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { AUTH_FEATURE, AUTH_FOLDER, AuthModule } from '@nestjs-mod-fullstack/auth';\n// ...\n\nbootstrapNestApplication({\n  modules: {\n    // ...\n    core: [\n      // ...\n      PrismaModule.forRoot({\n        contextName: AUTH_FEATURE,\n        staticConfiguration: {\n          featureName: AUTH_FEATURE,\n          schemaFile: join(rootFolder, AUTH_FOLDER, 'src', 'prisma', PRISMA_SCHEMA_FILE),\n          prismaModule: isInfrastructureMode() ? import(`@nestjs-mod/prisma`) : import(`@nestjs-mod/prisma`),\n          addMigrationScripts: false,\n          nxProjectJsonFile: join(rootFolder, AUTH_FOLDER, PROJECT_JSON_FILE),\n        },\n      }),\n    ],\n    infrastructure: [\n      // ...\n      DockerComposePostgreSQL.forFeatureAsync({\n        featureModuleName: AUTH_FEATURE,\n        featureConfiguration: {\n          nxProjectJsonFile: join(rootFolder, AUTH_FOLDER, PROJECT_JSON_FILE),\n        },\n      }),\n      Flyway.forRoot({\n        staticConfiguration: {\n          featureName: AUTH_FEATURE,\n          migrationsFolder: join(rootFolder, AUTH_FOLDER, 'src', 'migrations'),\n          configFile: join(rootFolder, FLYWAY_JS_CONFIG_FILE),\n          nxProjectJsonFile: join(rootFolder, AUTH_FOLDER, PROJECT_JSON_FILE),\n        },\n      }),\n    ],\n  },\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"We generate additional code for the infrastructure."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Commands"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm run docs:infrastructure\n"})}),"\n",(0,r.jsx)(t.p,{children:"Add a new environment variable with login and password to connect to the new database."}),"\n",(0,r.jsxs)(t.p,{children:["Update the ",(0,r.jsx)(t.em,{children:".env"})," and ",(0,r.jsx)(t.em,{children:"example.env"})," files"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"SERVER_AUTH_DATABASE_URL=postgres://auth:auth_password@localhost:5432/auth?schema=public\n"})}),"\n",(0,r.jsx)(t.h3,{id:"3-creating-a-table-to-store-the-users-time-zone",children:"3. Creating a table to store the user's time zone"}),"\n",(0,r.jsxs)(t.p,{children:["I chose to use the ",(0,r.jsx)(t.code,{children:"Auth"})," authorization module to store data about user time zones, due to the architectural features of our project. In other situations, we could consider creating a separate field in the ",(0,r.jsx)(t.code,{children:"Accounts"})," database or even a special ",(0,r.jsx)(t.code,{children:"TimezoneModule"})," module to manage time zone-related tasks."]}),"\n",(0,r.jsxs)(t.p,{children:["Now let's create a migration to generate all the necessary tables in the ",(0,r.jsx)(t.code,{children:"Auth"})," database."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Commands"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Create migrations folder\nmkdir -p ./libs/core/auth/src/migrations\n\n# Create empty migration\nnpm run flyway:create:auth --args=Init\n"})}),"\n",(0,r.jsx)(t.p,{children:"We fill the migration file with SQL scripts to create the necessary tables and indexes."}),"\n",(0,r.jsxs)(t.p,{children:["Update the file ",(0,r.jsx)(t.em,{children:"libs/core/auth/src/migrations/V202412071217__Init.sql"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:'DO $$\nBEGIN\n    CREATE TYPE "AuthRole" AS enum(\n        \'Admin\',\n        \'User\'\n);\nEXCEPTION\n    WHEN duplicate_object THEN\n        NULL;\nEND\n$$;\n\nCREATE TABLE IF NOT EXISTS "AuthUser"(\n    "id" uuid NOT NULL DEFAULT uuid_generate_v4(),\n    "externalUserId" uuid NOT NULL,\n    "userRole" "AuthRole" NOT NULL,\n    "timezone" double precision,\n    "createdAt" timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    "updatedAt" timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    CONSTRAINT "PK_AUTH_USER" PRIMARY KEY ("id")\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS "UQ_AUTH_USER" ON "AuthUser"("externalUserId");\n\nCREATE INDEX IF NOT EXISTS "IDX_AUTH_USER__USER_ROLE" ON "AuthUser"("userRole");\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Now the ",(0,r.jsx)(t.code,{children:"Auth"})," database will contain the ",(0,r.jsx)(t.code,{children:"AuthUser"})," table, which will store information about the time zone of each user."]}),"\n",(0,r.jsxs)(t.p,{children:["Apply the created migrations and recreate the ",(0,r.jsx)(t.code,{children:"Prisma"})," schemas for all databases."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Commands"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm run docker-compose:start-prod:server\nnpm run db:create-and-fill\nnpm run prisma:pull\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Schema file for the new database ",(0,r.jsx)(t.em,{children:"libs/core/auth/src/prisma/schema.prisma"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-prisma",children:'generator client {\n  provider   = "prisma-client-js"\n  output     = "../../../../../node_modules/@prisma/auth-client"\n  engineType = "binary"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("SERVER_AUTH_DATABASE_URL")\n}\n\nmodel AuthUser {\n  id             String   @id(map: "PK_AUTH_USER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  externalUserId String   @unique(map: "UQ_AUTH_USER") @db.Uuid\n  userRole       AuthRole\n  timezone       Float?\n  createdAt      DateTime @default(now()) @db.Timestamp(6)\n  updatedAt      DateTime @default(now()) @db.Timestamp(6)\n\n  @@index([userRole], map: "IDX_AUTH_USER__USER_ROLE")\n}\n\nmodel migrations {\n  installed_rank Int      @id(map: "__migrations_pk")\n  version        String?  @db.VarChar(50)\n  description    String   @db.VarChar(200)\n  type           String   @db.VarChar(20)\n  script         String   @db.VarChar(1000)\n  checksum       Int?\n  installed_by   String   @db.VarChar(100)\n  installed_on   DateTime @default(now()) @db.Timestamp(6)\n  execution_time Int\n  success        Boolean\n\n  @@index([success], map: "__migrations_s_idx")\n  @@map("__migrations")\n}\n\nenum AuthRole {\n  Admin\n  User\n}\n\n'})}),"\n",(0,r.jsx)(t.h3,{id:"4-generating-dto-for-the-new-auth-database",children:'4. Generating "DTO" for the new "Auth" database'}),"\n",(0,r.jsxs)(t.p,{children:["Connecting the ",(0,r.jsx)(t.code,{children:"DTO"})," generator to the ",(0,r.jsx)(t.code,{children:"Prisma"})," schema and excluding some fields from the generation process."]}),"\n",(0,r.jsxs)(t.p,{children:["Update the file ",(0,r.jsx)(t.em,{children:"libs/core/auth/src/prisma/schema.prisma"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-prisma",children:'// ...\n\ngenerator prismaClassGenerator {\n  provider                        = "prisma-generator-nestjs-dto"\n  output                          = "../lib/generated/rest/dto"\n  updateDtoPrefix                 = "Update"\n  entityPrefix                    = ""\n  entitySuffix                    = ""\n  definiteAssignmentAssertion     = "true"\n  flatResourceStructure           = "false"\n  exportRelationModifierClasses   = "true"\n  fileNamingStyle                 = "kebab"\n  createDtoPrefix                 = "Create"\n  classValidation                 = "true"\n  noDependencies                  = "false"\n  outputToNestJsResourceStructure = "false"\n  annotateAllDtoProperties        = "true"\n  dtoSuffix                       = "Dto"\n  reExport                        = "false"\n  prettier                        = "true"\n}\n// ...\n\nmodel AuthUser {\n  id             String   @id(map: "PK_AUTH_USER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  externalUserId String   @unique(map: "UQ_AUTH_USER") @db.Uuid\n  userRole       AuthRole\n  timezone       Float?\n  /// @DtoCreateHidden\n  /// @DtoUpdateHidden\n  createdAt      DateTime @default(now()) @db.Timestamp(6)\n  /// @DtoCreateHidden\n  /// @DtoUpdateHidden\n  updatedAt      DateTime @default(now()) @db.Timestamp(6)\n\n  @@index([userRole], map: "IDX_AUTH_USER__USER_ROLE")\n}\n// ...\n\n'})}),"\n",(0,r.jsx)(t.p,{children:"We restart generators for all databases."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Commands"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm run prisma:generate\n"})}),"\n",(0,r.jsxs)(t.p,{children:["After the command has successfully completed, we get new files in the ",(0,r.jsx)(t.code,{children:"libs/core/auth/src/lib/generated/rest/dto"})," folder:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"auth-user.dto.ts\nconnect-auth-user.dto.ts\ncreate-auth-user.dto.ts\nmigrations.dto.ts\nupdate-auth-user.dto.ts\nauth-user.entity.ts\nconnect-migrations.dto.ts\ncreate-migrations.dto.ts\nmigrations.entity.ts\nupdate-migrations.dto.ts\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Since the generated files may contain formatting errors that ",(0,r.jsx)(t.code,{children:"eslint"})," detects, we exclude these files from ",(0,r.jsx)(t.code,{children:"eslint"})," checking."]}),"\n",(0,r.jsxs)(t.p,{children:["Updating ",(0,r.jsx)(t.em,{children:".eslintignore"})," files"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"...\nlibs/core/auth/src/lib/generated/rest/dto\n"})}),"\n",(0,r.jsx)(t.h3,{id:"5-updating-the-prismamodule-module-import-parameters-for-the-auth-database",children:'5. Updating the "PrismaModule" module import parameters for the "Auth" database'}),"\n",(0,r.jsxs)(t.p,{children:["Changing the ",(0,r.jsx)(t.code,{children:"PrismaModule"})," module import configuration for the ",(0,r.jsx)(t.code,{children:"Auth"})," database to accommodate new requirements for interacting with the database."]}),"\n",(0,r.jsxs)(t.p,{children:["Update the file ",(0,r.jsx)(t.em,{children:"apps/server/src/main.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// ...\n\nbootstrapNestApplication({\n  modules: {\n    // ...\n    core: [\n      // ...\n      PrismaModule.forRoot({\n        contextName: AUTH_FEATURE,\n        staticConfiguration: {\n          featureName: AUTH_FEATURE,\n          schemaFile: join(rootFolder, AUTH_FOLDER, 'src', 'prisma', PRISMA_SCHEMA_FILE),\n          prismaModule: isInfrastructureMode() ? import(`@nestjs-mod/prisma`) : import(`@prisma/auth-client`),\n          addMigrationScripts: false,\n          nxProjectJsonFile: join(rootFolder, AUTH_FOLDER, PROJECT_JSON_FILE),\n        },\n      }),\n    ],\n    // ...\n  },\n});\n"})}),"\n",(0,r.jsx)(t.h3,{id:"6-create-a-caching-service-for-auth-database-users",children:'6. Create a caching service for "Auth" database users'}),"\n",(0,r.jsxs)(t.p,{children:["Create a service for caching ",(0,r.jsx)(t.code,{children:"Auth"})," database users to speed up access to data from the ",(0,r.jsx)(t.code,{children:"AuthGuard"})," and ",(0,r.jsx)(t.code,{children:"AuthTimezoneInterceptor"})," services."]}),"\n",(0,r.jsxs)(t.p,{children:["Create a file ",(0,r.jsx)(t.em,{children:"libs\\core\\auth\\src\\lib\\services\\auth-cache.service.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { CacheManagerService } from '@nestjs-mod/cache-manager';\nimport { InjectPrismaClient } from '@nestjs-mod/prisma';\nimport { Injectable } from '@nestjs/common';\nimport { AuthUser, PrismaClient } from '@prisma/auth-client';\nimport { AUTH_FEATURE } from '../auth.constants';\nimport { AuthEnvironments } from '../auth.environments';\n\n@Injectable()\nexport class AuthCacheService {\n  constructor(\n    @InjectPrismaClient(AUTH_FEATURE)\n    private readonly prismaClient: PrismaClient,\n    private readonly cacheManagerService: CacheManagerService,\n    private readonly authEnvironments: AuthEnvironments\n  ) {}\n\n  async clearCacheByExternalUserId(externalUserId: string) {\n    const authUsers = await this.prismaClient.authUser.findMany({\n      where: { externalUserId },\n    });\n    for (const authUser of authUsers) {\n      await this.cacheManagerService.del(this.getUserCacheKey(authUser));\n    }\n  }\n\n  async getCachedUserByExternalUserId(externalUserId: string) {\n    const cached = await this.cacheManagerService.get<AuthUser | null>(\n      this.getUserCacheKey({\n        externalUserId,\n      })\n    );\n    if (cached) {\n      return cached;\n    }\n    const user = await this.prismaClient.authUser.findFirst({\n      where: {\n        externalUserId,\n      },\n    });\n    if (user) {\n      await this.cacheManagerService.set(this.getUserCacheKey({ externalUserId }), user, this.authEnvironments.cacheTTL);\n      return user;\n    }\n    return null;\n  }\n\n  private getUserCacheKey({ externalUserId }: { externalUserId: string }): string {\n    return `authUser.${externalUserId}`;\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"7-developing-a-controller-for-working-with-user-time-zone-information",children:"7. Developing a controller for working with user time zone information"}),"\n",(0,r.jsx)(t.p,{children:"Let's create a controller that will be responsible for receiving the user's current time zone settings and updating these parameters when necessary."}),"\n",(0,r.jsxs)(t.p,{children:["Create a file ",(0,r.jsx)(t.em,{children:"libs/core/auth/src/lib/controllers/auth.controller.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { StatusResponse } from '@nestjs-mod-fullstack/common';\nimport { ValidationError } from '@nestjs-mod-fullstack/validation';\nimport { InjectPrismaClient } from '@nestjs-mod/prisma';\nimport { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiBadRequestResponse, ApiExtraModels, ApiOkResponse, ApiTags, refs } from '@nestjs/swagger';\nimport { AuthRole, PrismaClient } from '@prisma/auth-client';\nimport { InjectTranslateFunction, TranslateFunction } from 'nestjs-translates';\nimport { AUTH_FEATURE } from '../auth.constants';\nimport { CheckAuthRole, CurrentAuthUser } from '../auth.decorators';\nimport { AuthError } from '../auth.errors';\nimport { AuthUser } from '../generated/rest/dto/auth-user.entity';\nimport { AuthEntities } from '../types/auth-entities';\nimport { AuthProfileDto } from '../types/auth-profile.dto';\nimport { AuthCacheService } from '../services/auth-cache.service';\n\n@ApiExtraModels(AuthError, AuthEntities, ValidationError)\n@ApiBadRequestResponse({\n  schema: { allOf: refs(AuthError, ValidationError) },\n})\n@ApiTags('Auth')\n@CheckAuthRole([AuthRole.User, AuthRole.Admin])\n@Controller('/auth')\nexport class AuthController {\n  constructor(\n    @InjectPrismaClient(AUTH_FEATURE)\n    private readonly prismaClient: PrismaClient,\n    private readonly authCacheService: AuthCacheService\n  ) {}\n\n  @Get('profile')\n  @ApiOkResponse({ type: AuthProfileDto })\n  async profile(@CurrentAuthUser() authUser: AuthUser): Promise<AuthProfileDto> {\n    return { timezone: authUser.timezone };\n  }\n\n  @Post('update-profile')\n  @ApiOkResponse({ type: StatusResponse })\n  async updateProfile(@CurrentAuthUser() authUser: AuthUser, @Body() args: AuthProfileDto, @InjectTranslateFunction() getText: TranslateFunction) {\n    await this.prismaClient.authUser.update({\n      where: { id: authUser.id },\n      data: {\n        timezone: args.timezone,\n        updatedAt: new Date(),\n      },\n    });\n    await this.authCacheService.clearCacheByExternalUserId(authUser.externalUserId);\n    return { message: getText('ok') };\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"8-create-a-service-for-recursive-conversion-of-date-type-fields-to-a-specified-time-zone",children:'8. Create a service for recursive conversion of "Date" type fields to a specified time zone'}),"\n",(0,r.jsx)(t.p,{children:'We will develop a service that will perform a recursive conversion of "Date" type fields to a specified time zone.'}),"\n",(0,r.jsxs)(t.p,{children:["Create a file ",(0,r.jsx)(t.em,{children:"libs/core/auth/src/lib/services/auth-timezone.service.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { Injectable, Logger } from '@nestjs/common';\nimport { addHours } from 'date-fns';\n\nexport type TObject = Record<string, unknown>;\n\nexport type TData = unknown | unknown[] | TObject | TObject[];\n\n@Injectable()\nexport class AuthTimezoneService {\n  private logger = new Logger(AuthTimezoneService.name);\n\n  convertObject(data: TData, timezone: number | null | undefined, depth = 10): TData {\n    if (depth === 0) {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      const newArray: unknown[] = [];\n      for (const item of data) {\n        newArray.push(this.convertObject(item, timezone, depth - 1));\n      }\n      return newArray;\n    }\n    if ((typeof data === 'string' || typeof data === 'number' || typeof data === 'function') && !this.isValidStringDate(data) && !this.isValidDate(data)) {\n      return data;\n    }\n    try {\n      if (data && timezone) {\n        if (this.isValidStringDate(data) || this.isValidDate(data)) {\n          if (this.isValidStringDate(data) && typeof data === 'string') {\n            data = new Date(data);\n          }\n          data = addHours(data as Date, timezone);\n        } else {\n          const keys = Object.keys(data);\n          for (const key of keys) {\n            (data as TObject)[key] = this.convertObject((data as TObject)[key], timezone, depth - 1);\n          }\n        }\n      }\n    } catch (err: unknown) {\n      if (err instanceof Error) {\n        this.logger.error(err, err.stack);\n      }\n    }\n    return data;\n  }\n\n  private isValidStringDate(data: string | number | unknown) {\n    return typeof data === 'string' && data.length === '0000-00-00T00:00:00.000Z'.length && !isNaN(+new Date(data));\n  }\n\n  private isValidDate(data: string | number | Date | object | unknown) {\n    if (data && typeof data === 'object') {\n      return !isNaN(+data);\n    }\n    return typeof data === 'string' && !isNaN(+new Date(data));\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"9-adding-an-interceptor-for-automatic-time-correction-in-data",children:"9. Adding an interceptor for automatic time correction in data"}),"\n",(0,r.jsx)(t.p,{children:"Let's create an interceptor that will automatically convert time values \u200b\u200bin data according to the time zone selected by the user. This will ensure that dates and times are displayed correctly in the user interface."}),"\n",(0,r.jsxs)(t.p,{children:["Create a file ",(0,r.jsx)(t.em,{children:"libs/core/auth/src/lib/interceptors/auth-timezone.interceptor.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { getRequestFromExecutionContext } from '@nestjs-mod/common';\nimport { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { isObservable, Observable } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\nimport { AuthCacheService } from '../services/auth-cache.service';\nimport { AuthTimezoneService, TData } from '../services/auth-timezone.service';\nimport { AuthRequest } from '../types/auth-request';\nimport { AuthEnvironments } from '../auth.environments';\n\n@Injectable()\nexport class AuthTimezoneInterceptor implements NestInterceptor<TData, TData> {\n  constructor(private readonly authTimezoneService: AuthTimezoneService, private readonly authCacheService: AuthCacheService, private readonly authEnvironments: AuthEnvironments) {}\n\n  intercept(context: ExecutionContext, next: CallHandler) {\n    const result = next.handle();\n\n    if (!this.authEnvironments.useInterceptors) {\n      return result;\n    }\n\n    const req: AuthRequest = getRequestFromExecutionContext(context);\n    const userId = req.authUser?.externalUserId;\n\n    if (!userId) {\n      return result;\n    }\n\n    if (isObservable(result)) {\n      return result.pipe(\n        concatMap(async (data) => {\n          const user = await this.authCacheService.getCachedUserByExternalUserId(userId);\n          return this.authTimezoneService.convertObject(data, user?.timezone);\n        })\n      );\n    }\n    if (result instanceof Promise && typeof result?.then === 'function') {\n      return result.then(async (data) => {\n        if (isObservable(result)) {\n          return result.pipe(\n            concatMap(async (data) => {\n              const user = await this.authCacheService.getCachedUserByExternalUserId(userId);\n              return this.authTimezoneService.convertObject(data, user?.timezone);\n            })\n          );\n        } else {\n          const user = await this.authCacheService.getCachedUserByExternalUserId(userId);\n          // need for correct map types with base method of NestInterceptor\n          return this.authTimezoneService.convertObject(data, user?.timezone) as Observable<TData>;\n        }\n      });\n    }\n    // need for correct map types with base method of NestInterceptor\n    return this.authTimezoneService.convertObject(result, req.authUser?.timezone) as Observable<TData>;\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"10-adding-authguard-to-automatically-create-users-in-the-auth-database",children:'10. Adding "AuthGuard" to automatically create users in the "Auth" database'}),"\n",(0,r.jsxs)(t.p,{children:["Integrating ",(0,r.jsx)(t.code,{children:"AuthGuard"})," so that users can automatically register in the ",(0,r.jsx)(t.code,{children:"Auth"})," database when working with the system."]}),"\n",(0,r.jsxs)(t.p,{children:["Create a file ",(0,r.jsx)(t.em,{children:"libs/core/auth/src/lib/auth.module.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { AllowEmptyUser } from '@nestjs-mod/authorizer';\nimport { getRequestFromExecutionContext } from '@nestjs-mod/common';\nimport { InjectPrismaClient } from '@nestjs-mod/prisma';\nimport { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthRole, PrismaClient } from '@prisma/auth-client';\nimport { AUTH_FEATURE } from './auth.constants';\nimport { CheckAuthRole, SkipAuthGuard } from './auth.decorators';\nimport { AuthError, AuthErrorEnum } from './auth.errors';\nimport { AuthCacheService } from './services/auth-cache.service';\nimport { AuthRequest } from './types/auth-request';\nimport { AuthEnvironments } from './auth.environments';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private logger = new Logger(AuthGuard.name);\n\n  constructor(\n    @InjectPrismaClient(AUTH_FEATURE)\n    private readonly prismaClient: PrismaClient,\n    private readonly reflector: Reflector,\n    private readonly authCacheService: AuthCacheService,\n    private readonly authEnvironments: AuthEnvironments\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    if (!this.authEnvironments.useGuards) {\n      return true;\n    }\n\n    try {\n      const { skipAuthGuard, checkAuthRole, allowEmptyUserMetadata } = this.getHandlersReflectMetadata(context);\n\n      if (skipAuthGuard) {\n        return true;\n      }\n\n      const req: AuthRequest = this.getRequestFromExecutionContext(context);\n\n      if (req.authorizerUser?.id) {\n        await this.tryGetOrCreateCurrentUserWithExternalUserId(req, req.authorizerUser.id);\n      }\n\n      this.throwErrorIfCurrentUserNotSet(req, allowEmptyUserMetadata);\n\n      this.throwErrorIfCurrentUserNotHaveNeededRoles(checkAuthRole, req);\n    } catch (err) {\n      this.logger.error(err, (err as Error).stack);\n      throw err;\n    }\n    return true;\n  }\n\n  private throwErrorIfCurrentUserNotHaveNeededRoles(checkAuthRole: AuthRole[] | undefined, req: AuthRequest) {\n    if (checkAuthRole && req.authUser && !checkAuthRole?.includes(req.authUser.userRole)) {\n      throw new AuthError(AuthErrorEnum.FORBIDDEN);\n    }\n  }\n\n  private throwErrorIfCurrentUserNotSet(req: AuthRequest, allowEmptyUserMetadata?: boolean) {\n    if (!req.skippedByAuthorizer && !req.authUser && !allowEmptyUserMetadata) {\n      throw new AuthError(AuthErrorEnum.USER_NOT_FOUND);\n    }\n  }\n\n  private async tryGetOrCreateCurrentUserWithExternalUserId(req: AuthRequest, externalUserId: string) {\n    if (!req.authUser && externalUserId) {\n      const authUser = await this.authCacheService.getCachedUserByExternalUserId(externalUserId);\n      req.authUser =\n        authUser ||\n        (await this.prismaClient.authUser.upsert({\n          create: { externalUserId, userRole: 'User' },\n          update: {},\n          where: { externalUserId },\n        }));\n    }\n  }\n\n  private getRequestFromExecutionContext(context: ExecutionContext) {\n    const req = getRequestFromExecutionContext(context) as AuthRequest;\n    req.headers = req.headers || {};\n    return req;\n  }\n\n  private getHandlersReflectMetadata(context: ExecutionContext) {\n    const allowEmptyUserMetadata = Boolean((typeof context.getHandler === 'function' && this.reflector.get(AllowEmptyUser, context.getHandler())) || (typeof context.getClass === 'function' && this.reflector.get(AllowEmptyUser, context.getClass())) || undefined);\n\n    const skipAuthGuard = (typeof context.getHandler === 'function' && this.reflector.get(SkipAuthGuard, context.getHandler())) || (typeof context.getClass === 'function' && this.reflector.get(SkipAuthGuard, context.getClass())) || undefined;\n\n    const checkAuthRole = (typeof context.getHandler === 'function' && this.reflector.get(CheckAuthRole, context.getHandler())) || (typeof context.getClass === 'function' && this.reflector.get(CheckAuthRole, context.getClass())) || undefined;\n    return { allowEmptyUserMetadata, skipAuthGuard, checkAuthRole };\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"11-registering-the-created-classes-in-authmodule",children:'11. Registering the created classes in "AuthModule"'}),"\n",(0,r.jsxs)(t.p,{children:["Let's register all the created classes in the ",(0,r.jsx)(t.code,{children:"AuthModule"})," module so that they become available for use in our application."]}),"\n",(0,r.jsxs)(t.p,{children:["Update the file ",(0,r.jsx)(t.em,{children:"libs/core/auth/src/lib/auth.module.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { AuthorizerGuard, AuthorizerModule } from '@nestjs-mod/authorizer';\nimport { createNestModule, getFeatureDotEnvPropertyNameFormatter, NestModuleCategory } from '@nestjs-mod/common';\nimport { PrismaModule } from '@nestjs-mod/prisma';\nimport { APP_FILTER, APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AUTH_FEATURE, AUTH_MODULE } from './auth.constants';\nimport { AuthEnvironments } from './auth.environments';\nimport { AuthExceptionsFilter } from './auth.filter';\nimport { AuthGuard } from './auth.guard';\nimport { AuthController } from './controllers/auth.controller';\nimport { AuthorizerController } from './controllers/authorizer.controller';\nimport { AuthTimezoneInterceptor } from './interceptors/auth-timezone.interceptor';\nimport { AuthAuthorizerBootstrapService } from './services/auth-authorizer-bootstrap.service';\nimport { AuthAuthorizerService } from './services/auth-authorizer.service';\nimport { AuthTimezoneService } from './services/auth-timezone.service';\nimport { CacheManagerModule } from '@nestjs-mod/cache-manager';\nimport { AuthCacheService } from './services/auth-cache.service';\n\nexport const { AuthModule } = createNestModule({\n  moduleName: AUTH_MODULE,\n  moduleCategory: NestModuleCategory.feature,\n  staticEnvironmentsModel: AuthEnvironments,\n  imports: [\n    AuthorizerModule.forFeature({\n      featureModuleName: AUTH_FEATURE,\n    }),\n    PrismaModule.forFeature({\n      contextName: AUTH_FEATURE,\n      featureModuleName: AUTH_FEATURE,\n    }),\n    CacheManagerModule.forFeature({\n      featureModuleName: AUTH_FEATURE,\n    }),\n  ],\n  controllers: [AuthorizerController, AuthController],\n  sharedImports: [\n    PrismaModule.forFeature({\n      contextName: AUTH_FEATURE,\n      featureModuleName: AUTH_FEATURE,\n    }),\n    CacheManagerModule.forFeature({\n      featureModuleName: AUTH_FEATURE,\n    }),\n  ],\n  sharedProviders: [AuthTimezoneService, AuthCacheService],\n  providers: [{ provide: APP_GUARD, useClass: AuthorizerGuard }, { provide: APP_GUARD, useClass: AuthGuard }, { provide: APP_FILTER, useClass: AuthExceptionsFilter }, { provide: APP_INTERCEPTOR, useClass: AuthTimezoneInterceptor }, AuthAuthorizerService, AuthAuthorizerBootstrapService],\n  wrapForRootAsync: (asyncModuleOptions) => {\n    if (!asyncModuleOptions) {\n      asyncModuleOptions = {};\n    }\n    const FomatterClass = getFeatureDotEnvPropertyNameFormatter(AUTH_FEATURE);\n    Object.assign(asyncModuleOptions, {\n      environmentsOptions: {\n        propertyNameFormatters: [new FomatterClass()],\n        name: AUTH_FEATURE,\n      },\n    });\n\n    return { asyncModuleOptions };\n  },\n});\n"})}),"\n",(0,r.jsx)(t.h3,{id:"12-setting-up-request-processing-via-the-websocket-gateway",children:'12. Setting up request processing via the "WebSocket" gateway'}),"\n",(0,r.jsxs)(t.p,{children:["Although we declared global guard and interceptor in the ",(0,r.jsx)(t.code,{children:"AuthModule"}),' module, they will not be automatically applied to request processing via the "WebSocket" gateway. Therefore, to process requests via the gateway, we will create a special decorator and apply it to the ',(0,r.jsx)(t.code,{children:"TimeController"})," controller."]}),"\n",(0,r.jsxs)(t.p,{children:["Create a file ",(0,r.jsx)(t.em,{children:"libs/core/auth/src/lib/auth.decorators.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { getRequestFromExecutionContext } from '@nestjs-mod/common';\nimport { createParamDecorator, ExecutionContext, UseGuards, UseInterceptors } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthRole } from '@prisma/auth-client';\nimport { AuthRequest } from './types/auth-request';\n\nimport { AllowEmptyUser, AuthorizerGuard } from '@nestjs-mod/authorizer';\nimport { applyDecorators } from '@nestjs/common';\nimport { AuthGuard } from './auth.guard';\nimport { AuthTimezoneInterceptor } from './interceptors/auth-timezone.interceptor';\n\nexport const SkipAuthGuard = Reflector.createDecorator<true>();\nexport const CheckAuthRole = Reflector.createDecorator<AuthRole[]>();\n\nexport const CurrentAuthRequest = createParamDecorator((_data: unknown, ctx: ExecutionContext) => {\n  const req = getRequestFromExecutionContext(ctx) as AuthRequest;\n  return req;\n});\n\nexport const CurrentAuthUser = createParamDecorator((_data: unknown, ctx: ExecutionContext) => {\n  const req = getRequestFromExecutionContext(ctx) as AuthRequest;\n  return req.authUser;\n});\n\nfunction AddHandleConnection() {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  return function (constructor: Function) {\n    constructor.prototype.handleConnection = function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      client: any,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ...args: any[]\n    ) {\n      const authorizationHeader = args[0]?.headers.authorization;\n      const queryToken = args[0]?.url?.split('token=')?.[1];\n      client.headers = {\n        authorization: authorizationHeader || queryToken ? `Bearer ${queryToken}` : '',\n      };\n    };\n  };\n}\n\nexport function UseAuthInterceptorsAndGuards(options?: { allowEmptyUser?: boolean }) {\n  return applyDecorators(UseInterceptors(AuthTimezoneInterceptor), UseGuards(AuthorizerGuard, AuthGuard), AddHandleConnection(), ...(options?.allowEmptyUser ? [AllowEmptyUser()] : []));\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Update the file ",(0,r.jsx)(t.em,{children:"apps/server/src/app/time.controller.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { UseAuthInterceptorsAndGuards } from '@nestjs-mod-fullstack/auth';\nimport { Controller, Get } from '@nestjs/common';\n\nimport { ApiOkResponse } from '@nestjs/swagger';\nimport { SubscribeMessage, WebSocketGateway, WsResponse } from '@nestjs/websockets';\nimport { interval, map, Observable } from 'rxjs';\n\nexport const ChangeTimeStream = 'ChangeTimeStream';\n\n@UseAuthInterceptorsAndGuards({ allowEmptyUser: true })\n@WebSocketGateway({\n  cors: {\n    origin: '*',\n  },\n  path: '/ws/time',\n  transports: ['websocket'],\n})\n@Controller()\nexport class TimeController {\n  @Get('/time')\n  @ApiOkResponse({ type: Date })\n  time() {\n    return new Date();\n  }\n\n  @SubscribeMessage(ChangeTimeStream)\n  onChangeTimeStream(): Observable<WsResponse<Date>> {\n    return interval(1000).pipe(\n      map(() => ({\n        data: new Date(),\n        event: ChangeTimeStream,\n      }))\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"13-create-a-new-e2e-test-to-check-the-correctness-of-the-conversion-of-fields-of-the-date-type",children:'13. Create a new "e2e" test to check the correctness of the conversion of fields of the "Date" type.'}),"\n",(0,r.jsxs)(t.p,{children:["Let's create a new ",(0,r.jsx)(t.code,{children:"e2e"})," test that checks the correctness of the conversion of fields of the ",(0,r.jsx)(t.code,{children:"Date"})," type to different time zones."]}),"\n",(0,r.jsxs)(t.p,{children:["Update the file ",(0,r.jsx)(t.em,{children:"apps/server-e2e/src/server/timezone-time.spec.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { RestClientHelper } from '@nestjs-mod-fullstack/testing';\nimport { isDateString } from 'class-validator';\nimport { get } from 'env-var';\nimport { lastValueFrom, take, toArray } from 'rxjs';\n\ndescribe('Get server time from rest api and ws (timezone)', () => {\n  jest.setTimeout(60000);\n\n  const correctStringDateLength = '0000-00-00T00:00:00.000Z'.length;\n  const restClientHelper = new RestClientHelper({\n    serverUrl: process.env.IS_DOCKER_COMPOSE ? get('CLIENT_URL').asString() : undefined,\n  });\n\n  beforeAll(async () => {\n    await restClientHelper.createAndLoginAsUser();\n  });\n\n  it('should return time from rest api in two different time zones', async () => {\n    const time = await restClientHelper.getTimeApi().timeControllerTime();\n\n    expect(time.status).toBe(200);\n    expect(time.data).toHaveLength(correctStringDateLength);\n    expect(isDateString(time.data)).toBeTruthy();\n\n    await restClientHelper.getAuthApi().authControllerUpdateProfile({ timezone: -3 });\n\n    const time2 = await restClientHelper.getTimeApi().timeControllerTime();\n\n    expect(time2.status).toBe(200);\n    expect(time2.data).toHaveLength(correctStringDateLength);\n    expect(isDateString(time2.data)).toBeTruthy();\n\n    expect(+new Date(time.data as unknown as string) - +new Date(time2.data as unknown as string)).toBeGreaterThanOrEqual(3 * 60 * 1000);\n  });\n\n  it('should return time from ws in two different time zones', async () => {\n    await restClientHelper.getAuthApi().authControllerUpdateProfile({ timezone: null });\n\n    const last3ChangeTimeEvents = await lastValueFrom(\n      restClientHelper\n        .webSocket<string>({\n          path: `/ws/time?token=${restClientHelper.authorizationTokens?.access_token}`,\n          eventName: 'ChangeTimeStream',\n        })\n        .pipe(take(3), toArray())\n    );\n\n    expect(last3ChangeTimeEvents).toHaveLength(3);\n\n    await restClientHelper.getAuthApi().authControllerUpdateProfile({ timezone: -3 });\n\n    const newLast3ChangeTimeEvents = await lastValueFrom(\n      restClientHelper\n        .webSocket<string>({\n          path: `/ws/time?token=${restClientHelper.authorizationTokens?.access_token}`,\n          eventName: 'ChangeTimeStream',\n        })\n        .pipe(take(3), toArray())\n    );\n\n    expect(newLast3ChangeTimeEvents).toHaveLength(3);\n\n    expect(+new Date(last3ChangeTimeEvents[0].data as unknown as string) - +new Date(newLast3ChangeTimeEvents[0].data as unknown as string)).toBeGreaterThanOrEqual(3 * 60 * 1000);\n    expect(+new Date(last3ChangeTimeEvents[1].data as unknown as string) - +new Date(newLast3ChangeTimeEvents[1].data as unknown as string)).toBeGreaterThanOrEqual(3 * 60 * 1000);\n    expect(+new Date(last3ChangeTimeEvents[2].data as unknown as string) - +new Date(newLast3ChangeTimeEvents[2].data as unknown as string)).toBeGreaterThanOrEqual(3 * 60 * 1000);\n  });\n});\n"})}),"\n",(0,r.jsx)(t.h3,{id:"14-we-restart-the-infrastructure-and-all-applications-check-the-correctness-of-the-execution-of-e2e-tests",children:"14. We restart the infrastructure and all applications, check the correctness of the execution of e2e tests"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Commands"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm run pm2-full:dev:stop\nnpm run pm2-full:dev:start\nnpm run pm2-full:dev:test:e2e\n"})}),"\n",(0,r.jsx)(t.h3,{id:"15-passing-an-authorization-token-for-websockets-via-a-query-line",children:'15. Passing an authorization token for websockets via a "query" line'}),"\n",(0,r.jsx)(t.p,{children:"We pass the authorization token for websockets through the request parameter to provide user authentication when using websockets."}),"\n",(0,r.jsxs)(t.p,{children:["Update the file ",(0,r.jsx)(t.em,{children:"apps/client/src/app/app.component.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// ...\nimport { AuthService, TokensService } from '@nestjs-mod-fullstack/auth-angular';\n\n@UntilDestroy()\n@Component({\n  standalone: true,\n  imports: [RouterModule, NzMenuModule, NzLayoutModule, NzTypographyModule, AsyncPipe, NgForOf, NgFor, TranslocoPipe, TranslocoDirective],\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  // ...\n\n  constructor(\n    // ...\n    private readonly tokensService: TokensService\n  ) {}\n\n  // ...\n\n  private fillServerTime() {\n    return merge(\n      this.timeRestService.timeControllerTime(),\n      merge(of(this.tokensService.tokens$.value), this.tokensService.tokens$.asObservable())\n        .pipe(\n          switchMap((token) =>\n            webSocket<string>({\n              address: this.timeRestService.configuration.basePath + (token?.access_token ? `/ws/time?token=${token?.access_token}` : '/ws/time'),\n              eventName: 'ChangeTimeStream',\n            })\n          )\n        )\n        .pipe(map((result) => result.data))\n    ).pipe(tap((result) => this.serverTime$.next(result as string)));\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"16replacing-the-original-profile-form-fields-and-changing-the-profile-update-method",children:"16.Replacing the original profile form fields and changing the profile update method"}),"\n",(0,r.jsxs)(t.p,{children:["A lot of the changes on the frontend were made in this post, and while I won't cover every detail, it's important to note that working with forms has been simplified by using the ",(0,r.jsx)(t.code,{children:"Dependency Injection"})," mechanism."]}),"\n",(0,r.jsxs)(t.p,{children:["Now, to add a new field to the profile form or change existing fields, you don't need to edit the source directly in the module. Instead, a new class with the necessary implementation is created, which replaces the original class via the ",(0,r.jsx)(t.code,{children:"DI"})," mechanism."]}),"\n",(0,r.jsxs)(t.p,{children:["The new ",(0,r.jsx)(t.code,{children:"Timezone"})," field will be an enumeration value (",(0,r.jsx)(t.code,{children:"Enum"}),"), which is stored in the corresponding class."]}),"\n",(0,r.jsxs)(t.p,{children:["Create a file ",(0,r.jsx)(t.em,{children:"apps/client/src/app/integrations/custom-auth-profile-form.service.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { Injectable } from '@angular/core';\nimport { LoginInput, UpdateProfileInput } from '@authorizerdev/authorizer-js';\nimport { TranslocoService } from '@jsverse/transloco';\nimport { ValidationErrorMetadataInterface } from '@nestjs-mod-fullstack/app-angular-rest-sdk';\nimport { AuthProfileFormService } from '@nestjs-mod-fullstack/auth-angular';\nimport { marker } from '@ngneat/transloco-keys-manager/marker';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\n\n@UntilDestroy()\n@Injectable({ providedIn: 'root' })\nexport class CustomAuthProfileFormService extends AuthProfileFormService {\n  private utcTimeZones = [\n    {\n      label: marker('UTC\u221212:00: Date Line (west)'),\n      value: -12,\n    },\n    // ...\n    {\n      label: marker('UTC+14:00: Date Line (east)'),\n      value: 14,\n    },\n  ];\n\n  constructor(protected override readonly translocoService: TranslocoService) {\n    super(translocoService);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  override getFormlyFields(options?: { data?: LoginInput; errors?: ValidationErrorMetadataInterface[] }): FormlyFieldConfig[] {\n    return super.appendServerErrorsAsValidatorsToFields(\n      [\n        ...super.getFormlyFields(),\n        {\n          key: 'timezone',\n          type: 'select',\n          validation: {\n            show: true,\n          },\n          props: {\n            label: this.translocoService.translate(`auth.sign-in-form.fields.timezone`),\n            placeholder: 'timezone',\n            required: false,\n            options: this.utcTimeZones.map((z) => ({\n              ...z,\n              label: this.translocoService.translate(z.label),\n            })),\n          },\n        },\n      ],\n      options?.errors || []\n    );\n  }\n\n  override toModel(data: UpdateProfileInput) {\n    return {\n      old_password: data['old_password'],\n      new_password: data['new_password'],\n      confirm_new_password: data['confirm_new_password'],\n      picture: data['picture'],\n      timezone: data['timezone'],\n    };\n  }\n\n  override toJson(data: UpdateProfileInput) {\n    return {\n      old_password: data['old_password'],\n      new_password: data['new_password'],\n      confirm_new_password: data['confirm_new_password'],\n      picture: data['picture'],\n      timezone: data['timezone'],\n    };\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In addition to working with form fields, we also need to implement loading and saving the user's time zone to and from the form. To do this, we will create a new implementation of the service that will work with the user profile in the ",(0,r.jsx)(t.code,{children:"Auth"})," database."]}),"\n",(0,r.jsxs)(t.p,{children:["Create a file ",(0,r.jsx)(t.em,{children:"apps/client/src/app/integrations/custom-auth.service.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { Inject, Injectable, Optional } from '@angular/core';\nimport { UpdateProfileInput, User } from '@authorizerdev/authorizer-js';\nimport { AuthRestService } from '@nestjs-mod-fullstack/app-angular-rest-sdk';\nimport { AUTH_CONFIGURATION_TOKEN, AuthConfiguration, AuthorizerService, AuthService, TokensService } from '@nestjs-mod-fullstack/auth-angular';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { catchError, map, mergeMap, of } from 'rxjs';\n\n@UntilDestroy()\n@Injectable({ providedIn: 'root' })\nexport class CustomAuthService extends AuthService {\n  constructor(\n    protected readonly authRestService: AuthRestService,\n    protected override readonly authorizerService: AuthorizerService,\n    protected override readonly tokensService: TokensService,\n    @Optional()\n    @Inject(AUTH_CONFIGURATION_TOKEN)\n    protected override readonly authConfiguration?: AuthConfiguration\n  ) {\n    super(authorizerService, tokensService, authConfiguration);\n  }\n\n  override setProfile(result: User | undefined) {\n    return this.authRestService.authControllerProfile().pipe(\n      catchError(() => of(null)),\n      mergeMap((profile) => {\n        if (result && profile) {\n          Object.assign(result, profile);\n        }\n        return super.setProfile(result);\n      })\n    );\n  }\n\n  override updateProfile(data: UpdateProfileInput & { timezone: number }) {\n    const { timezone, ...profile } = data;\n    return super.updateProfile(profile).pipe(\n      mergeMap((result) =>\n        this.authRestService.authControllerUpdateProfile({ timezone }).pipe(\n          map(() => {\n            if (result) {\n              Object.assign(result, { timezone });\n            }\n            return result;\n          })\n        )\n      )\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"To make the new field appear in the profile form, you need to add class override rules to the frontend application configuration."}),"\n",(0,r.jsxs)(t.p,{children:["Update the file ",(0,r.jsx)(t.em,{children:"apps/client/src/app/integrations/custom-auth.service.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { AUTHORIZER_URL, AuthProfileFormService, AuthService } from '@nestjs-mod-fullstack/auth-angular';\nimport { CustomAuthProfileFormService } from './integrations/custom-auth-profile-form.service';\nimport { CustomAuthService } from './integrations/custom-auth.service';\n// ...\n\nexport const appConfig = ({ authorizerURL, minioURL }: { authorizerURL: string; minioURL: string }): ApplicationConfig => {\n  return {\n    providers: [\n      // ...\n      {\n        provide: AuthProfileFormService,\n        useClass: CustomAuthProfileFormService,\n      },\n      {\n        provide: AuthService,\n        useClass: CustomAuthService,\n      },\n    ],\n  };\n};\n"})}),"\n",(0,r.jsx)(t.h3,{id:"17-creating-an-e2e-test-for-an-angular-application-to-check-time-zone-switching",children:"17. Creating an E2E test for an Angular application to check time zone switching"}),"\n",(0,r.jsx)(t.p,{children:"To test the application's behavior in the context of changing the user's time zone, we will create an End-to-End test for an Angular application that will check the correctness of time zone switching in the interface."}),"\n",(0,r.jsxs)(t.p,{children:["Create a file ",(0,r.jsx)(t.em,{children:"apps/client-e2e/src/timezone-profile-as-user.spec.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { faker } from '@faker-js/faker';\nimport { expect, Page, test } from '@playwright/test';\nimport { isDateString } from 'class-validator';\nimport { differenceInHours } from 'date-fns';\nimport { get } from 'env-var';\nimport { join } from 'path';\nimport { setTimeout } from 'timers/promises';\n\ntest.describe('Work with profile as \"User\" role (timezone', () => {\n  test.describe.configure({ mode: 'serial' });\n\n  const correctStringDateLength = '0000-00-00T00:00:00.000Z'.length;\n\n  const user = {\n    email: faker.internet.email({\n      provider: 'example.fakerjs.dev',\n    }),\n    password: faker.internet.password({ length: 8 }),\n    site: `http://${faker.internet.domainName()}`,\n  };\n  let page: Page;\n\n  test.beforeAll(async ({ browser }) => {\n    page = await browser.newPage({\n      viewport: { width: 1920, height: 1080 },\n      recordVideo: {\n        dir: join(__dirname, 'video'),\n        size: { width: 1920, height: 1080 },\n      },\n    });\n    await page.goto('/', {\n      timeout: 7000,\n    });\n    await page.evaluate((authorizerURL) => localStorage.setItem('authorizerURL', authorizerURL), get('SERVER_AUTHORIZER_URL').required().asString());\n    await page.evaluate((minioURL) => localStorage.setItem('minioURL', minioURL), get('SERVER_MINIO_URL').required().asString());\n  });\n\n  test.afterAll(async () => {\n    await setTimeout(1000);\n    await page.close();\n  });\n\n  test('sign up as user', async () => {\n    await page.goto('/sign-up', {\n      timeout: 7000,\n    });\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=email]').click();\n    await page.keyboard.type(user.email.toLowerCase(), {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=email]')).toHaveValue(user.email.toLowerCase());\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=password]')).toHaveValue(user.password);\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]')).toHaveValue(user.password);\n\n    await expect(page.locator('auth-sign-up-form').locator('button[type=submit]')).toHaveText('Sign-up');\n\n    await page.locator('auth-sign-up-form').locator('button[type=submit]').click();\n\n    await setTimeout(3000);\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]').first()).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n  });\n\n  test('sign out after sign-up', async () => {\n    await expect(page.locator('nz-header').locator('[nz-submenu]').first()).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n    await page.locator('nz-header').locator('[nz-submenu]').first().click();\n\n    await expect(page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last()).toContainText(`Sign-out`);\n\n    await page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last().click();\n\n    await setTimeout(4000);\n\n    await expect(page.locator('nz-header').locator('[nz-menu-item]').last()).toContainText(`Sign-in`);\n  });\n\n  test('sign in as user', async () => {\n    await page.goto('/sign-in', {\n      timeout: 7000,\n    });\n\n    await page.locator('auth-sign-in-form').locator('[placeholder=email]').click();\n    await page.keyboard.type(user.email.toLowerCase(), {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-in-form').locator('[placeholder=email]')).toHaveValue(user.email.toLowerCase());\n\n    await page.locator('auth-sign-in-form').locator('[placeholder=password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-in-form').locator('[placeholder=password]')).toHaveValue(user.password);\n\n    await expect(page.locator('auth-sign-in-form').locator('button[type=submit]')).toHaveText('Sign-in');\n\n    await page.locator('auth-sign-in-form').locator('button[type=submit]').click();\n\n    await setTimeout(3000);\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]').first()).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n  });\n\n  test('should change timezone in profile', async () => {\n    const oldServerTime = await page.locator('#serverTime').innerText();\n    expect(oldServerTime).toHaveLength(correctStringDateLength);\n    expect(isDateString(oldServerTime)).toBeTruthy();\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]').first()).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n    await page.locator('nz-header').locator('[nz-submenu]').first().click();\n\n    await expect(page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').first()).toContainText(`Profile`);\n\n    await page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').first().click();\n\n    await setTimeout(4000);\n    //\n    await page.locator('auth-profile-form').locator('[placeholder=timezone]').click();\n    await page.keyboard.press('Enter', { delay: 100 });\n    await expect(page.locator('auth-profile-form').locator('[placeholder=timezone]')).toContainText('UTC\u221212:00: Date Line (west)');\n\n    await expect(page.locator('auth-profile-form').locator('button[type=submit]')).toHaveText('Update');\n\n    await page.locator('auth-profile-form').locator('button[type=submit]').click();\n\n    await setTimeout(5000);\n\n    const newServerTime = await page.locator('#serverTime').innerText();\n    expect(newServerTime).toHaveLength(correctStringDateLength);\n    expect(isDateString(newServerTime)).toBeTruthy();\n\n    expect(differenceInHours(new Date(oldServerTime), new Date(newServerTime))).toBeGreaterThanOrEqual(11);\n  });\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"Let's run the test and see if it passes."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Commands"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm run nx -- run client-e2e:e2e timezone\n"})}),"\n",(0,r.jsx)(t.p,{children:"If the test is successful, then the time zone switching in the application works correctly."}),"\n",(0,r.jsx)(t.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(t.p,{children:"Within the framework of this article, support for user time zones was implemented, and the information about the zone is stored in the database."}),"\n",(0,r.jsxs)(t.p,{children:["We placed the main logic for processing time zones on the server side of the application. On the client side, the time zone property is added using the dependency injection mechanism (",(0,r.jsx)(t.code,{children:"Dependency Injection"}),")."]}),"\n",(0,r.jsx)(t.p,{children:"The functionality was thoroughly tested using E2E testing."}),"\n",(0,r.jsx)(t.h3,{id:"plans",children:"Plans"}),"\n",(0,r.jsx)(t.p,{children:"In the next post I will talk about how to add the ability to save the user's selected language to the database. This is important, since the language can now differ on different devices of the same user."}),"\n",(0,r.jsx)(t.h3,{id:"links",children:"Links"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})," - website from the post"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/43979334656d63c8d4250b17f81fbd26793b5d78..3019d982ca9605479a8b917f71a8ae268f3582bc",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/43979334656d63c8d4250b17f81fbd26793b5d78..3019d982ca9605479a8b917f71a8ae268f3582bc"})," - current changes"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/12304209080/artifacts/2314033540",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/12304209080/artifacts/2314033540"})," - video from E2E frontend tests"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"#angular #timezone #nestjsmod #fullstack\n#2024-12-12"})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(6540);const a={},o=r.createContext(a);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);