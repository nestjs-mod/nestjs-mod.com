"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[9775],{8974:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(4848),s=t(8453);const i={},a="Getting server time via WebSockets and displaying It in Angular application",o={id:"en-posts/fullstack/2024-11-21",title:"Getting server time via WebSockets and displaying It in Angular application",description:"In this post I will describe how to create a web socket stream in the backend on NestJS and subscribe to it from the frontend application on Angular.",source:"@site/docs/en-posts/fullstack/2024-11-21.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-11-21",permalink:"/docs/en-posts/fullstack/2024-11-21",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-11-21.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Caching information in Redis on NestJS",permalink:"/docs/en-posts/fullstack/2024-11-20"},next:{title:"Validating REST requests in a NestJS application and displaying errors in Angular application forms",permalink:"/docs/en-posts/fullstack/2024-11-24"}},l={},c=[{value:"1. Install additional libraries",id:"1-install-additional-libraries",level:3},{value:"2. Create a controller that returns server time",id:"2-create-a-controller-that-returns-server-time",level:3},{value:"3. Adding a controller to AppModule",id:"3-adding-a-controller-to-appmodule",level:3},{value:"4. Rebuilding SDK for frontend and tests",id:"4-rebuilding-sdk-for-frontend-and-tests",level:3},{value:"5. Adding a utility for convenient work with web sockets from an Angular application",id:"5-adding-a-utility-for-convenient-work-with-web-sockets-from-an-angular-application",level:3},{value:"6. Adding retrieval and display of the current server time in the page footer",id:"6-adding-retrieval-and-display-of-the-current-server-time-in-the-page-footer",level:3},{value:"7. Create an E2E test to check the operation of time-related logics",id:"7-create-an-e2e-test-to-check-the-operation-of-time-related-logics",level:3},{value:"8. We launch the infrastructure with applications in development mode and check the operation through E2E tests",id:"8-we-launch-the-infrastructure-with-applications-in-development-mode-and-check-the-operation-through-e2e-tests",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"getting-server-time-via-websockets-and-displaying-it-in-angular-application",children:"Getting server time via WebSockets and displaying It in Angular application"}),"\n",(0,r.jsxs)(n.p,{children:["In this post I will describe how to create a web socket stream in the backend on ",(0,r.jsx)(n.code,{children:"NestJS"})," and subscribe to it from the frontend application on ",(0,r.jsx)(n.code,{children:"Angular"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"1-install-additional-libraries",children:"1. Install additional libraries"}),"\n",(0,r.jsxs)(n.p,{children:["Install ",(0,r.jsx)(n.code,{children:"NestJS"})," modules to work with ",(0,r.jsx)(n.code,{children:"websockets"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Commands"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save @nestjs/websockets @nestjs/platform-socket.io @nestjs/platform-ws\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Console output"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ npm install --save @nestjs/websockets @nestjs/platform-socket.io @nestjs/platform-ws\n\nadded 4 packages, removed 2 packages, and audited 2938 packages in 1m\n\n360 packages are looking for funding\n  run `npm fund` for details\n\n42 vulnerabilities (21 low, 3 moderate, 18 high)\n\nTo address issues that do not require attention, run:\n  npm audit fix\n\nTo address all issues possible (including breaking changes), run:\n  npm audit fix --force\n\nSome issues need review, and may require choosing\na different dependency.\n\nRun `npm audit` for details.\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-create-a-controller-that-returns-server-time",children:"2. Create a controller that returns server time"}),"\n",(0,r.jsx)(n.p,{children:"The controller has a method for issuing the current time and a web socket that returns the current backend time every second."}),"\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.em,{children:"apps/server/src/app/time.controller.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Controller, Get } from '@nestjs/common';\n\nimport { AllowEmptyUser } from '@nestjs-mod/authorizer';\nimport { ApiOkResponse } from '@nestjs/swagger';\nimport { OnGatewayConnection, SubscribeMessage, WebSocketGateway, WsResponse } from '@nestjs/websockets';\nimport { interval, map, Observable } from 'rxjs';\n\nexport const ChangeTimeStream = 'ChangeTimeStream';\n\n@AllowEmptyUser()\n@WebSocketGateway({\n  cors: {\n    origin: '*',\n  },\n  path: '/ws/time',\n  transports: ['websocket'],\n})\n@Controller()\nexport class TimeController implements OnGatewayConnection {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handleConnection(client: any, ...args: any[]) {\n    client.headers = args[0].headers;\n  }\n\n  @Get('/time')\n  @ApiOkResponse({ type: Date })\n  time() {\n    return new Date();\n  }\n\n  @SubscribeMessage(ChangeTimeStream)\n  onChangeTimeStream(): Observable<WsResponse<Date>> {\n    return interval(1000).pipe(\n      map(() => ({\n        data: new Date(),\n        event: ChangeTimeStream,\n      }))\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-adding-a-controller-to-appmodule",children:"3. Adding a controller to AppModule"}),"\n",(0,r.jsxs)(n.p,{children:["Since the controller also includes the gateway logic, we provide the controller in the ",(0,r.jsx)(n.code,{children:"controllers"})," and ",(0,r.jsx)(n.code,{children:"providers"})," sections."]}),"\n",(0,r.jsxs)(n.p,{children:["Updating the file ",(0,r.jsx)(n.em,{children:"apps/server/src/app/app.module.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { createNestModule, NestModuleCategory } from '@nestjs-mod/common';\n\nimport { WebhookModule } from '@nestjs-mod-fullstack/webhook';\nimport { PrismaModule } from '@nestjs-mod/prisma';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TimeController } from './time.controller';\n\nexport const { AppModule } = createNestModule({\n  moduleName: 'AppModule',\n  moduleCategory: NestModuleCategory.feature,\n  imports: [\n    WebhookModule.forFeature({\n      featureModuleName: 'app',\n    }),\n    PrismaModule.forFeature({\n      contextName: 'app',\n      featureModuleName: 'app',\n    }),\n    ...(process.env.DISABLE_SERVE_STATIC\n      ? []\n      : [\n          ServeStaticModule.forRoot({\n            rootPath: join(__dirname, '..', 'client', 'browser'),\n          }),\n        ]),\n  ],\n  controllers: [AppController, TimeController],\n  providers: [AppService, TimeController],\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-rebuilding-sdk-for-frontend-and-tests",children:"4. Rebuilding SDK for frontend and tests"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Commands"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run generate\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-adding-a-utility-for-convenient-work-with-web-sockets-from-an-angular-application",children:"5. Adding a utility for convenient work with web sockets from an Angular application"}),"\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.em,{children:"libs/common-angular/src/lib/utils/web-socket.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { Observable, finalize } from 'rxjs';\n\nexport function webSocket<T>({\n  address,\n  eventName,\n  options,\n}: {\n  address: string;\n  eventName: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options?: any;\n}) {\n  const wss = new WebSocket(address.replace('/api', '').replace('http', 'ws'), options);\n  return new Observable<{ data: T; event: string }>((observer) => {\n    wss.addEventListener('open', () => {\n      wss.addEventListener('message', ({ data }) => {\n        observer.next(JSON.parse(data.toString()));\n      });\n      wss.addEventListener('error', (err) => {\n        observer.error(err);\n        if (wss?.readyState == WebSocket.OPEN) {\n          wss.close();\n        }\n      });\n      wss.send(\n        JSON.stringify({\n          event: eventName,\n          data: true,\n        })\n      );\n    });\n  }).pipe(\n    finalize(() => {\n      if (wss?.readyState == WebSocket.OPEN) {\n        wss.close();\n      }\n    })\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6-adding-retrieval-and-display-of-the-current-server-time-in-the-page-footer",children:"6. Adding retrieval and display of the current server time in the page footer"}),"\n",(0,r.jsxs)(n.p,{children:["Updating the file ",(0,r.jsx)(n.em,{children:"apps/client/src/app/app.component.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { AsyncPipe } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { User } from '@authorizerdev/authorizer-js';\nimport { AppRestService, TimeRestService } from '@nestjs-mod-fullstack/app-angular-rest-sdk';\nimport { AuthService } from '@nestjs-mod-fullstack/auth-angular';\nimport { webSocket } from '@nestjs-mod-fullstack/common-angular';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { NzLayoutModule } from 'ng-zorro-antd/layout';\n\nimport { NzMenuModule } from 'ng-zorro-antd/menu';\nimport { NzTypographyModule } from 'ng-zorro-antd/typography';\nimport { BehaviorSubject, map, merge, Observable, tap } from 'rxjs';\n\n@UntilDestroy()\n@Component({\n  standalone: true,\n  imports: [RouterModule, NzMenuModule, NzLayoutModule, NzTypographyModule, AsyncPipe],\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  title = 'client';\n  serverMessage$ = new BehaviorSubject('');\n  serverTime$ = new BehaviorSubject('');\n  authUser$: Observable<User | undefined>;\n\n  constructor(private readonly timeRestService: TimeRestService, private readonly appRestService: AppRestService, private readonly authService: AuthService, private readonly router: Router) {\n    this.authUser$ = this.authService.profile$.asObservable();\n  }\n\n  ngOnInit() {\n    this.appRestService\n      .appControllerGetData()\n      .pipe(\n        tap((result) => this.serverMessage$.next(result.message)),\n        untilDestroyed(this)\n      )\n      .subscribe();\n\n    merge(\n      this.timeRestService.timeControllerTime(),\n      webSocket<string>({\n        address: this.timeRestService.configuration.basePath + '/ws/time',\n        eventName: 'ChangeTimeStream',\n      }).pipe(map((result) => result.data))\n    )\n      .pipe(\n        tap((result) => this.serverTime$.next(result as string)),\n        untilDestroyed(this)\n      )\n      .subscribe();\n  }\n\n  signOut() {\n    this.authService\n      .signOut()\n      .pipe(\n        tap(() => this.router.navigate(['/home'])),\n        untilDestroyed(this)\n      )\n      .subscribe();\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Updating the file ",(0,r.jsx)(n.em,{children:"apps/client/src/app/app.component.html"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<nz-layout class="layout_\n  <nz-header>\n    <div class="logo flex items-center justify-center_{{ title }}</div>\n    <ul nz-menu nzTheme="dark" nzMode="horizontal_\n      <li nz-menu-item routerLink="/home_Home</li>\n      <li nz-menu-item routerLink="/demo_Demo</li>\n      @if (authUser$|async; as authUser) {\n      <li nz-menu-item routerLink="/webhook_Webhook</li>\n      <li nz-submenu [nzTitle]="\'You are logged in as\' + authUser.email" [style]="{ float: \'right\' }_\n        <ul>\n          <li nz-menu-item routerLink="/profile_Profile</li>\n          <li nz-menu-item (click)="signOut()_Sign-out</li>\n        </ul>\n      </li>\n      } @else {\n      <li nz-menu-item routerLink="/sign-up" [style]="{ float: \'right\' }_Sign-up</li>\n      <li nz-menu-item routerLink="/sign-in" [style]="{ float: \'right\' }_Sign-in</li>\n      }\n    </ul>\n  </nz-header>\n  <nz-content>\n    <router-outlet></router-outlet>\n  </nz-content>\n  <nz-footer class="flex justify-between_\n    <div id="serverMessage_{{ serverMessage$ | async }}</div>\n    <div id="serverTime_{{ serverTime$ | async }}</div>\n  </nz-footer>\n</nz-layout>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"7-create-an-e2e-test-to-check-the-operation-of-time-related-logics",children:"7. Create an E2E test to check the operation of time-related logics"}),"\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.em,{children:"apps/server-e2e/src/server/time.spec.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { RestClientHelper } from '@nestjs-mod-fullstack/testing';\nimport { isDateString } from 'class-validator';\nimport { lastValueFrom, take, toArray } from 'rxjs';\n\ndescribe('Get server time from rest api and ws', () => {\n  jest.setTimeout(60000);\n\n  const correctStringDateLength = '2024-11-20T11:58:03.338Z'.length;\n  const restClientHelper = new RestClientHelper();\n  const timeApi = restClientHelper.getTimeApi();\n\n  it('should return time from rest api', async () => {\n    const time = await timeApi.timeControllerTime();\n\n    expect(time.status).toBe(200);\n    expect(time.data).toHaveLength(correctStringDateLength);\n    expect(isDateString(time.data)).toBeTruthy();\n  });\n\n  it('should return time from ws', async () => {\n    const last3ChangeTimeEvents = await lastValueFrom(\n      restClientHelper\n        .webSocket<string>({\n          path: '/ws/time',\n          eventName: 'ChangeTimeStream',\n        })\n        .pipe(take(3), toArray())\n    );\n\n    expect(last3ChangeTimeEvents).toHaveLength(3);\n    expect(last3ChangeTimeEvents[0].data).toHaveLength(correctStringDateLength);\n    expect(last3ChangeTimeEvents[1].data).toHaveLength(correctStringDateLength);\n    expect(last3ChangeTimeEvents[2].data).toHaveLength(correctStringDateLength);\n    expect(isDateString(last3ChangeTimeEvents[0].data)).toBeTruthy();\n    expect(isDateString(last3ChangeTimeEvents[1].data)).toBeTruthy();\n    expect(isDateString(last3ChangeTimeEvents[2].data)).toBeTruthy();\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"8-we-launch-the-infrastructure-with-applications-in-development-mode-and-check-the-operation-through-e2e-tests",children:"8. We launch the infrastructure with applications in development mode and check the operation through E2E tests"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Commands"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run pm2-full:dev:start\nnpm run pm2-full:dev:test:e2e\n"})}),"\n",(0,r.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"In the current post and project, when sending time via a web socket, there is no user authorization check and the web socket stream is available to any user, in a real application there are usually many web socket streams that check the authorization token."}),"\n",(0,r.jsxs)(n.p,{children:["Perhaps in the next posts there will be an example with authorizations, but the preparatory code is also in the current version (search for: ",(0,r.jsx)(n.code,{children:"handleConnection"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"plans",children:"Plans"}),"\n",(0,r.jsx)(n.p,{children:"In the next post I will add handling of server validation errors on the frontend..."}),"\n",(0,r.jsx)(n.h3,{id:"links",children:"Links"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})," - website from the post"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/82e050c24a0d1a2111f499460896c6d00e0f5af4..a5efa43f571a7b48402275e1ee6a9b1e325d0eb0",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/82e050c24a0d1a2111f499460896c6d00e0f5af4..a5efa43f571a7b48402275e1ee6a9b1e325d0eb0"})," - current changes"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"#angular #websockets #nestjsmod #fullstack\n#2024-11-21"})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);