"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[3951],{4657:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var o=t(4848),r=t(8453);const s={},i="Integrating an external file server https://min.io into a full-stack application on NestJS and Angular",a={id:"en-posts/fullstack/2024-11-15",title:"Integrating an external file server https://min.io into a full-stack application on NestJS and Angular",description:"In this article, I will connect an external file server https://min.io to the project and write additional backend and frontend modules for integration with it.",source:"@site/docs/en-posts/fullstack/2024-11-15.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-11-15",permalink:"/docs/en-posts/fullstack/2024-11-15",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-11-15.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Integration of external authorization server https://authorizer.dev into a full-stack application on NestJS and Angular",permalink:"/docs/en-posts/fullstack/2024-11-08"},next:{title:"Caching information in Redis on NestJS",permalink:"/docs/en-posts/fullstack/2024-11-20"}},l={},d=[{value:"1. Create an Angular library for working with files",id:"1-create-an-angular-library-for-working-with-files",level:3},{value:"2. Create a NestJS library for working with files",id:"2-create-a-nestjs-library-for-working-with-files",level:3},{value:"3. Install additional libraries",id:"3-install-additional-libraries",level:3},{value:"4. Connecting new modules to the backend",id:"4-connecting-new-modules-to-the-backend",level:3},{value:"5. We are starting the generation of additional code for the infrastructure",id:"5-we-are-starting-the-generation-of-additional-code-for-the-infrastructure",level:3},{value:"6. Add all the necessary code to the FilesModule module (NestJS library)",id:"6-add-all-the-necessary-code-to-the-filesmodule-module-nestjs-library",level:3},{value:"7. Add FilesModule to main.ts",id:"7-add-filesmodule-to-maints",level:3},{value:"8. Add all the necessary code to the Angular library for working with files",id:"8-add-all-the-necessary-code-to-the-angular-library-for-working-with-files",level:3},{value:"9. Add a form and method in the service for profile modification in the Angular module for authorization",id:"9-add-a-form-and-method-in-the-service-for-profile-modification-in-the-angular-module-for-authorization",level:3},{value:"10. We describe and connect the integration of the authorization module and the file module",id:"10-we-describe-and-connect-the-integration-of-the-authorization-module-and-the-file-module",level:3},{value:"11. Update files and add new ones to run docker-compose and kubernetes",id:"11-update-files-and-add-new-ones-to-run-docker-compose-and-kubernetes",level:3},{value:"12. Create an E2E test to check profile update and file upload to the server",id:"12-create-an-e2e-test-to-check-profile-update-and-file-upload-to-the-server",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"integrating-an-external-file-server-httpsminio-into-a-full-stack-application-on-nestjs-and-angular",children:["Integrating an external file server ",(0,o.jsx)(n.a,{href:"https://min.io",children:"https://min.io"})," into a full-stack application on NestJS and Angular"]}),"\n",(0,o.jsxs)(n.p,{children:["In this article, I will connect an external file server ",(0,o.jsx)(n.a,{href:"https://min.io",children:"https://min.io"})," to the project and write additional backend and frontend modules for integration with it."]}),"\n",(0,o.jsx)(n.h3,{id:"1-create-an-angular-library-for-working-with-files",children:"1. Create an Angular library for working with files"}),"\n",(0,o.jsxs)(n.p,{children:["Create an empty ",(0,o.jsx)(n.code,{children:"Angular"})," library to store components and services for sending files to the server."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Commands"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Create Angular library\n./node_modules/.bin/nx g @nx/angular:library --name=files-angular --buildable --publishable --directory=libs/core/files-angular --simpleName=true --strict=true --prefix= --standalone=true --selector= --changeDetection=OnPush --importPath=@nestjs-mod-fullstack/files-angular\n\n# Change file with test options\nrm -rf libs/core/files-angular/src/test-setup.ts\ncp apps/client/src/test-setup.ts libs/core/files-angular/src/test-setup.ts\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Console output"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'$ ./node_modules/.bin/nx g @nx/angular:library --name=files-angular --buildable --publishable --directory=libs/core/files-angular --simpleName=true --strict=true --prefix= --standalone=true --selector= --changeDetection=OnPush --importPath=@nestjs-mod-fullstack/files-angular\n\n NX  Generating @nx/angular:library\n\nCREATE libs/core/files-angular/project.json\nCREATE libs/core/files-angular/README.md\nCREATE libs/core/files-angular/ng-package.json\nCREATE libs/core/files-angular/package.json\nCREATE libs/core/files-angular/tsconfig.json\nCREATE libs/core/files-angular/tsconfig.lib.json\nCREATE libs/core/files-angular/tsconfig.lib.prod.json\nCREATE libs/core/files-angular/src/index.ts\nCREATE libs/core/files-angular/jest.config.ts\nCREATE libs/core/files-angular/src/test-setup.ts\nCREATE libs/core/files-angular/tsconfig.spec.json\nCREATE libs/core/files-angular/src/lib/files-angular/files-angular.component.css\nCREATE libs/core/files-angular/src/lib/files-angular/files-angular.component.html\nCREATE libs/core/files-angular/src/lib/files-angular/files-angular.component.spec.ts\nCREATE libs/core/files-angular/src/lib/files-angular/files-angular.component.ts\nCREATE libs/core/files-angular/.eslintrc.json\nUPDATE tsconfig.base.json\n\n NX   \ud83d\udc40 View Details of files-angular\n\nRun "nx show project files-angular" to view details about this project.\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-create-a-nestjs-library-for-working-with-files",children:"2. Create a NestJS library for working with files"}),"\n",(0,o.jsxs)(n.p,{children:["Create an empty ",(0,o.jsx)(n.code,{children:"NestJS"})," library."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Commands"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"./node_modules/.bin/nx g @nestjs-mod/schematics:library files --buildable --publishable --directory=libs/core/files --simpleName=true --projectNameAndRootFormat=as-provided --strict=true\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Console output"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ ./node_modules/.bin/nx g @nestjs-mod/schematics:library files --buildable --publishable --directory=libs/core/files --simpleName=true --projectNameAndRootFormat=as-provided --strict=true\n\n NX  Generating @nestjs-mod/schematics:library\n\nCREATE libs/core/files/tsconfig.json\nCREATE libs/core/files/src/index.ts\nCREATE libs/core/files/tsconfig.lib.json\nCREATE libs/core/files/README.md\nCREATE libs/core/files/package.json\nCREATE libs/core/files/project.json\nCREATE libs/core/files/.eslintrc.json\nCREATE libs/core/files/jest.config.ts\nCREATE libs/core/files/tsconfig.spec.json\nUPDATE tsconfig.base.json\nCREATE libs/core/files/src/lib/files.configuration.ts\nCREATE libs/core/files/src/lib/files.constants.ts\nCREATE libs/core/files/src/lib/files.environments.ts\nCREATE libs/core/files/src/lib/files.module.ts\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-install-additional-libraries",children:"3. Install additional libraries"}),"\n",(0,o.jsxs)(n.p,{children:["Install ",(0,o.jsx)(n.code,{children:"JS"}),"-client and ",(0,o.jsx)(n.code,{children:"NestJS"}),"-module for working with ",(0,o.jsx)(n.code,{children:"minio"})," file server from backend."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Commands"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save minio nestjs-minio @nestjs-mod/minio\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Console output"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ npm install --save minio nestjs-minio @nestjs-mod/minio\n\nadded 29 packages, removed 2 packages, and audited 2916 packages in 22s\n\n362 packages are looking for funding\n  run `npm fund` for details\n\n41 vulnerabilities (19 low, 7 moderate, 15 high)\n\nTo address issues that do not require attention, run:\n  npm audit fix\n\nTo address all issues possible (including breaking changes), run:\n  npm audit fix --force\n\nSome issues need review, and may require choosing\na different dependency.\n\nRun `npm audit` for details.\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-connecting-new-modules-to-the-backend",children:"4. Connecting new modules to the backend"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"apps/server/src/main.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"\nimport {\n  DOCKER_COMPOSE_FILE,\n  DockerCompose,\n  DockerComposeAuthorizer,\n  DockerComposeMinio,\n  DockerComposePostgreSQL,\n} from '@nestjs-mod/docker-compose';\n// ...\nimport { MinioModule } from '@nestjs-mod/minio';\n// ...\n\nimport { ExecutionContext } from '@nestjs/common';\n// ...\nbootstrapNestApplication({\n  modules: {\n   // ...\n\n    core: [\n      MinioModule.forRoot(),\n    ],\n    infrastructure: [\n      DockerComposeMinio.forRoot({\n        staticConfiguration: { image: 'bitnami/minio:2024.11.7' },\n      }),\n    ]}\n    );\n"})}),"\n",(0,o.jsx)(n.h3,{id:"5-we-are-starting-the-generation-of-additional-code-for-the-infrastructure",children:"5. We are starting the generation of additional code for the infrastructure"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Commands"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm run docs:infrastructure\n"})}),"\n",(0,o.jsx)(n.h3,{id:"6-add-all-the-necessary-code-to-the-filesmodule-module-nestjs-library",children:"6. Add all the necessary code to the FilesModule module (NestJS library)"}),"\n",(0,o.jsxs)(n.p,{children:["Since the main logic for connecting to the file server and working with it is done using the ",(0,o.jsx)(n.code,{children:"@nestjs-mod/minio"})," library, our new library will only have a controller that will provide the frontend application with the necessary methods and at the same time check the user's rights."]}),"\n",(0,o.jsx)(n.p,{children:"Uploading a file from the frontend occurs using a temporary link directly to the file server; our backend creates the temporary link."}),"\n",(0,o.jsx)(n.p,{children:"Only users who uploaded the file and site administrators can delete uploaded files."}),"\n",(0,o.jsxs)(n.p,{children:["The user ID must be in the ",(0,o.jsx)(n.code,{children:"Request"}),", in the ",(0,o.jsx)(n.code,{children:"externalUserId"})," field."]}),"\n",(0,o.jsxs)(n.p,{children:["Create a file ",(0,o.jsx)(n.em,{children:"libs/core/files/src/lib/controllers/files.controller.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Controller, Get, Post, Query } from '@nestjs/common';\n\nimport { MinioConfiguration, MinioFilesService, PresignedUrlsRequest, PresignedUrls as PresignedUrlsResponse } from '@nestjs-mod/minio';\nimport { ApiExtraModels, ApiOkResponse, ApiProperty } from '@nestjs/swagger';\nimport { FilesError, FilesErrorEnum } from '../files.errors';\n\nimport { CurrentFilesRequest } from '../files.decorators';\nimport { FilesRequest } from '../types/files-request';\nimport { StatusResponse } from '@nestjs-mod-fullstack/common';\nimport { map } from 'rxjs';\nimport { FilesRole } from '../types/files-role';\n\nexport class GetPresignedUrlArgs implements PresignedUrlsRequest {\n  @ApiProperty({ type: String })\n  ext!: string;\n}\n\nexport class PresignedUrls implements PresignedUrlsResponse {\n  @ApiProperty({ type: String })\n  downloadUrl!: string;\n\n  @ApiProperty({ type: String })\n  uploadUrl!: string;\n}\n\nexport class DeleteFileArgs {\n  @ApiProperty({ type: String })\n  downloadUrl!: string;\n}\n\n@ApiExtraModels(FilesError)\n@Controller()\nexport class FilesController {\n  constructor(private readonly minioConfiguration: MinioConfiguration, private readonly minioFilesService: MinioFilesService) {}\n\n  @Get('/files/get-presigned-url')\n  @ApiOkResponse({ type: PresignedUrls })\n  getPresignedUrl(@Query() getPresignedUrlArgs: GetPresignedUrlArgs, @CurrentFilesRequest() filesRequest: FilesRequest) {\n    const bucketName = Object.entries(this.minioConfiguration.buckets || {})\n      .filter(([, options]) => options.ext.includes(getPresignedUrlArgs.ext))\n      .map(([name]) => name)?.[0];\n    if (!bucketName) {\n      throw new FilesError(`Uploading files with extension \"{{ext}}\" is not supported`, FilesErrorEnum.FORBIDDEN, { ext: getPresignedUrlArgs.ext });\n    }\n    return this.minioFilesService.getPresignedUrls({\n      bucketName,\n      expiry: 60,\n      ext: getPresignedUrlArgs.ext,\n      userId: filesRequest.externalUserId,\n    });\n  }\n\n  @Post('/files/delete-file')\n  @ApiOkResponse({ type: StatusResponse })\n  deleteFile(@Query() deleteFileArgs: DeleteFileArgs, @CurrentFilesRequest() filesRequest: FilesRequest) {\n    if (filesRequest.filesUser?.userRole === FilesRole.Admin || deleteFileArgs.downloadUrl.includes(`/${filesRequest.externalUserId}/`)) {\n      return this.minioFilesService.deleteFile(deleteFileArgs.downloadUrl).pipe(map(() => ({ message: 'ok' })));\n    }\n    throw new FilesError(`Only those who uploaded files can delete them`, FilesErrorEnum.FORBIDDEN);\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Add the controller to ",(0,o.jsx)(n.code,{children:"FilesModule"}),", and include ",(0,o.jsx)(n.code,{children:"MinioModule.forFeature"})," to access the external module services."]}),"\n",(0,o.jsxs)(n.p,{children:["Updating the file ",(0,o.jsx)(n.em,{children:"libs/core/files/src/lib/files.module.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { createNestModule, NestModuleCategory } from '@nestjs-mod/common';\nimport { MinioModule } from '@nestjs-mod/minio';\nimport { FilesController } from './controllers/files.controller';\nimport { FILES_FEATURE, FILES_MODULE } from './files.constants';\n\nexport const { FilesModule } = createNestModule({\n  moduleName: FILES_MODULE,\n  moduleCategory: NestModuleCategory.feature,\n  controllers: [FilesController],\n  imports: [\n    MinioModule.forFeature({\n      featureModuleName: FILES_FEATURE,\n    }),\n  ],\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"7-add-filesmodule-to-maints",children:"7. Add FilesModule to main.ts"}),"\n",(0,o.jsxs)(n.p,{children:["Add FilesModule to application imports, and also modify external validator of authorization server module, in which we extend ",(0,o.jsx)(n.code,{children:"Request"}),"-user with additional object ",(0,o.jsx)(n.code,{children:"filesUser"})," in which user role will be stored."]}),"\n",(0,o.jsxs)(n.p,{children:["Updating the file ",(0,o.jsx)(n.em,{children:"apps/server/src/main.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"//...\nimport { FilesModule } from '@nestjs-mod-fullstack/files';\n\nbootstrapNestApplication({\n  modules: {\n    //...\n    core: [\n      AuthorizerModule.forRootAsync({\n        //...\n        configurationFactory: (webhookUsersService: WebhookUsersService) => {\n          return {\n            //...\n            checkAccessValidator: async (authorizerUser?: AuthorizerUser, options?: CheckAccessOptions, ctx?: ExecutionContext) => {\n              //...\n\n              if (ctx && authorizerUser?.id) {\n                const req: WebhookRequest & FilesRequest = getRequestFromExecutionContext(ctx);\n\n                //...\n                req.externalTenantId = webhookUser.externalTenantId;\n\n                // files\n                req.filesUser = {\n                  userRole: authorizerUser.roles?.includes('admin') ? FilesRole.Admin : FilesRole.User,\n                };\n              }\n\n              return result;\n            },\n          };\n        },\n      }),\n      FilesModule.forRoot(),\n      //...\n    ],\n    //...\n  },\n  //...\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"8-add-all-the-necessary-code-to-the-angular-library-for-working-with-files",children:"8. Add all the necessary code to the Angular library for working with files"}),"\n",(0,o.jsx)(n.p,{children:"Files are sent to the address received from our backend."}),"\n",(0,o.jsx)(n.p,{children:"The file can be either uploaded or deleted, deletion occurs via a request to our backend."}),"\n",(0,o.jsxs)(n.p,{children:["We create all the necessary methods for working with our backend and the authorization server in the ",(0,o.jsx)(n.code,{children:"FilesService"})," service."]}),"\n",(0,o.jsxs)(n.p,{children:["Create a file ",(0,o.jsx)(n.em,{children:"libs/core/files-angular/src/lib/services/files.service.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { FilesRestService } from '@nestjs-mod-fullstack/app-angular-rest-sdk';\nimport { PresignedUrls } from '@nestjs-mod-fullstack/app-rest-sdk';\nimport { Observable, from, map, mergeMap, of } from 'rxjs';\n\nexport const MINIO_URL = new InjectionToken<string>('MinioURL');\n\n@Injectable({ providedIn: 'root' })\nexport class FilesService {\n  constructor(\n    @Inject(MINIO_URL)\n    private readonly minioURL: string,\n    private readonly filesRestService: FilesRestService\n  ) {}\n\n  getPresignedUrlAndUploadFile(file: null | undefined | string | File) {\n    if (!file) {\n      return of('');\n    }\n    if (typeof file !== 'string') {\n      return this.getPresignedUrl(file).pipe(\n        mergeMap((presignedUrls) =>\n          this.uploadFile({\n            file,\n            presignedUrls,\n          })\n        ),\n        map((presignedUrls) => presignedUrls.downloadUrl.replace(this.minioURL, ''))\n      );\n    }\n    return of(file.replace(this.minioURL, ''));\n  }\n\n  getPresignedUrl(file: File) {\n    return from(this.filesRestService.filesControllerGetPresignedUrl(this.getFileExt(file)));\n  }\n\n  uploadFile({ file, presignedUrls }: { file: File; presignedUrls: PresignedUrls }) {\n    return new Observable<PresignedUrls>((observer) => {\n      const outPresignedUrls: PresignedUrls = {\n        downloadUrl: this.minioURL + presignedUrls.downloadUrl,\n        uploadUrl: this.minioURL + presignedUrls.uploadUrl,\n      };\n      if (presignedUrls.uploadUrl) {\n        const xhr = new XMLHttpRequest();\n        xhr.open('PUT', outPresignedUrls.uploadUrl);\n        xhr.onreadystatechange = () => {\n          if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n              observer.next(outPresignedUrls);\n              observer.complete();\n            } else {\n              observer.error(new Error('Error in upload file'));\n            }\n          }\n        };\n        xhr.send(file);\n      } else {\n        observer.next(outPresignedUrls);\n        observer.complete();\n      }\n    });\n  }\n\n  deleteFile(downloadUrl: string) {\n    return from(this.filesRestService.filesControllerDeleteFile(downloadUrl));\n  }\n\n  private getFileExt(file: File) {\n    return file?.type?.split('/')?.[1].toLowerCase();\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Let's create a component for ",(0,o.jsx)(n.code,{children:"Formly"})," that will add support for loading and displaying image files."]}),"\n",(0,o.jsxs)(n.p,{children:["Create a file ",(0,o.jsx)(n.em,{children:"libs/core/files-angular/src/lib/formly/image-file.component.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { NzModalModule } from 'ng-zorro-antd/modal';\nimport { NzUploadFile, NzUploadModule } from 'ng-zorro-antd/upload';\nimport { BehaviorSubject } from 'rxjs';\nimport { MINIO_URL } from '../services/files.service';\nimport { AsyncPipe } from '@angular/common';\n\n@Component({\n  selector: 'image-file',\n  imports: [ReactiveFormsModule, FormlyModule, NzInputModule, NzButtonModule, NzUploadModule, NzModalModule, NzIconModule, AsyncPipe],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <nz-upload [nzAccept]=\"'image/png, image/jpeg'\" [nzListType]=\"'picture'\" [nzFileList]=\"(fileList$ | async)!\" (nzFileListChange)=\"onFileListChange($event)\" [nzLimit]=\"1\" [nzBeforeUpload]=\"beforeUpload%}\n      <button nz-button type=\"button%}\n        <span nz-icon [nzType]=\"(icon$ | async)!%}</span>\n        {{ title$ | async }}\n      </button>\n    </nz-upload>\n  `,\n})\nexport class ImageFileComponent extends FieldType<FieldTypeConfig> implements OnInit {\n  fileList$ = new BehaviorSubject<NzUploadFile[]>([]);\n  title$ = new BehaviorSubject<string>('');\n  icon$ = new BehaviorSubject<string>('');\n\n  constructor(\n    @Inject(MINIO_URL)\n    private readonly minioURL: string\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.formControl.value) {\n      this.switchToReloadMode();\n      this.fileList$.next([\n        {\n          uid: this.formControl.value,\n          name: this.formControl.value.split('/').at(-1),\n          status: 'done',\n          url: this.minioURL + this.formControl.value,\n        },\n      ]);\n    } else {\n      this.switchToUploadMode();\n    }\n  }\n\n  onFileListChange(files: NzUploadFile[]) {\n    if (files.length === 0) {\n      this.formControl.setValue(null);\n      this.fileList$.next([]);\n      this.switchToUploadMode();\n    }\n  }\n\n  beforeUpload = (file: NzUploadFile): boolean => {\n    this.formControl.setValue(file);\n    this.switchToReloadMode();\n    this.fileList$.next([file]);\n    return false;\n  };\n\n  private switchToReloadMode() {\n    this.icon$.next('reload');\n    this.title$.next('Change file');\n  }\n\n  private switchToUploadMode() {\n    this.icon$.next('upload');\n    this.title$.next('Select file...');\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Register the component in ",(0,o.jsx)(n.code,{children:"FormlyModule"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Updating the file ",(0,o.jsx)(n.em,{children:"apps/client/src/app/app.config.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// ..\nexport const appConfig = ({\n  authorizerURL,\n  minioURL,\n}: {\n  authorizerURL: string;\n  minioURL: string;\n}): ApplicationConfig => {\n  return {\n    providers: [\n      // ..\n      importProvidersFrom(\n        // ..\n        FormlyModule.forRoot({\n          types: [\n            {\n              name: 'image-file',\n              component: ImageFileComponent,\n              extends: 'input',\n            },\n          ],\n        }),\n        // ..\n      )\n      // ..\n    ]}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"9-add-a-form-and-method-in-the-service-for-profile-modification-in-the-angular-module-for-authorization",children:"9. Add a form and method in the service for profile modification in the Angular module for authorization"}),"\n",(0,o.jsx)(n.p,{children:"Create a form for displaying and editing a profile, within the framework of this article I only add the ability to change the password and upload an image for the authorization server user."}),"\n",(0,o.jsxs)(n.p,{children:["Create a file ",(0,o.jsx)(n.em,{children:"libs/core/auth-angular/src/lib/forms/auth-profile-form/auth-profile-form.component.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { AsyncPipe, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Inject, Input, OnInit, Optional } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule, UntypedFormGroup } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UpdateProfileInput } from '@authorizerdev/authorizer-js';\nimport { ImageFileComponent } from '@nestjs-mod-fullstack/files-angular';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { FormlyFieldConfig, FormlyModule } from '@ngx-formly/core';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzFormModule } from 'ng-zorro-antd/form';\nimport { NzInputModule } from 'ng-zorro-antd/input';\nimport { NzMessageService } from 'ng-zorro-antd/message';\nimport { NZ_MODAL_DATA } from 'ng-zorro-antd/modal';\nimport { BehaviorSubject, catchError, of, tap } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n\n@UntilDestroy()\n@Component({\n  standalone: true,\n  imports: [FormlyModule, NzFormModule, NzInputModule, NzButtonModule, FormsModule, ReactiveFormsModule, AsyncPipe, NgIf, RouterModule, ImageFileComponent],\n  selector: 'auth-profile-form',\n  template: `@if (formlyFields$ | async; as formlyFields) {\n    <form nz-form [formGroup]=\"form\" (ngSubmit)=\"submitForm()%}\n      <formly-form [model]=\"formlyModel$ | async\" [fields]=\"formlyFields\" [form]=\"form%} </formly-form>\n      @if (!hideButtons) {\n      <nz-form-control>\n        <div class=\"flex justify-between%}\n          <div></div>\n          <button nz-button nzType=\"primary\" type=\"submit\" [disabled]=\"!form.valid%}Update</button>\n        </div>\n      </nz-form-control>\n      }\n    </form>\n    } `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AuthProfileFormComponent implements OnInit {\n  @Input()\n  hideButtons?: boolean;\n\n  form = new UntypedFormGroup({});\n  formlyModel$ = new BehaviorSubject<object | null>(null);\n  formlyFields$ = new BehaviorSubject<FormlyFieldConfig[] | null>(null);\n\n  constructor(\n    @Optional()\n    @Inject(NZ_MODAL_DATA)\n    private readonly nzModalData: AuthProfileFormComponent,\n    private readonly authService: AuthService,\n    private readonly nzMessageService: NzMessageService\n  ) {}\n\n  ngOnInit(): void {\n    Object.assign(this, this.nzModalData);\n    this.fillFromProfile();\n  }\n\n  setFieldsAndModel(data: UpdateProfileInput = {}) {\n    this.formlyFields$.next([\n      {\n        key: 'picture',\n        type: 'image-file',\n        validation: {\n          show: true,\n        },\n        props: {\n          label: `auth.profile-form.picture`,\n          placeholder: 'picture',\n        },\n      },\n      {\n        key: 'old_password',\n        type: 'input',\n        validation: {\n          show: true,\n        },\n        props: {\n          label: `auth.profile-form.old_password`,\n          placeholder: 'old_password',\n          type: 'password',\n        },\n      },\n      {\n        key: 'new_password',\n        type: 'input',\n        validation: {\n          show: true,\n        },\n        props: {\n          label: `auth.profile-form.new_password`,\n          placeholder: 'new_password',\n          type: 'password',\n        },\n      },\n      {\n        key: 'confirm_new_password',\n        type: 'input',\n        validation: {\n          show: true,\n        },\n        props: {\n          label: `auth.profile-form.confirm_new_password`,\n          placeholder: 'confirm_new_password',\n          type: 'password',\n        },\n      },\n    ]);\n    this.formlyModel$.next(this.toModel(data));\n  }\n\n  submitForm(): void {\n    if (this.form.valid) {\n      const value = this.toJson(this.form.value);\n      this.authService\n        .updateProfile(value)\n        .pipe(\n          tap(() => {\n            this.fillFromProfile();\n            this.nzMessageService.success('Updated');\n          }),\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          catchError((err: any) => {\n            console.error(err);\n            this.nzMessageService.error(err.message);\n            return of(null);\n          }),\n          untilDestroyed(this)\n        )\n        .subscribe();\n    } else {\n      console.log(this.form.controls);\n      this.nzMessageService.warning('Validation errors');\n    }\n  }\n\n  private fillFromProfile() {\n    this.setFieldsAndModel({\n      picture: this.authService.profile$.value?.picture || '',\n    });\n  }\n\n  private toModel(data: UpdateProfileInput): object | null {\n    return {\n      old_password: data['old_password'],\n      new_password: data['new_password'],\n      confirm_new_password: data['confirm_new_password'],\n      picture: data['picture'],\n    };\n  }\n\n  private toJson(data: UpdateProfileInput) {\n    return {\n      old_password: data['old_password'],\n      new_password: data['new_password'],\n      confirm_new_password: data['confirm_new_password'],\n      picture: data['picture'],\n    };\n  }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Although we see the file field in the profile form, the authorization module and the file module are not physically connected, but when saving profile data, we need to first upload the file to an external file server and write the link to this file in the profile image field."}),"\n",(0,o.jsxs)(n.p,{children:["We will add the connection between the file module and the profile editing form using additional handlers from the top level of the application using ",(0,o.jsx)(n.code,{children:"DI"})," from ",(0,o.jsx)(n.code,{children:"Angular"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Create a file ",(0,o.jsx)(n.em,{children:"libs/core/auth-angular/src/lib/services/auth.configuration.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { InjectionToken } from '@angular/core';\nimport { UpdateProfileInput, User } from '@authorizerdev/authorizer-js';\nimport { Observable } from 'rxjs';\n\nexport type AfterUpdateProfileEvent = {\n  old?: User;\n  new?: User;\n};\n\nexport class AuthConfiguration {\n  constructor(options?: AuthConfiguration) {\n    Object.assign(this, options);\n  }\n\n  beforeUpdateProfile?(data: UpdateProfileInput): Observable<UpdateProfileInput>;\n\n  afterUpdateProfile?(data: AfterUpdateProfileEvent): Observable<User | undefined>;\n}\n\nexport const AUTH_CONFIGURATION_TOKEN = new InjectionToken<string>('AUTH_CONFIGURATION_TOKEN');\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Add a new method to update the profile in ",(0,o.jsx)(n.code,{children:"AuthService"}),", which will check for additional handlers in the config."]}),"\n",(0,o.jsxs)(n.p,{children:["Create a file ",(0,o.jsx)(n.em,{children:"libs/core/auth-angular/src/lib/services/auth.configuration.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Inject, Injectable, Optional } from '@angular/core';\nimport { AuthToken, LoginInput, SignupInput, UpdateProfileInput, User } from '@authorizerdev/authorizer-js';\nimport { mapGraphqlErrors } from '@nestjs-mod-fullstack/common-angular';\nimport { BehaviorSubject, catchError, from, map, mergeMap, of, tap } from 'rxjs';\nimport { AUTH_CONFIGURATION_TOKEN, AuthConfiguration } from './auth.configuration';\nimport { AuthorizerService } from './authorizer.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  profile$ = new BehaviorSubject<User | undefined>(undefined);\n  tokens$ = new BehaviorSubject<AuthToken | undefined>(undefined);\n\n  constructor(\n    private readonly authorizerService: AuthorizerService,\n    @Optional()\n    @Inject(AUTH_CONFIGURATION_TOKEN)\n    private readonly authConfiguration?: AuthConfiguration\n  ) {}\n\n  // ..\n\n  updateProfile(data: UpdateProfileInput) {\n    const oldProfile = this.profile$.value;\n    return (this.authConfiguration?.beforeUpdateProfile ? this.authConfiguration.beforeUpdateProfile(data) : of(data)).pipe(\n      mergeMap((data) =>\n        from(\n          this.authorizerService.updateProfile({\n            ...data,\n          })\n        )\n      ),\n      mapGraphqlErrors(),\n      mergeMap(() => this.authorizerService.getProfile()),\n      mapGraphqlErrors(),\n      tap((result) => this.setProfile(result)),\n      mergeMap((updatedProfile) =>\n        this.authConfiguration?.afterUpdateProfile\n          ? this.authConfiguration.afterUpdateProfile({\n              new: updatedProfile,\n              old: oldProfile,\n            })\n          : of({\n              new: updatedProfile,\n            })\n      )\n    );\n  }\n  // ..\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"10-we-describe-and-connect-the-integration-of-the-authorization-module-and-the-file-module",children:"10. We describe and connect the integration of the authorization module and the file module"}),"\n",(0,o.jsxs)(n.p,{children:["Create a file ",(0,o.jsx)(n.em,{children:"apps/client/src/app/integrations/auth.configuration.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Provider } from '@angular/core';\nimport { UpdateProfileInput } from '@authorizerdev/authorizer-js';\nimport { AfterUpdateProfileEvent, AUTH_CONFIGURATION_TOKEN, AuthConfiguration } from '@nestjs-mod-fullstack/auth-angular';\nimport { FilesService } from '@nestjs-mod-fullstack/files-angular';\nimport { map, Observable, of } from 'rxjs';\n\nexport class AppAuthConfiguration implements AuthConfiguration {\n  constructor(private readonly filesService: FilesService) {}\n\n  beforeUpdateProfile(data: UpdateProfileInput): Observable<UpdateProfileInput> {\n    if (data.picture) {\n      return this.filesService.getPresignedUrlAndUploadFile(data.picture).pipe(\n        map((picture) => {\n          return {\n            ...data,\n            picture,\n          };\n        })\n      );\n    }\n    return of({ ...data, picture: '' });\n  }\n\n  afterUpdateProfile(event: AfterUpdateProfileEvent) {\n    if (event.old?.picture && event.new?.picture !== event.old.picture) {\n      return this.filesService.deleteFile(event.old.picture).pipe(map(() => event.new));\n    }\n    return of(event.new);\n  }\n}\n\nexport function provideAppAuthConfiguration(): Provider {\n  return {\n    provide: AUTH_CONFIGURATION_TOKEN,\n    useClass: AppAuthConfiguration,\n    deps: [FilesService],\n  };\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We connect the integration to the config of the ",(0,o.jsx)(n.code,{children:"Angular"})," application."]}),"\n",(0,o.jsxs)(n.p,{children:["Updating the file ",(0,o.jsx)(n.em,{children:"apps/client/src/app/app.config.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"\nexport const appConfig = ({\n  authorizerURL,\n  minioURL,\n}: {\n  authorizerURL: string;\n  minioURL: string;\n}): ApplicationConfig => {\n  return {\n    providers: [\n      // ..\n      provideAppAuthConfiguration(),\n      // ..\n    ]\n  }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"11-update-files-and-add-new-ones-to-run-docker-compose-and-kubernetes",children:"11. Update files and add new ones to run docker-compose and kubernetes"}),"\n",(0,o.jsxs)(n.p,{children:["I will not fully describe the changes in all files, you can see them in the commit with changes for the current post, below I will simply add the updated ",(0,o.jsx)(n.code,{children:"docker-compose-full.yml"})," and its file with environment variables."]}),"\n",(0,o.jsxs)(n.p,{children:["Updating the file ",(0,o.jsx)(n.em,{children:".docker/docker-compose-full.yml"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"version: '3'\nnetworks:\n  nestjs-mod-fullstack-network:\n    driver: 'bridge'\nservices:\n  nestjs-mod-fullstack-postgre-sql:\n    image: 'bitnami/postgresql:15.5.0'\n    container_name: 'nestjs-mod-fullstack-postgre-sql'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    healthcheck:\n      test:\n        - 'CMD-SHELL'\n        - 'pg_isready -U postgres'\n      interval: '5s'\n      timeout: '5s'\n      retries: 5\n    tty: true\n    restart: 'always'\n    environment:\n      POSTGRESQL_USERNAME: '${SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME}'\n      POSTGRESQL_PASSWORD: '${SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD}'\n      POSTGRESQL_DATABASE: '${SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE}'\n    volumes:\n      - 'nestjs-mod-fullstack-postgre-sql-volume:/bitnami/postgresql'\n  nestjs-mod-fullstack-authorizer:\n    image: 'lakhansamani/authorizer:1.4.4'\n    container_name: 'nestjs-mod-fullstack-authorizer'\n    ports:\n      - '8000:8080'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    environment:\n      DATABASE_URL: '${SERVER_AUTHORIZER_DATABASE_URL}'\n      DATABASE_TYPE: '${SERVER_AUTHORIZER_DATABASE_TYPE}'\n      DATABASE_NAME: '${SERVER_AUTHORIZER_DATABASE_NAME}'\n      ADMIN_SECRET: '${SERVER_AUTHORIZER_ADMIN_SECRET}'\n      PORT: '${SERVER_AUTHORIZER_PORT}'\n      AUTHORIZER_URL: '${SERVER_AUTHORIZER_URL}'\n      COOKIE_NAME: '${SERVER_AUTHORIZER_COOKIE_NAME}'\n      SMTP_HOST: '${SERVER_AUTHORIZER_SMTP_HOST}'\n      SMTP_PORT: '${SERVER_AUTHORIZER_SMTP_PORT}'\n      SMTP_USERNAME: '${SERVER_AUTHORIZER_SMTP_USERNAME}'\n      SMTP_PASSWORD: '${SERVER_AUTHORIZER_SMTP_PASSWORD}'\n      SENDER_EMAIL: '${SERVER_AUTHORIZER_SENDER_EMAIL}'\n      SENDER_NAME: '${SERVER_AUTHORIZER_SENDER_NAME}'\n      DISABLE_PLAYGROUND: '${SERVER_AUTHORIZER_DISABLE_PLAYGROUND}'\n      ACCESS_TOKEN_EXPIRY_TIME: '${SERVER_AUTHORIZER_ACCESS_TOKEN_EXPIRY_TIME}'\n      DISABLE_STRONG_PASSWORD: '${SERVER_AUTHORIZER_DISABLE_STRONG_PASSWORD}'\n      DISABLE_EMAIL_VERIFICATION: '${SERVER_AUTHORIZER_DISABLE_EMAIL_VERIFICATION}'\n      ORGANIZATION_NAME: '${SERVER_AUTHORIZER_ORGANIZATION_NAME}'\n      IS_SMS_SERVICE_ENABLED: '${SERVER_AUTHORIZER_IS_SMS_SERVICE_ENABLED}'\n      IS_EMAIL_SERVICE_ENABLED: '${SERVER_AUTHORIZER_IS_SMS_SERVICE_ENABLED}'\n      ENV: '${SERVER_AUTHORIZER_ENV}'\n      RESET_PASSWORD_URL: '${SERVER_AUTHORIZER_RESET_PASSWORD_URL}'\n      ROLES: '${SERVER_AUTHORIZER_ROLES}'\n      DEFAULT_ROLES: '${SERVER_AUTHORIZER_DEFAULT_ROLES}'\n      JWT_ROLE_CLAIM: '${SERVER_AUTHORIZER_JWT_ROLE_CLAIM}'\n      ORGANIZATION_LOGO: '${SERVER_AUTHORIZER_ORGANIZATION_LOGO}'\n    tty: true\n    restart: 'always'\n    depends_on:\n      nestjs-mod-fullstack-postgre-sql:\n        condition: service_healthy\n      nestjs-mod-fullstack-postgre-sql-migrations:\n        condition: service_completed_successfully\n  nestjs-mod-fullstack-minio:\n    image: 'bitnami/minio:2024.11.7'\n    container_name: 'nestjs-mod-fullstack-minio'\n    volumes:\n      - 'nestjs-mod-fullstack-minio-volume:/bitnami/minio/data'\n    ports:\n      - '9000:9000'\n      - '9001:9001'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    environment:\n      MINIO_ROOT_USER: '${SERVER_MINIO_MINIO_ROOT_USER}'\n      MINIO_ROOT_PASSWORD: '${SERVER_MINIO_MINIO_ROOT_PASSWORD}'\n    healthcheck:\n      test:\n        - 'CMD-SHELL'\n        - 'mc'\n        - 'ready'\n        - 'local'\n      interval: '5s'\n      timeout: '5s'\n      retries: 5\n    tty: true\n    restart: 'always'\n  nestjs-mod-fullstack-postgre-sql-migrations:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-migrations:${ROOT_VERSION}'\n    container_name: 'nestjs-mod-fullstack-postgre-sql-migrations'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    tty: true\n    environment:\n      NX_SKIP_NX_CACHE: 'true'\n      SERVER_ROOT_DATABASE_URL: '${SERVER_ROOT_DATABASE_URL}'\n      SERVER_APP_DATABASE_URL: '${SERVER_APP_DATABASE_URL}'\n      SERVER_WEBHOOK_DATABASE_URL: '${SERVER_WEBHOOK_DATABASE_URL}'\n      SERVER_AUTHORIZER_DATABASE_URL: '${SERVER_AUTHORIZER_DATABASE_URL}'\n    depends_on:\n      nestjs-mod-fullstack-postgre-sql:\n        condition: 'service_healthy'\n    working_dir: '/usr/src/app'\n    volumes:\n      - './../apps:/usr/src/app/apps'\n      - './../libs:/usr/src/app/libs'\n  nestjs-mod-fullstack-server:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-server:${SERVER_VERSION}'\n    container_name: 'nestjs-mod-fullstack-server'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    extra_hosts:\n      - 'host.docker.internal:host-gateway'\n    healthcheck:\n      test: ['CMD-SHELL', 'npx -y wait-on --timeout= --interval=1000 --window --verbose --log http://localhost:${SERVER_PORT}/api/health']\n      interval: 30s\n      timeout: 10s\n      retries: 10\n    tty: true\n    environment:\n      NODE_TLS_REJECT_UNAUTHORIZED: '0'\n      SERVER_PORT: '${SERVER_PORT}'\n      SERVER_APP_DATABASE_URL: '${SERVER_APP_DATABASE_URL}'\n      SERVER_WEBHOOK_DATABASE_URL: '${SERVER_WEBHOOK_DATABASE_URL}'\n      SERVER_WEBHOOK_SUPER_ADMIN_EXTERNAL_USER_ID: '${SERVER_WEBHOOK_SUPER_ADMIN_EXTERNAL_USER_ID}'\n      SERVER_AUTH_ADMIN_EMAIL: '${SERVER_AUTH_ADMIN_EMAIL}'\n      SERVER_AUTH_ADMIN_USERNAME: '${SERVER_AUTH_ADMIN_USERNAME}'\n      SERVER_AUTH_ADMIN_PASSWORD: '${SERVER_AUTH_ADMIN_PASSWORD}'\n      SERVER_AUTHORIZER_URL: '${SERVER_AUTHORIZER_URL}'\n      SERVER_AUTHORIZER_REDIRECT_URL: '${SERVER_AUTHORIZER_REDIRECT_URL}'\n      SERVER_AUTHORIZER_AUTHORIZER_URL: '${SERVER_AUTHORIZER_AUTHORIZER_URL}'\n      SERVER_AUTHORIZER_ADMIN_SECRET: '${SERVER_AUTHORIZER_ADMIN_SECRET}'\n      SERVER_MINIO_SERVER_HOST: '${SERVER_MINIO_SERVER_HOST}'\n      SERVER_MINIO_ACCESS_KEY: '${SERVER_MINIO_ACCESS_KEY}'\n      SERVER_MINIO_SECRET_KEY: '${SERVER_MINIO_SECRET_KEY}'\n    restart: 'always'\n    depends_on:\n      nestjs-mod-fullstack-postgre-sql:\n        condition: service_healthy\n      nestjs-mod-fullstack-postgre-sql-migrations:\n        condition: service_completed_successfully\n  nestjs-mod-fullstack-nginx:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-nginx:${CLIENT_VERSION}'\n    container_name: 'nestjs-mod-fullstack-nginx'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    healthcheck:\n      test: ['CMD-SHELL', 'curl -so /dev/null http://localhost:${NGINX_PORT} || exit 1']\n      interval: 30s\n      timeout: 10s\n      retries: 10\n    environment:\n      SERVER_PORT: '${SERVER_PORT}'\n      NGINX_PORT: '${NGINX_PORT}'\n      CLIENT_AUTHORIZER_URL: '${CLIENT_AUTHORIZER_URL}'\n      CLIENT_MINIO_URL: '${CLIENT_MINIO_URL}'\n      CLIENT_WEBHOOK_SUPER_ADMIN_EXTERNAL_USER_ID: '${CLIENT_WEBHOOK_SUPER_ADMIN_EXTERNAL_USER_ID}'\n    restart: 'always'\n    depends_on:\n      nestjs-mod-fullstack-server:\n        condition: service_healthy\n    ports:\n      - '${NGINX_PORT}:${NGINX_PORT}'\n  nestjs-mod-fullstack-e2e-tests:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-e2e-tests:${ROOT_VERSION}'\n    container_name: 'nestjs-mod-fullstack-e2e-tests'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    environment:\n      IS_DOCKER_COMPOSE: 'true'\n      BASE_URL: 'http://nestjs-mod-fullstack-nginx:${NGINX_PORT}'\n      SERVER_AUTHORIZER_URL: 'http://nestjs-mod-fullstack-authorizer:8080'\n      SERVER_URL: 'http://nestjs-mod-fullstack-server:8080'\n      SERVER_AUTH_ADMIN_EMAIL: '${SERVER_AUTH_ADMIN_EMAIL}'\n      SERVER_AUTH_ADMIN_USERNAME: '${SERVER_AUTH_ADMIN_USERNAME}'\n      SERVER_AUTH_ADMIN_PASSWORD: '${SERVER_AUTH_ADMIN_PASSWORD}'\n      SERVER_AUTHORIZER_ADMIN_SECRET: '${SERVER_AUTHORIZER_ADMIN_SECRET}'\n    depends_on:\n      nestjs-mod-fullstack-nginx:\n        condition: service_healthy\n    working_dir: '/usr/src/app'\n    volumes:\n      - './../apps:/usr/src/app/apps'\n      - './../libs:/usr/src/app/libs'\n  nestjs-mod-fullstack-https-portal:\n    image: steveltn/https-portal:1\n    container_name: 'nestjs-mod-fullstack-https-portal'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    ports:\n      - '80:80'\n      - '443:443'\n    links:\n      - nestjs-mod-fullstack-nginx\n    restart: always\n    environment:\n      STAGE: '${HTTPS_PORTAL_STAGE}'\n      DOMAINS: '${SERVER_DOMAIN} -> http://nestjs-mod-fullstack-nginx:${NGINX_PORT}'\n    depends_on:\n      nestjs-mod-fullstack-nginx:\n        condition: service_healthy\n    volumes:\n      - nestjs-mod-fullstack-https-portal-volume:/var/lib/https-portal\nvolumes:\n  nestjs-mod-fullstack-postgre-sql-volume:\n    name: 'nestjs-mod-fullstack-postgre-sql-volume'\n  nestjs-mod-fullstack-https-portal-volume:\n    name: 'nestjs-mod-fullstack-https-portal-volume'\n  nestjs-mod-fullstack-minio-volume:\n    name: 'nestjs-mod-fullstack-minio-volume'\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Updating the file ",(0,o.jsx)(n.em,{children:".docker/docker-compose-full.env"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"SERVER_PORT=9090\nNGINX_PORT=8080\nSERVER_ROOT_DATABASE_URL=postgres://postgres:postgres_password@nestjs-mod-fullstack-postgre-sql:5432/postgres?schema=public\nSERVER_APP_DATABASE_URL=postgres://app:app_password@nestjs-mod-fullstack-postgre-sql:5432/app?schema=public\nSERVER_WEBHOOK_DATABASE_URL=postgres://webhook:webhook_password@nestjs-mod-fullstack-postgre-sql:5432/webhook?schema=public\nSERVER_POSTGRE_SQL_POSTGRESQL_USERNAME=postgres\nSERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD=postgres_password\nSERVER_POSTGRE_SQL_POSTGRESQL_DATABASE=postgres\nSERVER_DOMAIN=example.com\nHTTPS_PORTAL_STAGE=local # local|stage|production\n\nCLIENT_AUTHORIZER_URL=http://localhost:8000\nCLIENT_MINIO_URL=http://localhost:9000\nSERVER_AUTHORIZER_REDIRECT_URL=http://localhost:8080\nSERVER_AUTH_ADMIN_EMAIL=nestjs-mod-fullstack@site15.ru\nSERVER_AUTH_ADMIN_USERNAME=admin\nSERVER_AUTH_ADMIN_PASSWORD=SbxcbII7RUvCOe9TDXnKhfRrLJW5cGDA\nSERVER_URL=http://localhost:9090/api\nSERVER_AUTHORIZER_URL=http://localhost:8000\nSERVER_AUTHORIZER_ADMIN_SECRET=VfKSfPPljhHBXCEohnitursmgDxfAyiD\nSERVER_AUTHORIZER_DATABASE_TYPE=postgres\nSERVER_AUTHORIZER_DATABASE_URL=postgres://Yk42KA4sOb:B7Ep2MwlRR6fAx0frXGWVTGP850qAxM6@nestjs-mod-fullstack-postgre-sql:5432/authorizer\nSERVER_AUTHORIZER_DATABASE_NAME=authorizer\nSERVER_AUTHORIZER_PORT=8080\nSERVER_AUTHORIZER_AUTHORIZER_URL=http://nestjs-mod-fullstack-authorizer:8080\nSERVER_AUTHORIZER_COOKIE_NAME=authorizer\nSERVER_AUTHORIZER_DISABLE_PLAYGROUND=true\nSERVER_AUTHORIZER_ACCESS_TOKEN_EXPIRY_TIME=30m\nSERVER_AUTHORIZER_DISABLE_STRONG_PASSWORD=true\nSERVER_AUTHORIZER_DISABLE_EMAIL_VERIFICATION=true\nSERVER_AUTHORIZER_ORGANIZATION_NAME=NestJSModFullstack\nSERVER_AUTHORIZER_IS_EMAIL_SERVICE_ENABLED=true\nSERVER_AUTHORIZER_IS_SMS_SERVICE_ENABLED=false\nSERVER_AUTHORIZER_RESET_PASSWORD_URL=/reset-password\nSERVER_AUTHORIZER_ROLES=user,admin\nSERVER_AUTHORIZER_DEFAULT_ROLES=user\nSERVER_AUTHORIZER_JWT_ROLE_CLAIM=role\n\nSERVER_MINIO_SERVER_HOST=nestjs-mod-fullstack-minio\nSERVER_MINIO_ACCESS_KEY=FWGmrAGaeMKM\nSERVER_MINIO_SECRET_KEY=QatVJuLoZRARlJguoZMpoKvZMJHzvuOR\nSERVER_MINIO_ROOT_USER=FWGmrAGaeMKM\nSERVER_MINIO_ROOT_PASSWORD=QatVJuLoZRARlJguoZMpoKvZMJHzvuOR\nSERVER_MINIO_MINIO_ROOT_USER=FWGmrAGaeMKM\nSERVER_MINIO_MINIO_ROOT_PASSWORD=QatVJuLoZRARlJguoZMpoKvZMJHzvuOR\n"})}),"\n",(0,o.jsx)(n.h3,{id:"12-create-an-e2e-test-to-check-profile-update-and-file-upload-to-the-server",children:"12. Create an E2E test to check profile update and file upload to the server"}),"\n",(0,o.jsxs)(n.p,{children:["Create a file ",(0,o.jsx)(n.em,{children:"apps/client-e2e/src/profile-as-user.spec.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { faker } from '@faker-js/faker';\nimport { expect, Page, test } from '@playwright/test';\nimport { get } from 'env-var';\nimport { join } from 'path';\nimport { setTimeout } from 'timers/promises';\n\ntest.describe('Work with profile as \"User\" role', () => {\n  test.describe.configure({ mode: 'serial' });\n\n  const user = {\n    email: faker.internet.email({\n      provider: 'example.fakerjs.dev',\n    }),\n    password: faker.internet.password({ length: 8 }),\n    site: `http://${faker.internet.domainName()}`,\n  };\n  let page: Page;\n\n  test.beforeAll(async ({ browser }) => {\n    page = await browser.newPage({\n      viewport: { width: 1920, height: 1080 },\n      recordVideo: {\n        dir: join(__dirname, 'video'),\n        size: { width: 1920, height: 1080 },\n      },\n    });\n    await page.goto('/', {\n      timeout: 7000,\n    });\n    await page.evaluate((authorizerURL) => localStorage.setItem('authorizerURL', authorizerURL), get('SERVER_AUTHORIZER_URL').required().asString());\n  });\n\n  test.afterAll(async () => {\n    await setTimeout(1000);\n    await page.close();\n  });\n\n  test('sign up as user', async () => {\n    await page.goto('/sign-up', {\n      timeout: 7000,\n    });\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=email]').click();\n    await page.keyboard.type(user.email.toLowerCase(), {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=email]')).toHaveValue(user.email.toLowerCase());\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=password]')).toHaveValue(user.password);\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]')).toHaveValue(user.password);\n\n    await expect(page.locator('auth-sign-up-form').locator('button[type=submit]')).toHaveText('Sign-up');\n\n    await page.locator('auth-sign-up-form').locator('button[type=submit]').click();\n\n    await setTimeout(1500);\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]')).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n  });\n\n  test('sign out after sign-up', async () => {\n    await expect(page.locator('nz-header').locator('[nz-submenu]')).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n    await page.locator('nz-header').locator('[nz-submenu]').first().click();\n\n    await expect(page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last()).toContainText(`Sign-out`);\n\n    await page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last().click();\n\n    await setTimeout(4000);\n\n    await expect(page.locator('nz-header').locator('[nz-menu-item]').last()).toContainText(`Sign-in`);\n  });\n\n  test('sign in as user', async () => {\n    await page.goto('/sign-in', {\n      timeout: 7000,\n    });\n\n    await page.locator('auth-sign-in-form').locator('[placeholder=email]').click();\n    await page.keyboard.type(user.email.toLowerCase(), {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-in-form').locator('[placeholder=email]')).toHaveValue(user.email.toLowerCase());\n\n    await page.locator('auth-sign-in-form').locator('[placeholder=password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-in-form').locator('[placeholder=password]')).toHaveValue(user.password);\n\n    await expect(page.locator('auth-sign-in-form').locator('button[type=submit]')).toHaveText('Sign-in');\n\n    await page.locator('auth-sign-in-form').locator('button[type=submit]').click();\n\n    await setTimeout(1500);\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]')).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n  });\n\n  test('should change password in profile', async () => {\n    await expect(page.locator('nz-header').locator('[nz-submenu]')).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n    await page.locator('nz-header').locator('[nz-submenu]').first().click();\n\n    await expect(page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').first()).toContainText(`Profile`);\n\n    await page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').first().click();\n\n    await setTimeout(4000);\n    //\n    await page.locator('auth-profile-form').locator('[placeholder=old_password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-profile-form').locator('[placeholder=old_password]')).toHaveValue(user.password);\n\n    await page.locator('auth-profile-form').locator('[placeholder=new_password]').click();\n    await page.keyboard.type(user.password + user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-profile-form').locator('[placeholder=new_password]')).toHaveValue(user.password + user.password);\n\n    await page.locator('auth-profile-form').locator('[placeholder=confirm_new_password]').click();\n    await page.keyboard.type(user.password + user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-profile-form').locator('[placeholder=confirm_new_password]')).toHaveValue(user.password + user.password);\n\n    const fileChooserPromise = page.waitForEvent('filechooser');\n    page.locator('nz-upload').locator('button').click();\n    const fileChooser = await fileChooserPromise;\n    await fileChooser.setFiles(join(__dirname, 'dep.jpg'));\n    await setTimeout(1000);\n\n    await expect(page.locator('auth-profile-form').locator('button[type=submit]')).toHaveText('Update');\n\n    await page.locator('auth-profile-form').locator('button[type=submit]').click();\n\n    await setTimeout(1500);\n  });\n\n  test('sign out', async () => {\n    await expect(page.locator('nz-header').locator('[nz-submenu]')).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n    await page.locator('nz-header').locator('[nz-submenu]').first().click();\n\n    await expect(page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last()).toContainText(`Sign-out`);\n\n    await page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last().click();\n\n    await setTimeout(4000);\n\n    await expect(page.locator('nz-header').locator('[nz-menu-item]').last()).toContainText(`Sign-in`);\n  });\n\n  test('sign in as user with new password', async () => {\n    await page.goto('/sign-in', {\n      timeout: 7000,\n    });\n\n    await page.locator('auth-sign-in-form').locator('[placeholder=email]').click();\n    await page.keyboard.type(user.email.toLowerCase(), {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-in-form').locator('[placeholder=email]')).toHaveValue(user.email.toLowerCase());\n\n    await page.locator('auth-sign-in-form').locator('[placeholder=password]').click();\n    await page.keyboard.type(user.password + user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-in-form').locator('[placeholder=password]')).toHaveValue(user.password + user.password);\n\n    await expect(page.locator('auth-sign-in-form').locator('button[type=submit]')).toHaveText('Sign-in');\n\n    await page.locator('auth-sign-in-form').locator('button[type=submit]').click();\n\n    await setTimeout(1500);\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]')).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n  });\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:["In this post and project, the configuration for the ",(0,o.jsx)(n.code,{children:"Minio"})," file server is written without taking into account heavy loads and without replications, everything is described as an example, when deploying to a real production, you will need to read additional material."]}),"\n",(0,o.jsxs)(n.p,{children:["The current project uses one ",(0,o.jsx)(n.code,{children:"Minio"})," file server admin for all application users, if this option does not suit you, then you can take ",(0,o.jsx)(n.code,{children:"Keycloak"})," as an authorization server, and configure its connection with ",(0,o.jsx)(n.code,{children:"Minio"})," to use common users."]}),"\n",(0,o.jsx)(n.h3,{id:"plans",children:"Plans"}),"\n",(0,o.jsxs)(n.p,{children:["In the next post I will connect ",(0,o.jsx)(n.code,{children:"Redis"})," to the project and set up caching of user profile information..."]}),"\n",(0,o.jsx)(n.h3,{id:"links",children:"Links"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})," - website from the post"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/41d8b555923e3d6343dc2ac1304443d3df60d5e8..82e050c24a0d1a2111f499460896c6d00e0f5af4",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/41d8b555923e3d6343dc2ac1304443d3df60d5e8..82e050c24a0d1a2111f499460896c6d00e0f5af4"})," - current changes"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"#angular #minio #nestjsmod #fullstack\n#2024-11-15"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);