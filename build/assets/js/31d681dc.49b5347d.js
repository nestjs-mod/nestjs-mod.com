"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[3319],{2506:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=n(4848),s=n(8453);const a={},i="Access to the site on NestJS and Angular by domain name with SSL certificate in Kubernetes via Ingress",o={id:"en-posts/fullstack/2024-09-15",title:"Access to the site on NestJS and Angular by domain name with SSL certificate in Kubernetes via Ingress",description:"Working with SSL is very easy to set up in Kubernetes, this is probably one of the main reasons why I started using it, in this article I will describe a simple scenario for connecting it.",source:"@site/docs/en-posts/fullstack/2024-09-15.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-09-15",permalink:"/docs/en-posts/fullstack/2024-09-15",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-09-15.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Installing Kubernetes via MicroK8s and configuring the deployment of NestJS and Angular applications",permalink:"/docs/en-posts/fullstack/2024-09-13"},next:{title:"Semantic versioning of NestJS and Angular applications in the NX monorepository",permalink:"/docs/en-posts/fullstack/2024-09-16"}},c={},l=[{value:"1. Installing the certificate Manager on a dedicated server",id:"1-installing-the-certificate-manager-on-a-dedicated-server",level:3},{value:"2. Creating a file in the repository with the resource parameters for creating certificates",id:"2-creating-a-file-in-the-repository-with-the-resource-parameters-for-creating-certificates",level:3},{value:"3. We create a file in the repository with the parameters of the Kubernetes entity, which is responsible for proxying external traffic to our services",id:"3-we-create-a-file-in-the-repository-with-the-parameters-of-the-kubernetes-entity-which-is-responsible-for-proxying-external-traffic-to-our-services",level:3},{value:"4. We are slightly changing the CI/CD configuration for the deployment in Kubernetes to eliminate the unnecessary transfer of infrastructure",id:"4-we-are-slightly-changing-the-cicd-configuration-for-the-deployment-in-kubernetes-to-eliminate-the-unnecessary-transfer-of-infrastructure",level:3},{value:"5. Changing the address of the tested site in the &quot;Docker Compose&quot; file for E2E tests",id:"5-changing-the-address-of-the-tested-site-in-the-docker-compose-file-for-e2e-tests",level:3},{value:"6. We commit the changes and wait for CI/CD to work successfully and check the site operation with our hands",id:"6-we-commit-the-changes-and-wait-for-cicd-to-work-successfully-and-check-the-site-operation-with-our-hands",level:3},{value:"7. We are deleting the global service that we created in the previous post",id:"7-we-are-deleting-the-global-service-that-we-created-in-the-previous-post",level:3},{value:"8. Commit the changes and wait for CI/CD to work successfully and check with your hands that the site http://fullstack.nestjs-mod.com:30222 It doesn&#39;t work anymore",id:"8-commit-the-changes-and-wait-for-cicd-to-work-successfully-and-check-with-your-hands-that-the-site-httpfullstacknestjs-modcom30222-it-doesnt-work-anymore",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"access-to-the-site-on-nestjs-and-angular-by-domain-name-with-ssl-certificate-in-kubernetes-via-ingress",children:"Access to the site on NestJS and Angular by domain name with SSL certificate in Kubernetes via Ingress"}),"\n",(0,r.jsx)(t.p,{children:"Working with SSL is very easy to set up in Kubernetes, this is probably one of the main reasons why I started using it, in this article I will describe a simple scenario for connecting it."}),"\n",(0,r.jsx)(t.h3,{id:"1-installing-the-certificate-manager-on-a-dedicated-server",children:"1. Installing the certificate Manager on a dedicated server"}),"\n",(0,r.jsx)(t.p,{children:"We connect to our server via SSH and enable the cert-manager plugin from MicroK8s."}),"\n",(0,r.jsx)(t.p,{children:"The cert-manager plugin manages the process of issuing and renewing SSL certificates."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Commands"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"ssh root@194.226.49.162\nmicrok8s enable cert-manager\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Console output"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"root@vps1724252356:~# microk8s enable cert-manager\nInfer repository core for addon cert-manager\nEnable DNS addon\nInfer repository core for addon dns\nAddon core/dns is already enabled\nEnabling cert-manager\nnamespace/cert-manager created\ncustomresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created\ncustomresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created\nserviceaccount/cert-manager-cainjector created\nserviceaccount/cert-manager created\nserviceaccount/cert-manager-webhook created\nconfigmap/cert-manager-webhook created\nclusterrole.rbac.authorization.k8s.io/cert-manager-cainjector created\nclusterrole.rbac.authorization.k8s.io/cert-manager-controller-issuers created\nclusterrole.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created\nclusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificates created\nclusterrole.rbac.authorization.k8s.io/cert-manager-controller-orders created\nclusterrole.rbac.authorization.k8s.io/cert-manager-controller-challenges created\nclusterrole.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created\nclusterrole.rbac.authorization.k8s.io/cert-manager-view created\nclusterrole.rbac.authorization.k8s.io/cert-manager-edit created\nclusterrole.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created\nclusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificatesigningrequests created\nclusterrole.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-cainjector created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-issuers created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificates created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-orders created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-challenges created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificatesigningrequests created\nclusterrolebinding.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created\nrole.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created\nrole.rbac.authorization.k8s.io/cert-manager:leaderelection created\nrole.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created\nrolebinding.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created\nrolebinding.rbac.authorization.k8s.io/cert-manager:leaderelection created\nrolebinding.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created\nservice/cert-manager created\nservice/cert-manager-webhook created\ndeployment.apps/cert-manager-cainjector created\ndeployment.apps/cert-manager created\ndeployment.apps/cert-manager-webhook created\nmutatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created\nvalidatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created\nWaiting for cert-manager to be ready.\n..ready\nEnabled cert-manager\n\n===========================\n\nCert-manager is installed. As a next step, try creating a ClusterIssuer\nfor Let's Encrypt by creating the following resource:\n\n$ microk8s kubectl apply -f - <<EOF\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\nspec:\n  acme:\n    # You must replace this email address with your own.\n    # Let's Encrypt will use this to contact you about expiring\n    # certificates, and issues related to your account.\n    email: me@example.com\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      # Secret resource that will be used to store the account's private key.\n      name: letsencrypt-account-key\n    # Add a single challenge solver, HTTP01 using nginx\n    solvers:\n    - http01:\n        ingress:\n          class: public\nEOF\n\nThen, you can create an ingress to expose 'my-service:80' on 'https://my-service.example.com' with:\n\n$ microk8s enable ingress\n$ microk8s kubectl create ingress my-ingress \\\n    --annotation cert-manager.io/cluster-issuer=letsencrypt \\\n    --rule 'my-service.example.com/*=my-service:80,tls=my-service-tls'\n"})}),"\n",(0,r.jsx)(t.h3,{id:"2-creating-a-file-in-the-repository-with-the-resource-parameters-for-creating-certificates",children:"2. Creating a file in the repository with the resource parameters for creating certificates"}),"\n",(0,r.jsx)(t.p,{children:"There are various free and paid sites that issue SSL certificates, and we can specify in the cert-manager how and from whom to take these certificates."}),"\n",(0,r.jsxs)(t.p,{children:["Personally, I set up only the receipt of certificates from ",(0,r.jsx)(t.a,{href:"https://letsencrypt.org",children:"https://letsencrypt.org"})," and ",(0,r.jsx)(t.a,{href:"https://www.cloudflare.com",children:"https://www.cloudflare.com"})," , this project will use certificates from `Let's Encrypt'."]}),"\n",(0,r.jsx)(t.p,{children:"In order to specify the source for obtaining certificates, we need to create a resource for creating certificates."}),"\n",(0,r.jsxs)(t.p,{children:["Creating the file ",(0,r.jsx)(t.code,{children:".kubernetes/templates/node/8.issuer.yaml"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\n  namespace: cert-manager\nspec:\n  acme:\n    email: nestjs-mod@site15.ru\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n      - http01:\n          ingress:\n            class: public\n"})}),"\n",(0,r.jsx)(t.h3,{id:"3-we-create-a-file-in-the-repository-with-the-parameters-of-the-kubernetes-entity-which-is-responsible-for-proxying-external-traffic-to-our-services",children:"3. We create a file in the repository with the parameters of the Kubernetes entity, which is responsible for proxying external traffic to our services"}),"\n",(0,r.jsx)(t.p,{children:"By default, this entity is created based on Nginx, well, you can configure Traefik, Nginx will be used in this project, since it is substituted by default."}),"\n",(0,r.jsxs)(t.p,{children:["Creating the file ",(0,r.jsx)(t.code,{children:".kubernetes/templates/client/5.ingress.yaml"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  namespace: '%NAMESPACE%'\n  name: %NAMESPACE%-client-ingress\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/proxy-connect-timeout: '3600'\n    nginx.ingress.kubernetes.io/proxy-read-timeout: '3600'\n    nginx.ingress.kubernetes.io/proxy-send-timeout: '3600'\nspec:\n  rules:\n    - host: %SERVER_DOMAIN%\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: %NAMESPACE%-client\n                port:\n                  number: %NGINX_PORT%\n  tls:\n    - hosts:\n        - %SERVER_DOMAIN%\n      secretName: %NAMESPACE%-client-tls\n"})}),"\n",(0,r.jsx)(t.h3,{id:"4-we-are-slightly-changing-the-cicd-configuration-for-the-deployment-in-kubernetes-to-eliminate-the-unnecessary-transfer-of-infrastructure",children:"4. We are slightly changing the CI/CD configuration for the deployment in Kubernetes to eliminate the unnecessary transfer of infrastructure"}),"\n",(0,r.jsx)(t.p,{children:"The pipeline deployment can be divided in different ways, as convenient and as necessary for anyone, but in the current post I will simply prohibit restarting the infrastructure if the application version has not been changed."}),"\n",(0,r.jsxs)(t.p,{children:["Updated version of the application deployment task ",(0,r.jsx)(t.code,{children:".github/workflows/kubernetes.yml"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"# ...\njobs:\n  # ...\n  deploy:\n    environment: kubernetes\n    needs: [check-server-image, build-and-push-migrations-image, build-and-push-server-image, build-and-push-nginx-image, build-and-push-e2e-tests-image]\n    runs-on: [self-hosted]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Deploy infrastructure\n        if: ${{ needs.check-server-image.outputs.result != 'success' || contains(github.event.head_commit.message, '[skip cache]') || contains(github.event.head_commit.message, '[skip infrastructure]') }}\n        env:\n          SERVER_APP_DATABASE_NAME: ${{ secrets.SERVER_APP_DATABASE_NAME }}\n          SERVER_APP_DATABASE_PASSWORD: ${{ secrets.SERVER_APP_DATABASE_PASSWORD }}\n          SERVER_APP_DATABASE_USERNAME: ${{ secrets.SERVER_APP_DATABASE_USERNAME }}\n          SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE: ${{ secrets.SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE }}\n          SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD: ${{ secrets.SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD }}\n          SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME: ${{ secrets.SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME }}\n        run: |\n          rm -rf ./.kubernetes/generated\n          . .kubernetes/set-env.sh && npx -y rucken copy-paste --find=templates --replace=generated --replace-plural=generated --path=./.kubernetes/templates --replace-envs=true\n          docker compose -f ./.kubernetes/generated/docker-compose-infra.yml --compatibility down || echo 'docker-compose-infra not started'\n          docker compose -f ./.kubernetes/generated/docker-compose-infra.yml --compatibility up -d\n\n      - name: Deploy applications\n        env:\n          DOCKER_SERVER: ${{ env.REGISTRY }}\n          DOCKER_USERNAME: ${{ github.actor }}\n          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}\n          SERVER_APP_DATABASE_NAME: ${{ secrets.SERVER_APP_DATABASE_NAME }}\n          SERVER_APP_DATABASE_PASSWORD: ${{ secrets.SERVER_APP_DATABASE_PASSWORD }}\n          SERVER_APP_DATABASE_USERNAME: ${{ secrets.SERVER_APP_DATABASE_USERNAME }}\n          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}\n        run: |\n          rm -rf ./.kubernetes/generated\n          . .kubernetes/set-env.sh && npx -y rucken copy-paste --find=templates --replace=generated --replace-plural=generated --path=./.kubernetes/templates --replace-envs=true\n          chmod +x .kubernetes/generated/install.sh\n          .kubernetes/generated/install.sh > /dev/null 2>&1 &\n\n      - name: Run E2E-tests\n        env:\n          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}\n        run: |\n          rm -rf ./.kubernetes/generated\n          . .kubernetes/set-env.sh && npx -y rucken copy-paste --find=templates --replace=generated --replace-plural=generated --path=./.kubernetes/templates --replace-envs=true\n          docker compose -f ./.kubernetes/generated/docker-compose-e2e-tests.yml --compatibility up\n"})}),"\n",(0,r.jsx)(t.h3,{id:"5-changing-the-address-of-the-tested-site-in-the-docker-compose-file-for-e2e-tests",children:'5. Changing the address of the tested site in the "Docker Compose" file for E2E tests'}),"\n",(0,r.jsx)(t.p,{children:"Since we now have a domain with an SSL certificate, we no longer need to specify the port with the Nginx global frontend service when running E2E tests."}),"\n",(0,r.jsxs)(t.p,{children:["Updated file ",(0,r.jsx)(t.code,{children:".kubernetes/templates/docker-compose-e2e-tests.yml"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"version: '3'\nnetworks:\n  nestjs-mod-fullstack-network:\n    driver: 'bridge'\nservices:\n  nestjs-mod-fullstack-e2e-tests:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-e2e-tests:%ROOT_VERSION%'\n    container_name: 'nestjs-mod-fullstack-e2e-tests'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    environment:\n      BASE_URL: 'https://%SERVER_DOMAIN%'\n    working_dir: '/usr/src/app'\n    volumes:\n      - './../../apps:/usr/src/app/apps'\n      - './../../libs:/usr/src/app/libs'\n"})}),"\n",(0,r.jsx)(t.h3,{id:"6-we-commit-the-changes-and-wait-for-cicd-to-work-successfully-and-check-the-site-operation-with-our-hands",children:"6. We commit the changes and wait for CI/CD to work successfully and check the site operation with our hands"}),"\n",(0,r.jsxs)(t.p,{children:["Current result of CI/CD operation: ",(0,r.jsx)(t.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/10877250887",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/10877250887"}),"\nCurrent site: ",(0,r.jsx)(t.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})]}),"\n",(0,r.jsx)(t.h3,{id:"7-we-are-deleting-the-global-service-that-we-created-in-the-previous-post",children:"7. We are deleting the global service that we created in the previous post"}),"\n",(0,r.jsx)(t.p,{children:"Now we are deploying and testing a site that works through Ingress, which means that we no longer need a site launched as a global service through NodePort and it can be deleted."}),"\n",(0,r.jsxs)(t.p,{children:["You can delete it by connecting to a dedicated server via ssh via the command ",(0,r.jsx)(t.code,{children:"sudo microk8s kubectl delete service master-client-global --namespace master"}),", but it is always advisable to communicate changes through the git repository, since we may have several stands on which we will also need to run this command again."]}),"\n",(0,r.jsxs)(t.p,{children:["In this project, we will report the changes via git, for this we will delete the file ",(0,r.jsx)(t.code,{children:".kubernetes/templates/client/4.global-service.yaml"})," and add the delete command to the application installation script."]}),"\n",(0,r.jsxs)(t.p,{children:["Updating the file ",(0,r.jsx)(t.code,{children:".kubernetes/templates/install.sh "})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"#!/bin/bash\nset -e\n\n# docker regcred for pull docker images\nsudo microk8s kubectl delete secret docker-regcred || echo 'not need delete secret docker-regcred'\nsudo microk8s kubectl create secret docker-registry docker-regcred --docker-server=%DOCKER_SERVER% --docker-username=%DOCKER_USERNAME% --docker-password=%DOCKER_PASSWORD% --docker-email=docker-regcred\n\n# namespace and common config\nsudo microk8s kubectl apply -f .kubernetes/generated/node\nsudo microk8s kubectl get secret docker-regcred -n default -o yaml || sed s/\"namespace: default\"/\"namespace: %NAMESPACE%\"/ || microk8s kubectl apply -n %NAMESPACE% -f - || echo 'not need update docker-regcred'\n\n# server\nsudo microk8s kubectl apply -f .kubernetes/generated/server\n\n# client\nsudo microk8s kubectl apply -f .kubernetes/generated/client\n\n# depricated\nsudo microk8s kubectl delete service master-client-global --namespace master || echo 'not need delete master-client-global'\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"8-commit-the-changes-and-wait-for-cicd-to-work-successfully-and-check-with-your-hands-that-the-site-httpfullstacknestjs-modcom30222-it-doesnt-work-anymore",children:["8. Commit the changes and wait for CI/CD to work successfully and check with your hands that the site ",(0,r.jsx)(t.a,{href:"http://fullstack.nestjs-mod.com:30222",children:"http://fullstack.nestjs-mod.com:30222"})," It doesn't work anymore"]}),"\n",(0,r.jsxs)(t.p,{children:["Current site: ",(0,r.jsx)(t.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})]}),"\n",(0,r.jsx)(t.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(t.p,{children:"In this project, Ingress will work simply as a proxy to our own Nginx with an embedded frontend application, and all further new microservices and applications that will be developed and that will need access from the outside will also be described in our own Nginx."}),"\n",(0,r.jsx)(t.p,{children:"Our own Nginx with all our routing rules is needed in order to be able to deploy all applications without Kubernetes and not have to have several different Nginx configuration files."}),"\n",(0,r.jsx)(t.h3,{id:"plans",children:"Plans"}),"\n",(0,r.jsx)(t.p,{children:"In the next post, I will add semantic versioning of applications that will run depending on changes in dependent files..."}),"\n",(0,r.jsx)(t.h3,{id:"links",children:"Links"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})," - website from the post"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/28ebc77b38b2b1c9945e87806e5726451b8d22a2..33b51edf67471600e583f89f10b2d99a1b9b79da",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/28ebc77b38b2b1c9945e87806e5726451b8d22a2..33b51edf67471600e583f89f10b2d99a1b9b79da"})," - current changes"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"#kubernetes #github #nestjsmod #fullstack\n#2024-09-15"})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(6540);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);