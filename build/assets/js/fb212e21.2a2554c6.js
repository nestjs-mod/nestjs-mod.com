"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[4152],{9189:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(4848),o=t(8453);const i={},r='Converting date by user time zone in "NestJS", and entering and displaying date in "Angular"',s={id:"en-posts/fullstack/2024-12-29",title:'Converting date by user time zone in "NestJS", and entering and displaying date in "Angular"',description:"In this article, I will talk about adding a new field workUntilDate with the type timestamp(6) to the Webhook table of the Webhook database.",source:"@site/docs/en-posts/fullstack/2024-12-29.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-12-29",permalink:"/docs/en-posts/fullstack/2024-12-29",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-12-29.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:'Integrating and storing the selected user language into the database in a full-stack application on "Angular" and "NestJS"',permalink:"/docs/en-posts/fullstack/2024-12-16"}},l={},c=[{value:"1. Installing the required libraries",id:"1-installing-the-required-libraries",level:3},{value:"2. Creating a migration",id:"2-creating-a-migration",level:3},{value:"3. Applying migration and updating &quot;Prisma&quot; schemas",id:"3-applying-migration-and-updating-prisma-schemas",level:3},{value:"4. Using &quot;AsyncLocalStorage&quot; to store the user&#39;s current timezone",id:"4-using-asynclocalstorage-to-store-the-users-current-timezone",level:3},{value:"5. Creating a &quot;Pipe&quot; to transform the input object",id:"5-creating-a-pipe-to-transform-the-input-object",level:3},{value:"6. Registering an interceptor and a service for storing asynchronous state in the authorization module",id:"6-registering-an-interceptor-and-a-service-for-storing-asynchronous-state-in-the-authorization-module",level:3},{value:"7. Adding a new field type &quot;date-input&quot; for &quot;Formly&quot;",id:"7-adding-a-new-field-type-date-input-for-formly",level:3},{value:"8. Developing a service for changing locale in different components of a frontend application",id:"8-developing-a-service-for-changing-locale-in-different-components-of-a-frontend-application",level:3},{value:"9. Connecting the necessary elements to the application configuration for switching the locale in components working with dates",id:"9-connecting-the-necessary-elements-to-the-application-configuration-for-switching-the-locale-in-components-working-with-dates",level:3},{value:"10. Adding a new input field on the front end in the &quot;Webhook&quot; module",id:"10-adding-a-new-input-field-on-the-front-end-in-the-webhook-module",level:3},{value:"11. Connecting a localization pipe to display dates on the front",id:"11-connecting-a-localization-pipe-to-display-dates-on-the-front",level:3},{value:"12. Adaptation of tests related to interface localization",id:"12-adaptation-of-tests-related-to-interface-localization",level:3},{value:"13. Generating additional files, updating dictionaries and launching the infrastructure in development mode",id:"13-generating-additional-files-updating-dictionaries-and-launching-the-infrastructure-in-development-mode",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3},{value:"P.S.",id:"ps",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"converting-date-by-user-time-zone-in-nestjs-and-entering-and-displaying-date-in-angular",children:'Converting date by user time zone in "NestJS", and entering and displaying date in "Angular"'}),"\n",(0,a.jsxs)(n.p,{children:["In this article, I will talk about adding a new field ",(0,a.jsx)(n.code,{children:"workUntilDate"})," with the type ",(0,a.jsx)(n.code,{children:"timestamp(6)"})," to the ",(0,a.jsx)(n.code,{children:"Webhook"})," table of the ",(0,a.jsx)(n.code,{children:"Webhook"})," database."]}),"\n",(0,a.jsxs)(n.p,{children:["On the frontend side (in the ",(0,a.jsx)(n.code,{children:"Angular"})," application), a convenient calendar with the ability to select a time will be implemented for this field."]}),"\n",(0,a.jsxs)(n.p,{children:["Users will be able to set the date and time in their time zone, while the backend (",(0,a.jsx)(n.code,{children:"NestJS"})," application) will save the entered data in the database in the ",(0,a.jsx)(n.code,{children:"UTC+0"})," format."]}),"\n",(0,a.jsx)(n.p,{children:"In addition, the calendar interface and other elements displaying dates will be adapted to the user's language and time zone."}),"\n",(0,a.jsx)(n.h3,{id:"1-installing-the-required-libraries",children:"1. Installing the required libraries"}),"\n",(0,a.jsx)(n.p,{children:"First, let's install the required packages:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Commands"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save @jsverse/transloco-locale @jsverse/transloco-messageformat --prefer-offline --no-audit --progress=false\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-creating-a-migration",children:"2. Creating a migration"}),"\n",(0,a.jsx)(n.p,{children:"My migrations are written in a way that they can be re-run."}),"\n",(0,a.jsx)(n.p,{children:"This is useful in cases where you need to undo the migration and re-run it."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Commands"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run flyway:create:webhook --args=AddFieldWorkUntilDateToAuthUser\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Updating the file ",(0,a.jsx)(n.em,{children:"libs/core/webhook/src/migrations/V202412200905__AddFieldWorkUntilDateToAuthUser.sql"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'DO $$\nBEGIN\n    ALTER TABLE "Webhook"\n        ADD "workUntilDate" timestamp(6);\nEXCEPTION\n    WHEN duplicate_column THEN\n        NULL;\nEND\n$$;\n\n\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-applying-migration-and-updating-prisma-schemas",children:'3. Applying migration and updating "Prisma" schemas'}),"\n",(0,a.jsxs)(n.p,{children:["Now let's apply the created migration, recreate the ",(0,a.jsx)(n.code,{children:"Prisma"})," schemas and run the ",(0,a.jsx)(n.code,{children:"Prisma"})," generators."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Commands"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run docker-compose:start-prod:server\nnpm run db:create-and-fill\nnpm run prisma:pull\nnpm run generate\n"})}),"\n",(0,a.jsxs)(n.p,{children:["After completing these steps, all relevant ",(0,a.jsx)(n.code,{children:"DTO"}),"s will have a new field ",(0,a.jsx)(n.code,{children:"workUntilDate"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Example of updating ",(0,a.jsx)(n.code,{children:"DTO"})," file ",(0,a.jsx)(n.em,{children:"libs/core/webhook/src/lib/generated/rest/dto/webhook.dto.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Prisma } from '../../../../../../../../node_modules/@prisma/webhook-client';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class WebhookDto {\n  // ...\n  // updates\n  @ApiProperty({\n    type: 'string',\n    format: 'date-time',\n    nullable: true,\n  })\n  workUntilDate!: Date | null;\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Example of updating a ",(0,a.jsx)(n.code,{children:"Prisma"})," schema ",(0,a.jsx)(n.em,{children:"libs/core/webhook/src/prisma/schema.prisma"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prisma",children:'generator client {\n  provider = "prisma-client-js"\n  engineType = "binary"\n  output   = "../../../../../node_modules/@prisma/webhook-client"\n  binaryTargets = ["native","linux-musl","debian-openssl-1.1.x","linux-musl-openssl-3.0.x"]\n}\n\n// ...\n\nmodel Webhook {\n  id                                         String       @id(map: "PK_WEBHOOK") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  // ...\n  workUntilDate                              DateTime?    @db.Timestamp(6) /// <-- updates\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4-using-asynclocalstorage-to-store-the-users-current-timezone",children:'4. Using "AsyncLocalStorage" to store the user\'s current timezone'}),"\n",(0,a.jsxs)(n.p,{children:["Previously, we used ",(0,a.jsx)(n.code,{children:"AuthTimezoneInterceptor"})," to convert the output of dates in ",(0,a.jsx)(n.code,{children:"UTC-0"})," format to a format that respects the user's timezone."]}),"\n",(0,a.jsxs)(n.p,{children:["The conversion of the incoming date from the user's timezone to the ",(0,a.jsx)(n.code,{children:"UTC-0"})," date in which it is stored in the database is done in ",(0,a.jsx)(n.code,{children:"AuthTimezonePipe"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"However, in this context, we do not have access to the request data, so it is not possible to determine the user and their timezone."}),"\n",(0,a.jsxs)(n.p,{children:["To solve this problem, we wrap each incoming request in ",(0,a.jsx)(n.code,{children:"AsyncLocalStorage"}),", which will allow us to obtain the user's timezone information."]}),"\n",(0,a.jsxs)(n.p,{children:["Updating the file ",(0,a.jsx)(n.em,{children:"libs/core/auth/src/lib/interceptors/auth-timezone.interceptor.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// ...\nimport { AsyncLocalStorage } from 'node:async_hooks';\nimport { AuthAsyncLocalStorageData } from '../types/auth-async-local-storage-data';\n\n@Injectable()\nexport class AuthTimezoneInterceptor implements NestInterceptor<TData, TData> {\n  constructor(\n    // ...\n    private readonly asyncLocalStorage: AsyncLocalStorage<AuthAsyncLocalStorageData>\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler) {\n    const req: AuthRequest = getRequestFromExecutionContext(context);\n    const userId = req.authUser?.externalUserId;\n\n    if (!this.authEnvironments.useInterceptors) {\n      return next.handle();\n    }\n\n    if (!userId) {\n      return next.handle();\n    }\n\n    const run = () => {\n      const result = next.handle();\n\n      if (isObservable(result)) {\n        return result.pipe(\n          concatMap(async (data) => {\n            const user = await this.authCacheService.getCachedUserByExternalUserId(userId);\n            return this.authTimezoneService.convertObject(data, user?.timezone);\n          })\n        );\n      }\n      if (result instanceof Promise && typeof result?.then === 'function') {\n        return result.then(async (data) => {\n          if (isObservable(data)) {\n            return data.pipe(\n              concatMap(async (data) => {\n                const user = await this.authCacheService.getCachedUserByExternalUserId(userId);\n                return this.authTimezoneService.convertObject(data, user?.timezone);\n              })\n            );\n          } else {\n            const user = await this.authCacheService.getCachedUserByExternalUserId(userId);\n            // need for correct map types with base method of NestInterceptor\n            return this.authTimezoneService.convertObject(data, user?.timezone) as Observable<TData>;\n          }\n        });\n      }\n      // need for correct map types with base method of NestInterceptor\n      return this.authTimezoneService.convertObject(result, req.authUser?.timezone) as Observable<TData>;\n    };\n\n    if (!this.authEnvironments.usePipes) {\n      return run();\n    }\n\n    return this.asyncLocalStorage.run({ authTimezone: req.authUser?.timezone || 0 }, () => run());\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-creating-a-pipe-to-transform-the-input-object",children:'5. Creating a "Pipe" to transform the input object'}),"\n",(0,a.jsxs)(n.p,{children:["We implement a ",(0,a.jsx)(n.code,{children:"Pipe"})," that will subtract the user's time zone from all fields of the input object that contain date strings."]}),"\n",(0,a.jsxs)(n.p,{children:["If the time zone of the backend server itself is different from ",(0,a.jsx)(n.code,{children:"UTC-0"}),", then we subtract the difference."]}),"\n",(0,a.jsxs)(n.p,{children:["Updating the file ",(0,a.jsx)(n.em,{children:"libs/core/auth/src/lib/pipes/auth-timezone.pipe.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { SERVER_TIMEZONE_OFFSET } from '@nestjs-mod-fullstack/common';\nimport { Injectable, PipeTransform } from '@nestjs/common';\nimport { AsyncLocalStorage } from 'node:async_hooks';\nimport { AuthEnvironments } from '../auth.environments';\nimport { AuthTimezoneService } from '../services/auth-timezone.service';\nimport { AuthAsyncLocalStorageData } from '../types/auth-async-local-storage-data';\n\n@Injectable()\nexport class AuthTimezonePipe implements PipeTransform {\n  constructor(private readonly asyncLocalStorage: AsyncLocalStorage<AuthAsyncLocalStorageData>, private readonly authTimezoneService: AuthTimezoneService, private readonly authEnvironments: AuthEnvironments) {}\n\n  transform(value: unknown) {\n    if (!this.authEnvironments.usePipes) {\n      return value;\n    }\n    const result = this.authTimezoneService.convertObject(value, -1 * (this.asyncLocalStorage.getStore()?.authTimezone || 0) - SERVER_TIMEZONE_OFFSET);\n    return result;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"6-registering-an-interceptor-and-a-service-for-storing-asynchronous-state-in-the-authorization-module",children:"6. Registering an interceptor and a service for storing asynchronous state in the authorization module"}),"\n",(0,a.jsx)(n.p,{children:"Now let's add the created interceptor and a service for storing asynchronous state to the authorization module."}),"\n",(0,a.jsxs)(n.p,{children:["Updating the file ",(0,a.jsx)(n.em,{children:"libs/core/auth/src/lib/auth.module.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// ...\nimport { APP_FILTER, APP_GUARD, APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core';\n// ...\nimport { AsyncLocalStorage } from 'node:async_hooks';\nimport { AuthTimezonePipe } from './pipes/auth-timezone.pipe';\n\nexport const { AuthModule } = createNestModule({\n  // ...\n  sharedProviders: [\n    {\n      provide: AsyncLocalStorage,\n      useValue: new AsyncLocalStorage(),\n    },\n    AuthTimezoneService,\n    AuthCacheService,\n  ],\n  providers: [\n    // ...\n    { provide: APP_PIPE, useClass: AuthTimezonePipe },\n    AuthAuthorizerService,\n    AuthAuthorizerBootstrapService,\n  ],\n  // ...\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"7-adding-a-new-field-type-date-input-for-formly",children:'7. Adding a new field type "date-input" for "Formly"'}),"\n",(0,a.jsxs)(n.p,{children:["Although the standard ",(0,a.jsx)(n.code,{children:"HTML"})," input field supports entering and displaying data with the ",(0,a.jsx)(n.code,{children:"Date"})," type, its appearance differs from the components provided by ",(0,a.jsx)(n.code,{children:"ng.ant.design"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["To keep the interface consistent, we will create a new ",(0,a.jsx)(n.code,{children:"date-input"})," control for ",(0,a.jsx)(n.code,{children:"Formly"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Create a file ",(0,a.jsx)(n.em,{children:"libs/common-angular/src/lib/formly/date-input.component.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { AsyncPipe } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TranslocoService } from '@jsverse/transloco';\nimport { FieldType, FieldTypeConfig, FormlyModule } from '@ngx-formly/core';\nimport { NzDatePickerModule } from 'ng-zorro-antd/date-picker';\nimport { map, Observable } from 'rxjs';\nimport { DATE_INPUT_FORMATS } from '../constants/date-input-formats';\nimport { ActiveLangService } from '../services/active-lang.service';\n\n@Component({\n  selector: 'date-input',\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ReactiveFormsModule, FormlyModule, NzDatePickerModule, AsyncPipe],\n  template: ` <nz-date-picker [formControl]=\"formControl\" [formlyAttributes]=\"field\" [nzShowTime]=\"true\" [nzFormat]=\"(format$ | async)!_</nz-date-picker> `,\n})\nexport class DateInputComponent extends FieldType<FieldTypeConfig> {\n  format$: Observable<string>;\n\n  constructor(private readonly translocoService: TranslocoService, private readonly activeLangService: ActiveLangService) {\n    super();\n    this.format$ = translocoService.langChanges$.pipe(\n      map((lang) => {\n        const { locale } = this.activeLangService.normalizeLangKey(lang);\n        return DATE_INPUT_FORMATS[locale] ? DATE_INPUT_FORMATS[locale] : DATE_INPUT_FORMATS['en-US'];\n      })\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The calendar now correctly displays buttons in the selected locale, but the content of the input field itself remains unchanged."}),"\n",(0,a.jsxs)(n.p,{children:["To solve this problem, let's create a list of main locales and output formats and set the format to be set as the date output in ",(0,a.jsx)(n.code,{children:"input"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Create a file ",(0,a.jsx)(n.em,{children:"libs/common-angular/src/lib/constants/date-input-formats.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"export const DATE_INPUT_FORMATS = {\n  'en-US': 'MM/dd/yyyy HH:mm:ss',\n  'en-GB': 'dd/MM/yyyy HH:mm:ss',\n  'ar-SA': 'dd/MM/yyyy \u0647\u0647:s\u0633',\n  'bg-BG': 'd.M.yyyy H:m:s \u0447.',\n  'ca-ES': 'dd/MM/yyyy H:mm:ss',\n  'cs-CZ': 'd.M.yyyy H:mm:ss',\n  'da-DK': 'dd-MM-yyyy HH:mm:ss',\n  'de-DE': 'dd.MM.yyyy HH:mm:ss',\n  'el-GR': 'd/M/yyyy h:mm:ss \u03c0\u03bc|\u03bc\u03bc',\n  'es-MX': 'dd/MM/yyyy H:mm:ss',\n  'fi-FI': 'd.M.yyyy klo H.mm.ss',\n  'fr-FR': 'dd/MM/yyyy HH:mm:ss',\n  'he-IL': 'dd/MM/yyyy HH:mm:ss',\n  'hi-IN': 'dd-MM-yyyy hh:mm:ss \u092c\u091c\u0947',\n  'hr-HR': 'd.M.yyyy. H:mm:ss',\n  'hu-HU': 'yyyy.MM.dd. H:mm:ss',\n  'id-ID': 'dd/MM/yyyy HH:mm:ss',\n  'is-IS': 'd.M.yyyy kl. HH:mm:ss',\n  'it-IT': 'dd/MM/yyyy HH:mm:ss',\n  'ja-JP': 'yyyy/MM/dd HH:mm:ss',\n  'ko-KR': 'yyyy\ub144 MM\uc6d4 dd\uc77c HH\uc2dc mm\ubd84 ss\ucd08',\n  'lt-LT': 'yyyy.MM.dd. HH:mm:ss',\n  'lv-LV': 'yyyy.gada MM.m\u0113nesis dd.diena HH:mm:ss',\n  'ms-MY': 'dd/MM/yyyy HH:mm:ss',\n  'nl-NL': 'dd-MM-yyyy HH:mm:ss',\n  'no-NO': 'dd.MM.yyyy HH:mm:ss',\n  'pl-PL': 'dd.MM.yyyy HH:mm:ss',\n  'pt-BR': 'dd/MM/yyyy HH:mm:ss',\n  'ro-RO': 'dd.MM.yyyy HH:mm:ss',\n  'ru-RU': 'dd.MM.yyyy HH:mm:ss',\n  'sk-SK': 'd. M. yyyy H:mm:ss',\n  'sl-SI': 'd.M.yyyy H:mm:ss',\n  'sr-RS': 'dd.MM.yyyy. HH:mm:ss',\n  'sv-SE': 'yyyy-MM-dd HH:mm:ss',\n  'th-TH': '\u0e27\u0e31\u0e19\u0e17\u0e35\u0e48 d \u0e40\u0e14\u0e37\u0e2d\u0e19 M \u0e1b\u0e35 yyyy \u0e40\u0e27\u0e25\u0e32 H:mm:ss',\n  'tr-TR': 'dd.MM.yyyy HH:mm:ss',\n  'uk-UA': 'dd.MM.yyyy HH:mm:ss',\n  'vi-VN': 'dd/MM/yyyy HH:mm:ss',\n  'zh-CN': 'yyyy\u5e74MM\u6708dd\u65e5 HH\u65f6mm\u5206ss\u79d2',\n  'zh-TW': 'yyyy\u5e74MM\u6708dd\u65e5 HH\u6642mm\u5206ss\u79d2',\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let's define new types in a variable, which we will later include in the application configuration."}),"\n",(0,a.jsxs)(n.p,{children:["Create a file ",(0,a.jsx)(n.em,{children:"libs/common-angular/src/lib/formly/formly-fields.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { TypeOption } from '@ngx-formly/core/lib/models';\nimport { DateInputComponent } from './date-input.component';\n\nexport const COMMON_FORMLY_FIELDS: TypeOption[] = [\n  {\n    name: 'date-input',\n    component: DateInputComponent,\n    extends: 'input',\n  },\n];\n"})}),"\n",(0,a.jsx)(n.h3,{id:"8-developing-a-service-for-changing-locale-in-different-components-of-a-frontend-application",children:"8. Developing a service for changing locale in different components of a frontend application"}),"\n",(0,a.jsx)(n.p,{children:"Since different components use their own unique mechanisms for changing the language, we will combine them into a single service and method."}),"\n",(0,a.jsxs)(n.p,{children:["Create a file ",(0,a.jsx)(n.em,{children:"libs/common-angular/src/lib/services/active-lang.service.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Inject, Injectable } from '@angular/core';\nimport { toCamelCase, TranslocoService } from '@jsverse/transloco';\nimport { LangToLocaleMapping, TRANSLOCO_LOCALE_LANG_MAPPING, TranslocoLocaleService } from '@jsverse/transloco-locale';\nimport * as dateFnsLocales from 'date-fns/locale';\nimport * as ngZorroLocales from 'ng-zorro-antd/i18n';\nimport { NzI18nService } from 'ng-zorro-antd/i18n';\n\n@Injectable({ providedIn: 'root' })\nexport class ActiveLangService {\n  constructor(\n    private readonly translocoService: TranslocoService,\n    private readonly translocoLocaleService: TranslocoLocaleService,\n    private readonly nzI18nService: NzI18nService,\n    @Inject(TRANSLOCO_LOCALE_LANG_MAPPING)\n    readonly langToLocaleMapping: LangToLocaleMapping\n  ) {}\n\n  applyActiveLang(lang: string) {\n    const { locale, localeInSnakeCase, localeInCamelCase } = this.normalizeLangKey(lang);\n\n    this.translocoService.setActiveLang(lang);\n    this.translocoLocaleService.setLocale(locale);\n\n    if (ngZorroLocales[localeInSnakeCase]) {\n      this.nzI18nService.setLocale(ngZorroLocales[localeInSnakeCase]);\n    }\n\n    if (dateFnsLocales[lang]) {\n      this.nzI18nService.setDateLocale(dateFnsLocales[lang]);\n    }\n    if (dateFnsLocales[localeInCamelCase]) {\n      this.nzI18nService.setDateLocale(dateFnsLocales[localeInCamelCase]);\n    }\n  }\n\n  normalizeLangKey(lang: string) {\n    const locale = this.langToLocaleMapping[lang];\n    const localeInCamelCase = toCamelCase(locale);\n    const localeInSnakeCase = locale.split('-').join('_');\n    return { locale, localeInSnakeCase, localeInCamelCase };\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"9-connecting-the-necessary-elements-to-the-application-configuration-for-switching-the-locale-in-components-working-with-dates",children:"9. Connecting the necessary elements to the application configuration for switching the locale in components working with dates"}),"\n",(0,a.jsx)(n.p,{children:"Now we will connect everything necessary to the configuration of our application to ensure correct switching of the locale in components for working with dates."}),"\n",(0,a.jsxs)(n.p,{children:["Updating the file ",(0,a.jsx)(n.em,{children:"apps/client/src/app/app.config.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { provideTranslocoMessageformat } from '@jsverse/transloco-messageformat';\n\n// ...\n\nimport { COMMON_FORMLY_FIELDS } from '@nestjs-mod-fullstack/common-angular';\nimport { FILES_FORMLY_FIELDS } from '@nestjs-mod-fullstack/files-angular';\n\n// ...\n\nexport const appConfig = ({ authorizerURL, minioURL }: { authorizerURL: string; minioURL: string }): ApplicationConfig => {\n  return {\n    providers: [\n      // ...\n      importProvidersFrom(\n        // ...\n        FormlyModule.forRoot({\n          // <--updates\n          types: [...FILES_FORMLY_FIELDS, ...COMMON_FORMLY_FIELDS],\n        })\n      ),\n      // ...\n      provideTranslocoLocale({\n        // <--updates\n        defaultLocale: 'en-US',\n        langToLocaleMapping: {\n          en: 'en-US',\n          ru: 'ru-RU',\n        },\n      }),\n      provideTranslocoMessageformat({\n        // <--updates\n        locales: ['en-US', 'ru-RU'],\n      }),\n      // ...\n    ],\n  };\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"10-adding-a-new-input-field-on-the-front-end-in-the-webhook-module",children:'10. Adding a new input field on the front end in the "Webhook" module'}),"\n",(0,a.jsxs)(n.p,{children:["The new form field can function as a standard ",(0,a.jsx)(n.code,{children:"type=input"})," element with the ",(0,a.jsx)(n.code,{children:"props.type=datetime-local"})," type, or as a custom ",(0,a.jsx)(n.code,{children:"type=date-input"})," field."]}),"\n",(0,a.jsxs)(n.p,{children:["Updating the file ",(0,a.jsx)(n.em,{children:"libs/core/webhook-angular/src/lib/services/webhook-form.service.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@angular/core';\nimport { TranslocoService } from '@jsverse/transloco';\nimport { UpdateWebhookDtoInterface, ValidationErrorMetadataInterface, WebhookEventInterface, WebhookScalarFieldEnumInterface } from '@nestjs-mod-fullstack/app-angular-rest-sdk';\nimport { ValidationService } from '@nestjs-mod-fullstack/common-angular';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { tap } from 'rxjs';\nimport { WebhookEventsService } from './webhook-events.service';\n\n@UntilDestroy()\n@Injectable({ providedIn: 'root' })\nexport class WebhookFormService {\n  protected events: WebhookEventInterface[] = [];\n\n  constructor(protected readonly webhookEventsService: WebhookEventsService, protected readonly translocoService: TranslocoService, protected readonly validationService: ValidationService) {}\n\n  init() {\n    return this.webhookEventsService.findMany().pipe(\n      tap((events) => {\n        this.events = events;\n      })\n    );\n  }\n\n  getFormlyFields(options?: {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    data?: UpdateWebhookDtoInterface;\n    errors?: ValidationErrorMetadataInterface[];\n  }): FormlyFieldConfig[] {\n    return this.validationService.appendServerErrorsAsValidatorsToFields(\n      [\n        {\n          key: WebhookScalarFieldEnumInterface.enabled,\n          type: 'checkbox',\n          validation: {\n            show: true,\n          },\n          props: {\n            label: this.translocoService.translate(`webhook.form.fields.enabled`),\n            placeholder: 'enabled',\n            required: true,\n          },\n        },\n        {\n          key: WebhookScalarFieldEnumInterface.endpoint,\n          type: 'input',\n          validation: {\n            show: true,\n          },\n          props: {\n            label: this.translocoService.translate(`webhook.form.fields.endpoint`),\n            placeholder: 'endpoint',\n            required: true,\n          },\n        },\n        {\n          key: WebhookScalarFieldEnumInterface.eventName,\n          type: 'select',\n          validation: {\n            show: true,\n          },\n          props: {\n            label: this.translocoService.translate(`webhook.form.fields.event-name`),\n            placeholder: 'eventName',\n            required: true,\n            options: (this.events || []).map((e) => ({\n              value: e.eventName,\n              label: `${e.eventName} - ${e.description}`,\n            })),\n          },\n        },\n        {\n          key: WebhookScalarFieldEnumInterface.headers,\n          type: 'textarea',\n          validation: {\n            show: true,\n          },\n          props: {\n            label: this.translocoService.translate(`webhook.form.fields.headers`),\n            placeholder: 'headers',\n          },\n        },\n        {\n          key: WebhookScalarFieldEnumInterface.requestTimeout,\n          type: 'input',\n          validation: {\n            show: true,\n          },\n          props: {\n            type: 'number',\n            label: this.translocoService.translate(`webhook.form.fields.request-timeout`),\n            placeholder: 'requestTimeout',\n            required: false,\n          },\n        },\n        {\n          key: WebhookScalarFieldEnumInterface.workUntilDate, // <-- updates\n          type: 'date-input',\n          validation: {\n            show: true,\n          },\n          props: {\n            type: 'datetime-local',\n            label: this.translocoService.translate(`webhook.form.fields.work-until-date`),\n            placeholder: 'workUntilDate',\n            required: false,\n          },\n        },\n      ],\n      options?.errors || []\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"To convert incoming and outgoing data on the client side, you will need to create mappers, which we will describe in a specialized service."}),"\n",(0,a.jsx)(n.p,{children:"Considering the possible offset of the user's browser time zone, when converting a string with a date received from the server into a browser date object, it is necessary to take into account the offset of the browser time zone."}),"\n",(0,a.jsxs)(n.p,{children:["Create a file ",(0,a.jsx)(n.em,{children:"libs/core/webhook-angular/src/lib/services/webhook-mapper.service.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@angular/core';\nimport { WebhookInterface } from '@nestjs-mod-fullstack/app-angular-rest-sdk';\nimport { BROWSER_TIMEZONE_OFFSET, safeParseJson } from '@nestjs-mod-fullstack/common-angular';\nimport { addHours, format } from 'date-fns';\n\nexport interface WebhookModel extends Partial<Omit<WebhookInterface, 'workUntilDate' | 'createdAt' | 'updatedAt' | 'headers'>> {\n  headers?: string | null;\n  createdAt?: Date | null;\n  updatedAt?: Date | null;\n  workUntilDate?: Date | null;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class WebhookMapperService {\n  toModel(item?: WebhookInterface): WebhookModel {\n    return {\n      ...item,\n      headers: item?.headers ? JSON.stringify(item.headers) : '',\n      requestTimeout: item?.requestTimeout ? +item.requestTimeout : null,\n      workUntilDate: item?.workUntilDate ? addHours(new Date(item.workUntilDate), BROWSER_TIMEZONE_OFFSET) : null,\n      createdAt: item?.createdAt ? addHours(new Date(item.createdAt), BROWSER_TIMEZONE_OFFSET) : null,\n      updatedAt: item?.updatedAt ? addHours(new Date(item.updatedAt), BROWSER_TIMEZONE_OFFSET) : null,\n    };\n  }\n\n  toForm(model: WebhookModel) {\n    return {\n      ...model,\n      requestTimeout: model.requestTimeout ? model.requestTimeout : '',\n      workUntilDate: model.workUntilDate ? format(model.workUntilDate, 'yyyy-MM-dd HH:mm:ss') : null,\n    };\n  }\n\n  toJson(data: WebhookModel) {\n    return {\n      enabled: data.enabled === true,\n      endpoint: data.endpoint || '',\n      eventName: data.eventName || '',\n      headers: data.headers ? safeParseJson(data.headers) : null,\n      requestTimeout: data.requestTimeout ? +data.requestTimeout : null,\n      workUntilDate: data.workUntilDate ? format(new Date(data.workUntilDate), 'yyyy-MM-dd HH:mm:ss') : undefined,\n    };\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"11-connecting-a-localization-pipe-to-display-dates-on-the-front",children:"11. Connecting a localization pipe to display dates on the front"}),"\n",(0,a.jsx)(n.p,{children:"In all places where we display the date, we should add processing via a pipe."}),"\n",(0,a.jsxs)(n.p,{children:["Example of adding a pipe ",(0,a.jsx)(n.em,{children:"apps/client/src/app/app.component.html"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:"<nz-layout class=\"layout_\n  \x3c!-- ... --\x3e\n  <nz-footer class=\"flex justify-between_\n    \x3c!-- ... --\x3e\n    <div id=\"serverTime_{{ (serverTime$ | async)! | translocoDate : { dateStyle: 'medium', timeStyle: 'medium' } }}</div>\n  </nz-footer>\n</nz-layout>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"12-adaptation-of-tests-related-to-interface-localization",children:"12. Adaptation of tests related to interface localization"}),"\n",(0,a.jsx)(n.p,{children:"Until now, in the interface, we displayed dates in the format received from the backend."}),"\n",(0,a.jsx)(n.p,{children:"Now, thanks to the implementation of real-time localization, all data with dates is automatically adapted to the user's settings."}),"\n",(0,a.jsx)(n.p,{children:"Accordingly, all our tests that check the output data containing dates stopped working correctly."}),"\n",(0,a.jsx)(n.p,{children:"The number of necessary changes is large, but the principle of adaptation is the same everywhere."}),"\n",(0,a.jsxs)(n.p,{children:["Example of updating the test ",(0,a.jsx)(n.em,{children:"apps/client-e2e/src/ru-example.spec.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { expect, Page, test } from '@playwright/test';\nimport { join } from 'path';\nimport { setTimeout } from 'timers/promises';\n\ntest.describe('basic usage (ru)', () => {\n  // ...\n\n  // <-- updates\n  test('has serverTime format should be equal to \"21 \u0434\u0435\u043a. 2024 \u0433., 13:56:00\" without \"13:56:00\"', async () => {\n    await page.goto('/', {\n      timeout: 7000,\n    });\n\n    await setTimeout(4000);\n\n    const serverTime = await page.locator('#serverTime').innerText();\n    expect(\n      serverTime\n        .split(' ')\n        .filter((p, i) => i !== 4)\n        .join(' ')\n    ).toEqual(\n      new Intl.DateTimeFormat('ru-RU', {\n        dateStyle: 'medium',\n        timeStyle: 'medium',\n      })\n        .format(new Date())\n        .split(' ')\n        .filter((p, i) => i !== 4)\n        .join(' ')\n    );\n  });\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"13-generating-additional-files-updating-dictionaries-and-launching-the-infrastructure-in-development-mode",children:"13. Generating additional files, updating dictionaries and launching the infrastructure in development mode"}),"\n",(0,a.jsx)(n.p,{children:"Now we will start generating additional files, update dictionaries and activate the application infrastructure in development mode."}),"\n",(0,a.jsx)(n.p,{children:"After that, we will perform a final functionality check through E2E tests."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Commands"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run manual:prepare\nnpm run translates\nnpm run pm2-full:dev:start\nnpm run pm2-full:dev:test:e2e\n"})}),"\n",(0,a.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsxs)(n.p,{children:["Although my goal was to change the code as little as possible, it turned out to be quite a large update again, despite adding only one field with the ",(0,a.jsx)(n.code,{children:"Date"})," type."]}),"\n",(0,a.jsx)(n.p,{children:"New field types rarely need to be added, because before starting a project, a thorough analysis of future tasks is usually carried out and the main types of objects are determined, for which the corresponding input and output components are developed."}),"\n",(0,a.jsx)(n.p,{children:"At the moment, the project provides examples of working with various data types: string values, numbers, dictionaries, switches, files and date-time."}),"\n",(0,a.jsxs)(n.p,{children:["These types are quite sufficient for creating a small ",(0,a.jsx)(n.code,{children:"CRM"})," system."]}),"\n",(0,a.jsxs)(n.p,{children:["If additional customization is needed, you can look at the implementation of custom components for ",(0,a.jsx)(n.code,{children:"file"})," and ",(0,a.jsx)(n.code,{children:"date-time"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"plans",children:"Plans"}),"\n",(0,a.jsxs)(n.p,{children:["The main aspects of writing typical ",(0,a.jsx)(n.code,{children:"REST"})," code have already been covered in previous articles."]}),"\n",(0,a.jsxs)(n.p,{children:["I intentionally did not touch upon the issues of queue integration and working with microservices, as they deserve separate series of articles not related to the current ",(0,a.jsx)(n.code,{children:"REST"})," boilerplate."]}),"\n",(0,a.jsxs)(n.p,{children:["To date, the production part of the project is tightly linked to the creation of ",(0,a.jsx)(n.code,{children:"Docker"})," images and deployment to ",(0,a.jsx)(n.code,{children:"Kubernetes"}),", which can be excessively complex for many frontend and backend developers."]}),"\n",(0,a.jsxs)(n.p,{children:["In the next article, I will try to describe a simplified approach to ",(0,a.jsx)(n.code,{children:"DevOps"}),", focused on free or shareware cloud solutions."]}),"\n",(0,a.jsx)(n.h3,{id:"links",children:"Links"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})," - website from the post"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/4f495dbd6b9b4efd8d8e13a60c5f66b895c483af..ac8ce1e94a24f912f73c5eb1950458ebc77c12d4",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/4f495dbd6b9b4efd8d8e13a60c5f66b895c483af..ac8ce1e94a24f912f73c5eb1950458ebc77c12d4"})," - current changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/12537857829/artifacts/2369701323",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/12537857829/artifacts/2369701323"})," - video from E2E frontend tests"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"ps",children:"P.S."}),"\n",(0,a.jsx)(n.p,{children:"Happy New Year 2025! I wish you all health, love and good luck! \ud83e\udd73\ud83e\udd73\ud83e\udd73"}),"\n",(0,a.jsx)(n.p,{children:"#angular #timezone #nestjsmod #fullstack\n#2024-12-29"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(6540);const o={},i=a.createContext(o);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);