"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[458],{3801:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=t(4848),o=t(8453);const a={},i="Validating REST requests in a NestJS application and displaying errors in Angular application forms",s={id:"en-posts/fullstack/2024-11-24",title:"Validating REST requests in a NestJS application and displaying errors in Angular application forms",description:"In this post I will add validation of REST requests in NestJS application and their display in forms of Angular application.",source:"@site/docs/en-posts/fullstack/2024-11-24.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-11-24",permalink:"/docs/en-posts/fullstack/2024-11-24",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-11-24.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Getting server time via WebSockets and displaying It in Angular application",permalink:"/docs/en-posts/fullstack/2024-11-21"},next:{title:"Adding multi-language support to NestJS and Angular applications",permalink:"/docs/en-posts/fullstack/2024-12-03"}},l={},d=[{value:"1. Install a new code generator",id:"1-install-a-new-code-generator",level:3},{value:"2. Create a NestJS module to store the code needed for validation",id:"2-create-a-nestjs-module-to-store-the-code-needed-for-validation",level:3},{value:"3. We correct types throughout the project, since the new generator creates types with different names and contents",id:"3-we-correct-types-throughout-the-project-since-the-new-generator-creates-types-with-different-names-and-contents",level:3},{value:"4. In the web hook creation and editing form, we display server errors",id:"4-in-the-web-hook-creation-and-editing-form-we-display-server-errors",level:3},{value:"5. Create a server E2E test to check the validation",id:"5-create-a-server-e2e-test-to-check-the-validation",level:3},{value:"6. Create a client E2E test to check the validation",id:"6-create-a-client-e2e-test-to-check-the-validation",level:3},{value:"7. We launch the infrastructure with applications in development mode and check the operation through E2E tests",id:"7-we-launch-the-infrastructure-with-applications-in-development-mode-and-check-the-operation-through-e2e-tests",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"validating-rest-requests-in-a-nestjs-application-and-displaying-errors-in-angular-application-forms",children:"Validating REST requests in a NestJS application and displaying errors in Angular application forms"}),"\n",(0,r.jsx)(n.p,{children:"In this post I will add validation of REST requests in NestJS application and their display in forms of Angular application."}),"\n",(0,r.jsx)(n.h3,{id:"1-install-a-new-code-generator",children:"1. Install a new code generator"}),"\n",(0,r.jsxs)(n.p,{children:["Install a new ",(0,r.jsx)(n.code,{children:"DTO"})," generator from the ",(0,r.jsx)(n.code,{children:"Prisma"})," schema and remove the old one, since the old one does not add validation decorators using ",(0,r.jsx)(n.code,{children:"class-validator"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Commands"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @brakebein/prisma-generator-nestjs-dto@1.24.0-beta5\nnpm uninstall --save-dev prisma-class-generator\n"})}),"\n",(0,r.jsx)(n.p,{children:"We delete the old generated code and create a new one."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Commands"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"rm -rf libs/core/webhook/src/lib/generated\nrm -rf apps/server/src/app/generated\nnpm run prisma:generate\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-create-a-nestjs-module-to-store-the-code-needed-for-validation",children:"2. Create a NestJS module to store the code needed for validation"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Commands"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./node_modules/.bin/nx g @nestjs-mod/schematics:library validation --buildable --publishable --directory=libs/core/validation --simpleName=true --projectNameAndRootFormat=as-provided --strict=true\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Console output"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ ./node_modules/.bin/nx g @nestjs-mod/schematics:library validation --buildable --publishable --directory=libs/core/validation --simpleName=true --projectNameAndRootFormat=as-provided --strict=true\n\n NX  Generating @nestjs-mod/schematics:library\n\nCREATE libs/core/validation/tsconfig.json\nCREATE libs/core/validation/src/index.ts\nCREATE libs/core/validation/tsconfig.lib.json\nCREATE libs/core/validation/README.md\nCREATE libs/core/validation/package.json\nCREATE libs/core/validation/project.json\nCREATE libs/core/validation/.eslintrc.json\nCREATE libs/core/validation/jest.config.ts\nCREATE libs/core/validation/tsconfig.spec.json\nUPDATE tsconfig.base.json\nCREATE libs/core/validation/src/lib/validation.configuration.ts\nCREATE libs/core/validation/src/lib/validation.constants.ts\nCREATE libs/core/validation/src/lib/validation.environments.ts\nCREATE libs/core/validation/src/lib/validation.module.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Module environment variables"})}),"\n",(0,r.jsx)(n.p,{children:"Add an environment variable to enable and disable global input data validation."}),"\n",(0,r.jsx)(n.p,{children:"Since the fields in the database have their own validation and if we want to check the correctness of the validation at the database level, then checking the input data in the backend will not allow us to do this, for such a check during the development and testing of functionality, you need to be able to temporarily disable validation at the entrance to the backend."}),"\n",(0,r.jsx)(n.p,{children:"The module comes with a built-in filter for correct display of errors, if you need to customize it, you can create your own version and at the same time disable the filter built into the module."}),"\n",(0,r.jsxs)(n.p,{children:["Updating the file ",(0,r.jsx)(n.em,{children:"libs/core/validation/src/lib/validation.environments.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { BooleanTransformer, EnvModel, EnvModelProperty } from '@nestjs-mod/common';\n\n@EnvModel()\nexport class ValidationEnvironments {\n  @EnvModelProperty({\n    description: 'Use pipes.',\n    transform: new BooleanTransformer(),\n    default: true,\n    hidden: true,\n  })\n  usePipes?: boolean;\n\n  @EnvModelProperty({\n    description: 'Use filters.',\n    transform: new BooleanTransformer(),\n    default: true,\n    hidden: true,\n  })\n  useFilters?: boolean;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example of environment variables:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Key"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Sources"}),(0,r.jsx)(n.th,{children:"Constraints"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Value"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"usePipes"})}),(0,r.jsx)(n.td,{children:"Use pipes."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"obj['usePipes']"}),", ",(0,r.jsx)(n.code,{children:"process.env['SERVER_VALIDATION_USE_PIPES']"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"optional"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"useFilters"})}),(0,r.jsx)(n.td,{children:"Use filters."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"obj['useFilters']"}),", ",(0,r.jsx)(n.code,{children:"process.env['SERVER_VALIDATION_USE_FILTERS']"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"optional"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Module Configuration"})}),"\n",(0,r.jsxs)(n.p,{children:["Currently there is only one parameter here, this is the configuration for creating ",(0,r.jsx)(n.code,{children:"ValidationPipe"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Updating the file ",(0,r.jsx)(n.em,{children:"libs/core/validation/src/lib/validation.configuration.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { ConfigModel, ConfigModelProperty } from '@nestjs-mod/common';\nimport { ValidationPipeOptions } from '@nestjs/common';\n\n@ConfigModel()\nexport class ValidationConfiguration {\n  @ConfigModelProperty({\n    description: 'Validation pipe options',\n  })\n  pipeOptions?: ValidationPipeOptions;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Class with module errors"})}),"\n",(0,r.jsxs)(n.p,{children:["Since at this stage the project is being developed as a ",(0,r.jsx)(n.code,{children:"REST"})," backend, which is available on the frontend as an ",(0,r.jsx)(n.code,{children:"OpenApi"})," library, the class with errors is also published in the ",(0,r.jsx)(n.code,{children:"Swagger"})," schema."]}),"\n",(0,r.jsxs)(n.p,{children:["In order to make the error description more detailed, it uses decorators that add meta information that will be output to the ",(0,r.jsx)(n.code,{children:"Swagger"})," schema."]}),"\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.em,{children:"libs/core/validation/src/lib/validation.errors.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { ValidationError as CvValidationError } from 'class-validator';\n\nexport enum ValidationErrorEnum {\n  COMMON = 'VALIDATION-000',\n}\n\nexport const VALIDATION_ERROR_ENUM_TITLES: Record<ValidationErrorEnum, string> = {\n  [ValidationErrorEnum.COMMON]: 'Validation error',\n};\n\nexport class ValidationErrorMetadataConstraint {\n  @ApiProperty({\n    type: String,\n  })\n  name!: string;\n\n  @ApiProperty({\n    type: String,\n  })\n  description!: string;\n\n  constructor(options?: ValidationErrorMetadataConstraint) {\n    Object.assign(this, options);\n  }\n}\n\nexport class ValidationErrorMetadata {\n  @ApiProperty({\n    type: String,\n  })\n  property!: string;\n\n  @ApiProperty({\n    type: () => ValidationErrorMetadataConstraint,\n    isArray: true,\n  })\n  constraints!: ValidationErrorMetadataConstraint[];\n\n  @ApiPropertyOptional({\n    type: () => ValidationErrorMetadata,\n    isArray: true,\n  })\n  children?: ValidationErrorMetadata[];\n\n  constructor(options?: ValidationErrorMetadata) {\n    Object.assign(this, options);\n  }\n\n  static fromClassValidatorValidationErrors(errors?: CvValidationError[]): ValidationErrorMetadata[] | undefined {\n    return errors?.map(\n      (error) =>\n        new ValidationErrorMetadata({\n          property: error.property,\n          constraints: Object.entries(error.constraints || {}).map(\n            ([key, value]) =>\n              new ValidationErrorMetadataConstraint({\n                name: key,\n                description: value,\n              })\n          ),\n          ...(error.children?.length\n            ? {\n                children: this.fromClassValidatorValidationErrors(error.children),\n              }\n            : {}),\n        })\n    );\n  }\n}\n\nexport class ValidationError extends Error {\n  @ApiProperty({\n    type: String,\n    description: Object.entries(VALIDATION_ERROR_ENUM_TITLES)\n      .map(([key, value]) => `${value} (${key})`)\n      .join(', '),\n    example: VALIDATION_ERROR_ENUM_TITLES[ValidationErrorEnum.COMMON],\n  })\n  override message: string;\n\n  @ApiProperty({\n    enum: ValidationErrorEnum,\n    enumName: 'ValidationErrorEnum',\n    example: ValidationErrorEnum.COMMON,\n  })\n  code = ValidationErrorEnum.COMMON;\n\n  @ApiPropertyOptional({ type: ValidationErrorMetadata, isArray: true })\n  metadata?: ValidationErrorMetadata[];\n\n  constructor(message?: string | ValidationErrorEnum, code?: ValidationErrorEnum, metadata?: CvValidationError[]) {\n    const messageAsCode = Boolean(message && Object.values(ValidationErrorEnum).includes(message as ValidationErrorEnum));\n    const preparedCode = messageAsCode ? (message as ValidationErrorEnum) : code;\n    const preparedMessage = preparedCode ? VALIDATION_ERROR_ENUM_TITLES[preparedCode] : message;\n\n    code = preparedCode || ValidationErrorEnum.COMMON;\n    message = preparedMessage || VALIDATION_ERROR_ENUM_TITLES[code];\n\n    super(message);\n\n    this.code = code;\n    this.message = message;\n    this.metadata = ValidationErrorMetadata.fromClassValidatorValidationErrors(metadata);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Filter for module errors"})}),"\n",(0,r.jsxs)(n.p,{children:["To convert module errors to ",(0,r.jsx)(n.code,{children:"Http"})," error, create ",(0,r.jsx)(n.code,{children:"ValidationExceptionsFilter"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.em,{children:"libs/core/validation/src/lib/validation.filter.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { ArgumentsHost, Catch, HttpException, HttpStatus, Logger } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { ValidationError } from './validation.errors';\n\n@Catch(ValidationError)\nexport class ValidationExceptionsFilter extends BaseExceptionFilter {\n  private logger = new Logger(ValidationExceptionsFilter.name);\n\n  override catch(exception: ValidationError, host: ArgumentsHost) {\n    if (exception instanceof ValidationError) {\n      this.logger.error(exception, exception.stack);\n      super.catch(\n        new HttpException(\n          {\n            code: exception.code,\n            message: exception.message,\n            metadata: exception.metadata,\n          },\n          HttpStatus.BAD_REQUEST\n        ),\n        host\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.logger.error(exception, (exception as any)?.stack);\n      super.catch(exception, host);\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"NestJS-mod module"})}),"\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.em,{children:"libs/core/validation/src/lib/validation.module.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { createNestModule, getFeatureDotEnvPropertyNameFormatter, NestModuleCategory } from '@nestjs-mod/common';\nimport { Provider, ValidationPipe } from '@nestjs/common';\nimport { APP_FILTER, APP_PIPE } from '@nestjs/core';\nimport { ValidationConfiguration } from './validation.configuration';\nimport { VALIDATION_FEATURE, VALIDATION_MODULE } from './validation.constants';\nimport { ValidationEnvironments } from './validation.environments';\nimport { ValidationExceptionsFilter } from './validation.filter';\nimport { ValidationError, ValidationErrorEnum } from './validation.errors';\n\nexport const { ValidationModule } = createNestModule({\n  moduleName: VALIDATION_MODULE,\n  moduleCategory: NestModuleCategory.feature,\n  configurationModel: ValidationConfiguration,\n  staticEnvironmentsModel: ValidationEnvironments,\n  providers: ({ staticEnvironments }) => {\n    const providers: Provider[] = [];\n    if (staticEnvironments.usePipes) {\n      providers.push({\n        provide: APP_PIPE,\n        useValue: new ValidationPipe({\n          transform: true,\n          whitelist: true,\n          validationError: {\n            target: false,\n            value: false,\n          },\n          exceptionFactory: (errors) => new ValidationError(ValidationErrorEnum.COMMON, undefined, errors),\n        }),\n      });\n    }\n    if (staticEnvironments.useFilters) {\n      providers.push({\n        provide: APP_FILTER,\n        useClass: ValidationExceptionsFilter,\n      });\n    }\n    return providers;\n  },\n  wrapForRootAsync: (asyncModuleOptions) => {\n    if (!asyncModuleOptions) {\n      asyncModuleOptions = {};\n    }\n    const FomatterClass = getFeatureDotEnvPropertyNameFormatter(VALIDATION_FEATURE);\n    Object.assign(asyncModuleOptions, {\n      environmentsOptions: {\n        propertyNameFormatters: [new FomatterClass()],\n        name: VALIDATION_FEATURE,\n      },\n    });\n\n    return { asyncModuleOptions };\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-we-correct-types-throughout-the-project-since-the-new-generator-creates-types-with-different-names-and-contents",children:"3. We correct types throughout the project, since the new generator creates types with different names and contents"}),"\n",(0,r.jsx)(n.p,{children:"We start regeneration of all SDK and other additional code, during generation type errors will be displayed, it is necessary to correct everything and re-run regeneration and so on until all errors are corrected."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Commands"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run manual:prepare\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-in-the-web-hook-creation-and-editing-form-we-display-server-errors",children:"4. In the web hook creation and editing form, we display server errors"}),"\n",(0,r.jsxs)(n.p,{children:["To display errors in the ",(0,r.jsx)(n.code,{children:"Formly"})," form, we use dynamic creation of validators that always return an error and put in the error text what we received from the backend."]}),"\n",(0,r.jsx)(n.p,{children:"An example of a server response with errors:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "code": "VALIDATION-000",\n  "message": "Validation error",\n  "metadata": [\n    {\n      "property": "eventName",\n      "constraints": [\n        {\n          "name": "isNotEmpty",\n          "description": "eventName should not be empty"\n        }\n      ]\n    },\n    {\n      "property": "endpoint",\n      "constraints": [\n        {\n          "name": "isNotEmpty",\n          "description": "endpoint should not be empty"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Updating the file ",(0,r.jsx)(n.em,{children:"libs/core/webhook-angular/src/lib/forms/webhook-form/webhook-form.component.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {\n  //...\n  ValidationErrorEnumInterface,\n  ValidationErrorInterface,\n  ValidationErrorMetadataInterface,\n} from '@nestjs-mod-fullstack/app-angular-rest-sdk';\n\n//...\n\n@UntilDestroy()\n@Component({\n  standalone: true,\n  imports: [FormlyModule, NzFormModule, NzInputModule, NzButtonModule, FormsModule, ReactiveFormsModule, AsyncPipe],\n  selector: 'webhook-form',\n  templateUrl: './webhook-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WebhookFormComponent implements OnInit {\n  //...\n\n  constructor(\n    @Optional()\n    @Inject(NZ_MODAL_DATA)\n    private readonly nzModalData: WebhookFormComponent,\n    private readonly webhookService: WebhookService,\n    private readonly webhookEventsService: WebhookEventsService,\n    private readonly nzMessageService: NzMessageService\n  ) {}\n\n  //...\n\n  createOne() {\n    return this.webhookService.createOne(this.toJson(this.form.value)).pipe(catchError((err) => this.catchAndProcessServerError(err)));\n  }\n\n  updateOne() {\n    if (!this.id) {\n      throw new Error('id not set');\n    }\n    return this.webhookService.updateOne(this.id, this.toJson(this.form.value)).pipe(catchError((err) => this.catchAndProcessServerError(err)));\n  }\n\n  private setFormlyFields(errors?: ValidationErrorMetadataInterface[]) {\n    this.formlyFields$.next(\n      this.appendServerErrorsAsValidatorsToFields(\n        [\n          //...\n          {\n            key: 'requestTimeout',\n            type: 'input',\n            validation: {\n              show: true,\n            },\n            props: {\n              type: 'number',\n              label: `webhook.form.requestTimeout`,\n              placeholder: 'requestTimeout',\n              required: false,\n            },\n          },\n        ],\n        errors\n      )\n    );\n  }\n\n  private appendServerErrorsAsValidatorsToFields(fields: FormlyFieldConfig[], errors?: ValidationErrorMetadataInterface[]) {\n    return (fields || []).map((f: FormlyFieldConfig) => {\n      const error = errors?.find((e) => e.property === f.key);\n      if (error) {\n        f.validators = Object.fromEntries(\n          error.constraints.map((c) => {\n            return [\n              c.name === 'isNotEmpty' ? 'required' : c.name,\n              {\n                expression: () => false,\n                message: () => c.description,\n              },\n            ];\n          })\n        );\n      }\n      return f;\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private catchAndProcessServerError(err: any) {\n    const error = err.error as ValidationErrorInterface;\n    if (error.code.includes(ValidationErrorEnumInterface.VALIDATION_000)) {\n      this.setFormlyFields(error.metadata);\n      return of(null);\n    }\n    return throwError(() => err);\n  }\n\n  //...\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-create-a-server-e2e-test-to-check-the-validation",children:"5. Create a server E2E test to check the validation"}),"\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.em,{children:"apps/server-e2e/src/server/validation.spec.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { RestClientHelper } from '@nestjs-mod-fullstack/testing';\nimport { AxiosError } from 'axios';\n\ndescribe('Validation', () => {\n  jest.setTimeout(60000);\n\n  const user1 = new RestClientHelper();\n\n  beforeAll(async () => {\n    await user1.createAndLoginAsUser();\n  });\n\n  it('should catch error on create new webhook as user1', async () => {\n    try {\n      await user1.getWebhookApi().webhookControllerCreateOne({\n        enabled: false,\n        endpoint: '',\n        eventName: '',\n      });\n    } catch (err) {\n      expect((err as AxiosError).response?.data).toEqual({\n        code: 'VALIDATION-000',\n        message: 'Validation error',\n        metadata: [\n          {\n            property: 'eventName',\n            constraints: [\n              {\n                name: 'isNotEmpty',\n                description: 'eventName should not be empty',\n              },\n            ],\n          },\n          {\n            property: 'endpoint',\n            constraints: [\n              {\n                name: 'isNotEmpty',\n                description: 'endpoint should not be empty',\n              },\n            ],\n          },\n        ],\n      });\n    }\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6-create-a-client-e2e-test-to-check-the-validation",children:"6. Create a client E2E test to check the validation"}),"\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.em,{children:"apps/client-e2e/src/validation.spec.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { faker } from '@faker-js/faker';\nimport { expect, Page, test } from '@playwright/test';\nimport { get } from 'env-var';\nimport { join } from 'path';\nimport { setTimeout } from 'timers/promises';\n\ntest.describe('Validation', () => {\n  test.describe.configure({ mode: 'serial' });\n\n  const user = {\n    email: faker.internet.email({\n      provider: 'example.fakerjs.dev',\n    }),\n    password: faker.internet.password({ length: 8 }),\n    site: `http://${faker.internet.domainName()}`,\n  };\n  let page: Page;\n\n  test.beforeAll(async ({ browser }) => {\n    page = await browser.newPage({\n      viewport: { width: 1920, height: 1080 },\n      recordVideo: {\n        dir: join(__dirname, 'video'),\n        size: { width: 1920, height: 1080 },\n      },\n    });\n    await page.goto('/', {\n      timeout: 7000,\n    });\n    await page.evaluate((authorizerURL) => localStorage.setItem('authorizerURL', authorizerURL), get('SERVER_AUTHORIZER_URL').required().asString());\n    await page.evaluate((minioURL) => localStorage.setItem('minioURL', minioURL), get('SERVER_MINIO_URL').required().asString());\n  });\n\n  test.afterAll(async () => {\n    await setTimeout(1000);\n    await page.close();\n  });\n\n  test('sign up as user', async () => {\n    await page.goto('/sign-up', {\n      timeout: 7000,\n    });\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=email]').click();\n    await page.keyboard.type(user.email.toLowerCase(), {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=email]')).toHaveValue(user.email.toLowerCase());\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=password]')).toHaveValue(user.password);\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]')).toHaveValue(user.password);\n\n    await expect(page.locator('auth-sign-up-form').locator('button[type=submit]')).toHaveText('Sign-up');\n\n    await page.locator('auth-sign-up-form').locator('button[type=submit]').click();\n\n    await setTimeout(5000);\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]')).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n  });\n\n  test('should catch error on create new webhook', async () => {\n    await page.locator('webhook-grid').locator('button').first().click();\n\n    await setTimeout(7000);\n\n    await page.locator('[nz-modal-footer]').locator('button').last().click();\n\n    await setTimeout(4000);\n\n    await expect(page.locator('webhook-form').locator('formly-validation-message').first()).toContainText('endpoint should not be empty');\n    await expect(page.locator('webhook-form').locator('formly-validation-message').last()).toContainText('eventName should not be empty');\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"7-we-launch-the-infrastructure-with-applications-in-development-mode-and-check-the-operation-through-e2e-tests",children:"7. We launch the infrastructure with applications in development mode and check the operation through E2E tests"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Commands"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run pm2-full:dev:start\nnpm run pm2-full:dev:test:e2e\n"})}),"\n",(0,r.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["In the current post, I added a module to the backend to enable serialization and validation of input ",(0,r.jsx)(n.code,{children:"REST"})," data."]}),"\n",(0,r.jsx)(n.p,{children:"The code on the frontend is not unified and is implemented specifically in one form, with a large number of forms with such processing, it will be necessary to move the common code to a separate file."}),"\n",(0,r.jsxs)(n.p,{children:["The method I chose to create dynamic errors for ",(0,r.jsx)(n.code,{children:"Formly"})," forms based on responses from the backend may not seem like a very beautiful solution, but I could not come up with a simpler and more working solution, perhaps as the project develops, another method will appear."]}),"\n",(0,r.jsx)(n.h3,{id:"plans",children:"Plans"}),"\n",(0,r.jsx)(n.p,{children:"In the next post I will add support for multiple languages \u200b\u200bfor backend and frontend applications..."}),"\n",(0,r.jsx)(n.h3,{id:"links",children:"Links"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})," - website from the post"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/a5efa43f571a7b48402275e1ee6a9b1e325d0eb0..2c14d02af439c0884a4052a3b0197a9ee94c571d",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/a5efa43f571a7b48402275e1ee6a9b1e325d0eb0..2c14d02af439c0884a4052a3b0197a9ee94c571d"})," - current changes"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"#angular #validation #nestjsmod #fullstack\n#2024-11-24"})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(6540);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);