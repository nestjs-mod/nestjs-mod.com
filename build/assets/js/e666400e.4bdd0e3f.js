"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[6739],{9849:(o,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var t=e(4848),i=e(8453);const r={sidebar_position:2},s="Configuration model",a={id:"guides/info/config-model",title:"Configuration model",description:"Decorators ConfigModel, ConfigModelProperty to describe the available module settings and the configTransform function to serialize and check it. The values must be described in code.",source:"@site/docs/guides/info/2-config-model.md",sourceDirName:"guides/info",slug:"/guides/info/config-model",permalink:"/docs/guides/info/config-model",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/guides/info/2-config-model.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guidesSidebar",previous:{title:"Module types",permalink:"/docs/guides/info/module-types"},next:{title:"Environment variables",permalink:"/docs/guides/info/env-model"}},c={},d=[{value:"Example of a regular NestJS application with configuration",id:"example-of-a-regular-nestjs-application-with-configuration",level:3}];function p(o){const n={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...o.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"configuration-model",children:"Configuration model"}),"\n",(0,t.jsxs)(n.p,{children:["Decorators ",(0,t.jsx)(n.code,{children:"ConfigModel"}),", ",(0,t.jsx)(n.code,{children:"ConfigModelProperty"})," to describe the available module settings and the ",(0,t.jsx)(n.code,{children:"configTransform"})," function to serialize and check it. The values must be described in code."]}),"\n",(0,t.jsx)(n.h3,{id:"example-of-a-regular-nestjs-application-with-configuration",children:"Example of a regular NestJS application with configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import {\n  ConfigModel,\n  ConfigModelProperty,\n  configTransform,\n} from "@nestjs-mod/common";\nimport { DynamicModule, Module } from "@nestjs/common";\nimport { NestFactory } from "@nestjs/core";\nimport { IsNotEmpty } from "class-validator";\n\n// Describe the configuration class\n@ConfigModel()\nclass AppConfig {\n  @ConfigModelProperty()\n  @IsNotEmpty()\n  option!: string;\n}\n\n// Describe a module that receives configuration values when calling the forRoot method\n@Module({ providers: [AppConfig] })\nclass AppModule {\n  static forRoot(config: Partial<AppConfig>): DynamicModule {\n    return {\n      module: AppModule,\n      providers: [\n        {\n          provide: `${AppConfig.name}_loader`,\n          useFactory: async (emptyAppConfig: AppConfig) => {\n            if (config.constructor !== Object) {\n              Object.setPrototypeOf(emptyAppConfig, config);\n            }\n            const obj = await configTransform({\n              model: AppConfig,\n              data: config,\n            });\n            Object.assign(emptyAppConfig, obj.data);\n          },\n          inject: [AppConfig],\n        },\n      ],\n    };\n  }\n}\n\n// We try to launch the application and do not pass anything to the module\nasync function bootstrap1() {\n  const app = await NestFactory.create(AppModule.forRoot({}));\n  await app.listen(3000);\n}\n\n// We get a validation error\n// throw new ConfigModelValidationErrors(validateErrors);\n// isNotEmpty: option should not be empty\nbootstrap1();\n\n// We try to launch the application and at the same time pass configuration values to the module\nasync function bootstrap2() {\n  const app = await NestFactory.create(AppModule.forRoot({ option: "value1" }));\n  console.log(app.get(AppConfig)); // output: { option: \'value1\' }\n  await app.listen(3000);\n}\n\n// No error\nbootstrap2();\n'})})]})}function l(o={}){const{wrapper:n}={...(0,i.R)(),...o.components};return n?(0,t.jsx)(n,{...o,children:(0,t.jsx)(p,{...o})}):p(o)}},8453:(o,n,e)=>{e.d(n,{R:()=>s,x:()=>a});var t=e(6540);const i={},r=t.createContext(i);function s(o){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof o?o(n):{...n,...o}}),[n,o])}function a(o){let n;return n=o.disableParentContext?"function"==typeof o.components?o.components(i):o.components||i:s(o.components),t.createElement(r.Provider,{value:n},o.children)}}}]);