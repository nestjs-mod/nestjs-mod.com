"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[9627],{4952:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=s(4848),o=s(8453);const i={},r="Accelerating the deployment of NestJS and Angular using public Github runners and creating intermediate Docker images",a={id:"en-posts/fullstack/2024-09-08",title:"Accelerating the deployment of NestJS and Angular using public Github runners and creating intermediate Docker images",description:"In this post, I will set up the build of Docker images:",source:"@site/docs/en-posts/fullstack/2024-09-08.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-09-08",permalink:"/docs/en-posts/fullstack/2024-09-08",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-09-08.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Adding the CI/CD config for deployment NestJS and Angular applications to a dedicated server using GitHub Actions",permalink:"/docs/en-posts/fullstack/2024-08-26"},next:{title:"Installing Kubernetes via MicroK8s and configuring the deployment of NestJS and Angular applications",permalink:"/docs/en-posts/fullstack/2024-09-13"}},l={},c=[{value:"1. Creating a Docker image with all dependencies",id:"1-creating-a-docker-image-with-all-dependencies",level:3},{value:"2. Creating a basic Docker image to run a NestJS application",id:"2-creating-a-basic-docker-image-to-run-a-nestjs-application",level:3},{value:"3. Creating a Docker image to run the NestJS application",id:"3-creating-a-docker-image-to-run-the-nestjs-application",level:3},{value:"4. Creating a Docker image to run migrations to databases",id:"4-creating-a-docker-image-to-run-migrations-to-databases",level:3},{value:"5. Creating a Docker image to run E2E tests",id:"5-creating-a-docker-image-to-run-e2e-tests",level:3},{value:"6. The client code is sent via Nginx, so we create a Docker image with embedded Nginx and static files",id:"6-the-client-code-is-sent-via-nginx-so-we-create-a-docker-image-with-embedded-nginx-and-static-files",level:3},{value:"7. Updating files to run in &quot;Docker Compose&quot; mode",id:"7-updating-files-to-run-in-docker-compose-mode",level:3},{value:"8. Creating a Bash script for building local Docker images",id:"8-creating-a-bash-script-for-building-local-docker-images",level:3},{value:"9. To run the updated Docker Compose mode, all npm scripts must be updated",id:"9-to-run-the-updated-docker-compose-mode-all-npm-scripts-must-be-updated",level:3},{value:"10. Launching the updated &quot;Docker Compose&quot; mode with built-in launch of E2E tests",id:"10-launching-the-updated-docker-compose-mode-with-built-in-launch-of-e2e-tests",level:3},{value:"11. We display a list of the collected images and check that they are all built successfully",id:"11-we-display-a-list-of-the-collected-images-and-check-that-they-are-all-built-successfully",level:3},{value:"12. We display a list of running containers",id:"12-we-display-a-list-of-running-containers",level:3},{value:"13. Checking the result of running E2E tests",id:"13-checking-the-result-of-running-e2e-tests",level:3},{value:"14. Modifying the CI/CD configuration for deploying applications to a dedicated server",id:"14-modifying-the-cicd-configuration-for-deploying-applications-to-a-dedicated-server",level:3},{value:"15. Commit the updates to the repository and see the result of the work in &quot;Github&quot;",id:"15-commit-the-updates-to-the-repository-and-see-the-result-of-the-work-in-github",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"accelerating-the-deployment-of-nestjs-and-angular-using-public-github-runners-and-creating-intermediate-docker-images",children:"Accelerating the deployment of NestJS and Angular using public Github runners and creating intermediate Docker images"}),"\n",(0,t.jsx)(n.p,{children:"In this post, I will set up the build of Docker images:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"NestJS and Angular Application Builder;"}),"\n",(0,t.jsx)(n.li,{children:"Database migrator using Flyway;"}),"\n",(0,t.jsx)(n.li,{children:"Test runner for running frontend and backend E2E tests;"}),"\n",(0,t.jsx)(n.li,{children:"Nginx with built-in Angular application statics;"}),"\n",(0,t.jsx)(n.li,{children:"NestJS application."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"1-creating-a-docker-image-with-all-dependencies",children:"1. Creating a Docker image with all dependencies"}),"\n",(0,t.jsx)(n.p,{children:"In this post, the code and Docker images will be collected on public runners, which have a limit per month in total execution time and with intensive development, this limit can easily be exhausted, so you need to be prepared to move to your own runner."}),"\n",(0,t.jsx)(n.p,{children:"In the previous post, dependencies were installed on the host machine in which the code was assembled, this was done as an example of how it is possible, but it is not necessary to do so."}),"\n",(0,t.jsx)(n.p,{children:"A minimum number of programs and libraries should be installed on the host machine, since any third-party software can carry malware, so the code must be assembled inside a specialized Docker container."}),"\n",(0,t.jsx)(n.p,{children:"Since we rarely install dependencies, we can create a special Docker image that will be used when building the code."}),"\n",(0,t.jsxs)(n.p,{children:["The folder with the source files for the build and the folder for the assembled files are mounted as a ",(0,t.jsx)(n.code,{children:"volume"})," in the container at startup."]}),"\n",(0,t.jsxs)(n.p,{children:["This Docker image will be rebuild when the version of the root ",(0,t.jsx)(n.code,{children:"package.json"})," is changed."]}),"\n",(0,t.jsxs)(n.p,{children:["Creating the ",(0,t.jsx)(n.code,{children:".docker/builder.Dockerfile"})," file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'FROM node:20.16.0-alpine AS builder\nWORKDIR /usr/src/app\n\n# Copy all files in repository to image\nCOPY --chown=node:node . .\n\n# Install utils\nRUN apk add dumb-init\n# Clean up\nRUN rm -rf /var/cache/apk/*\n# Install deps\nRUN npm install --prefer-offline --no-audit --progress=false\n# Some utilities require a ".env" file\nRUN echo \'\' > .env\n\nFROM node:20.16.0-alpine\nWORKDIR /usr/src/app\n\n# Disable nx daemon\nENV NX_DAEMON=false\n# Disable the statics server built into NestJS\nENV DISABLE_SERVE_STATIC=true\n\n# Copy node_modules\nCOPY --from=builder /usr/src/app/node_modules /usr/src/app/node_modules\n# Copy utility for "To work as a PID 1"\nCOPY --from=builder /usr/bin/dumb-init /usr/bin/dumb-init\n# Copy the settings\nCOPY --from=builder /usr/src/app/.docker/.dockerignore /usr/src/app/.dockerignore\nCOPY --from=builder /usr/src/app/.docker/nx.json /usr/src/app/nx.json\nCOPY --from=builder /usr/src/app/package.json /usr/src/app/package.json\nCOPY --from=builder /usr/src/app/rucken.json /usr/src/app/rucken.json\nCOPY --from=builder /usr/src/app/tsconfig.base.json /usr/src/app/tsconfig.base.json\nCOPY --from=builder /usr/src/app/.env /usr/src/app/.env\n# Copy the settings for linting\nCOPY --from=builder /usr/src/app/.nxignore /usr/src/app/.nxignore\nCOPY --from=builder /usr/src/app/.eslintrc.json /usr/src/app/.eslintrc.json\nCOPY --from=builder /usr/src/app/.eslintignore /usr/src/app/.eslintignore\nCOPY --from=builder /usr/src/app/.prettierignore /usr/src/app/.prettierignore\nCOPY --from=builder /usr/src/app/.prettierrc /usr/src/app/.prettierrc\nCOPY --from=builder /usr/src/app/jest.config.ts /usr/src/app/jest.config.ts\nCOPY --from=builder /usr/src/app/jest.preset.js /usr/src/app/jest.preset.js\n\n# Install java\nRUN apk add openjdk11-jre\n# Clean up\nRUN rm -rf /var/cache/apk/*\n\n# We build the source code as the "node" user\n# and set permissions for new files: full access from outside the container\nCMD npm run build:prod\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["To build the code, you need to run the container with this image and mount the directories ",(0,t.jsx)(n.code,{children:"apps"}),", ",(0,t.jsx)(n.code,{children:"libs"})," and ",(0,t.jsx)(n.code,{children:"dist"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Launch example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker run -v ./dist:/usr/src/app/dist -v ./apps:/usr/src/app/apps -v ./libs:/usr/src/app/libs ghcr.io/nestjs-mod/nestjs-mod-fullstack-builder:latest\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-creating-a-basic-docker-image-to-run-a-nestjs-application",children:"2. Creating a basic Docker image to run a NestJS application"}),"\n",(0,t.jsx)(n.p,{children:"This image will include dependencies used in the NestJS application, this is necessary to reduce the final image and to speed up the deployment process."}),"\n",(0,t.jsxs)(n.p,{children:["This Docker image will be reassembled when the version of the root ",(0,t.jsx)(n.code,{children:"package.json"})," is changed."]}),"\n",(0,t.jsxs)(n.p,{children:["Creating a file ",(0,t.jsx)(n.code,{children:".docker/base-server.Dockerfile"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"FROM node:20.16.0-alpine AS builder\nWORKDIR /usr/src/app\n\n# Copy all files in repository to image\nCOPY --chown=node:node . .\n\n# Install utils\nRUN apk add jq dumb-init\n# Clean up\nRUN rm -rf /var/cache/apk/*\n# Remove dev dependencies info\nRUN echo $(cat package.json | jq 'del(.devDependencies)') > package.json\n# Install deps\nRUN npm install --prefer-offline --no-audit --progress=false\n# Installing utilities to generate additional files\nRUN npm install --prefer-offline --no-audit --progress=false --save-dev nx@19.5.3\nRUN npm install --prefer-offline --no-audit --progress=false --save-dev prisma@5.18.0\nRUN npm install --prefer-offline --no-audit --progress=false --save-dev prisma-class-generator@0.2.11\n# Some utilities require a \".env\" file\nRUN echo '' > .env\n\n\nFROM node:20.16.0-alpine\nWORKDIR /usr/src/app\n\n# Copy node_modules\nCOPY --from=builder /usr/src/app/node_modules /usr/src/app/node_modules\n# Copy utility for \"To work as a PID 1\"\nCOPY --from=builder /usr/bin/dumb-init /usr/bin/dumb-init\n# Copy the settings\nCOPY --from=builder /usr/src/app/.docker/.dockerignore /usr/src/app/.dockerignore\nCOPY --from=builder /usr/src/app/.docker/nx.json /usr/src/app/nx.json\nCOPY --from=builder /usr/src/app/package.json /usr/src/app/package.json\nCOPY --from=builder /usr/src/app/rucken.json /usr/src/app/rucken.json\nCOPY --from=builder /usr/src/app/tsconfig.base.json /usr/src/app/tsconfig.base.json\nCOPY --from=builder /usr/src/app/.env /usr/src/app/.env\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-creating-a-docker-image-to-run-the-nestjs-application",children:"3. Creating a Docker image to run the NestJS application"}),"\n",(0,t.jsx)(n.p,{children:'Since we install dependencies when creating a "basic Docker image to run a NestJS application", and we build the code through launching a "Docker image with all dependencies", now we need to put it all together.'}),"\n",(0,t.jsxs)(n.p,{children:["This Docker image will be rebuild when the ",(0,t.jsx)(n.code,{children:"apps/server/package.json"})," version is changed."]}),"\n",(0,t.jsxs)(n.p,{children:["Creating the ",(0,t.jsx)(n.code,{children:".docker/server.Dockerfile"})," file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'ARG BASE_SERVER_IMAGE_TAG=latest\nARG REGISTRY=ghcr.io\nARG BASE_SERVER_IMAGE_NAME=nestjs-mod/nestjs-mod-fullstack-base-server\n\nFROM ${REGISTRY}/${BASE_SERVER_IMAGE_NAME}:${BASE_SERVER_IMAGE_TAG} AS builder\nWORKDIR /usr/src/app\n\n# Disable nx daemon\nENV NX_DAEMON=false\n\n# Copy the generated code\nCOPY --chown=node:node ./dist ./dist\n# Copy prisma schema files\nCOPY --chown=node:node ./apps ./apps\nCOPY --chown=node:node ./libs ./libs\n# Copy the application\'s package.json file to use its information at runtime.\nCOPY --chown=node:node ./apps/server/package.json ./dist/apps/server/package.json\n\n# Generating additional code\nRUN npm run prisma:generate -- --verbose\n# Remove unnecessary packages\nRUN rm -rf /usr/src/app/node_modules/@nx && \\\n    rm -rf /usr/src/app/node_modules/@prisma-class-generator && \\\n    rm -rf /usr/src/app/node_modules/@angular  && \\\n    rm -rf /usr/src/app/node_modules/@swc  && \\\n    rm -rf /usr/src/app/node_modules/@babel  && \\\n    rm -rf /usr/src/app/node_modules/@angular-devkit && \\\n    rm -rf /usr/src/app/node_modules/@ngneat && \\\n    rm -rf /usr/src/app/node_modules/@types && \\\n    rm -rf /usr/src/app/node_modules/@ng-packagr && \\\n    rm -rf /usr/src/app/apps && \\\n    rm -rf /usr/src/app/libs\n\nFROM node:20.16.0-alpine\nWORKDIR /usr/src/app\n\n# Set server port\nENV SERVER_PORT=8080\n\n# Copy all project files\nCOPY --from=builder /usr/src/app/ /usr/src/app/\n# Copy utility for "To work as a PID 1"\nCOPY --from=builder /usr/bin/dumb-init /usr/bin/dumb-init\n\n# Expose server port\nEXPOSE 8080\n\n# Run server\nCMD ["dumb-init","node", "dist/apps/server/main.js"]\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-creating-a-docker-image-to-run-migrations-to-databases",children:"4. Creating a Docker image to run migrations to databases"}),"\n",(0,t.jsx)(n.p,{children:"Since we don't want to put unnecessary dependencies on the host machine, we build a Docker image with the necessary dependencies to run migrations."}),"\n",(0,t.jsx)(n.p,{children:'In my projects, I use the "Flyway" migrator, but for it to work, you need to download additional files that greatly increase the final image, if you take another migrator, the image will be smaller.'}),"\n",(0,t.jsxs)(n.p,{children:["Files with migrations are not placed in the image itself, they lie next to the source code, which is mounted via ",(0,t.jsx)(n.code,{children:"volume"})," into the container at startup."]}),"\n",(0,t.jsxs)(n.p,{children:["This Docker image will be rebuild when the version of the root ",(0,t.jsx)(n.code,{children:"package.json"})," is changed."]}),"\n",(0,t.jsxs)(n.p,{children:["Creating the ",(0,t.jsx)(n.code,{children:".docker/migrations' file.Dockerfile"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'FROM node:20-bullseye-slim AS builder\nWORKDIR /usr/src/app\n\n# Disable nx daemon\nENV NX_DAEMON=false\n\n# Copy all files in repository to image\nCOPY --chown=node:node . .\n\n# Copy the settings\nCOPY ./.docker/migrations-package.json package.json\nCOPY ./.docker/.dockerignore .dockerignore\nCOPY ./.docker/nx.json nx.json\n\n# Install dependencies\nRUN rm -rf package-lock.json && npm install --prefer-offline --no-audit --progress=false\n# Some utilities require a ".env" file\nRUN echo \'\' > .env\n\n# Generate additional files\nRUN ./node_modules/.bin/flyway -c ./.flyway.js info || echo \'skip flyway errors\'\n\nFROM node:20-bullseye-slim\nWORKDIR /usr/src/app\n\n# Copy node_modules\nCOPY --from=builder /usr/src/app/node_modules /usr/src/app/node_modules\n# Copy the settings\nCOPY --from=builder /usr/src/app/.docker/.dockerignore /usr/src/app/.dockerignore\nCOPY --from=builder /usr/src/app/.docker/nx.json /usr/src/app/nx.json\nCOPY --from=builder /usr/src/app/package.json /usr/src/app/package.json\nCOPY --from=builder /usr/src/app/rucken.json /usr/src/app/rucken.json\nCOPY --from=builder /usr/src/app/tsconfig.base.json /usr/src/app/tsconfig.base.json\nCOPY --from=builder /usr/src/app/.env /usr/src/app/.env\n# Copy files for flyway\nCOPY --from=builder /usr/src/app/tmp /usr/src/app/tmp\nCOPY --from=builder /usr/src/app/.flyway.js /usr/src/app/.flyway.js\n\n# Copy folders with migrations\n# COPY --chown=node:node ./apps ./apps\n# COPY --chown=node:node ./libs ./libs\n\nCMD ["npm","run", "db:create-and-fill"]\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"The list of dependencies differs from the root list. This is necessary to reduce the final image."}),"\n",(0,t.jsxs)(n.p,{children:["Creating a file with the necessary dependencies ",(0,t.jsx)(n.code,{children:".docker/migrations-package.json"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "@nestjs-mod-fullstack/source",\n  "version": "0.0.0",\n  "license": "MIT",\n  "scripts": {\n    "_____db_____": "_____db_____",\n    "db:create": "./node_modules/.bin/nx run-many -t=db-create",\n    "db:create-and-fill": "npm run db:create && npm run flyway:migrate",\n    "_____flyway_____": "_____flyway_____",\n    "flyway:migrate": "./node_modules/.bin/nx run-many -t=flyway-migrate"\n  },\n  "private": true,\n  "devDependencies": {\n    "node-flywaydb": "^3.0.7",\n    "nx": "19.5.3",\n    "rucken": "^4.8.1"\n  },\n  "dependencies": {\n    "dotenv": "^16.4.5"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-creating-a-docker-image-to-run-e2e-tests",children:"5. Creating a Docker image to run E2E tests"}),"\n",(0,t.jsx)(n.p,{children:"Since we don't want to put unnecessary dependencies on the host machine, we build a Docker image with the necessary dependencies to run E2E tests.."}),"\n",(0,t.jsx)(n.p,{children:"Client E2E tests are run through playwright and use browser engines: chromium, firefox and webkit when working, for their work you need to download additional files that greatly increase the final image, if you exclude some of the engines or disable client tests altogether, then the image will be smaller."}),"\n",(0,t.jsxs)(n.p,{children:["The test files are not placed in the image itself, they lie next to the source code, which is mounted via ",(0,t.jsx)(n.code,{children:"volume"})," into the container at startup."]}),"\n",(0,t.jsxs)(n.p,{children:["This Docker image will be rebild when the version of the root ",(0,t.jsx)(n.code,{children:"package.json"})," is changed."]}),"\n",(0,t.jsxs)(n.p,{children:["Creating the file ",(0,t.jsx)(n.code,{children:".docker/e2e-tests.Dockerfile"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'FROM node:20-bullseye-slim\nWORKDIR /usr/src/app\n\n# Disable nx daemon\nENV NX_DAEMON=false\n# Url with stage to run e2e tests\nENV BASE_URL=http://localhost:8080\n\n# Copy all files in repository to image\nCOPY --chown=node:node . .\n\n# Copy the settings\nCOPY ./.docker/e2e-tests-package.json package.json\nCOPY ./.docker/e2e-tests-nx.json nx.json\nCOPY ./.docker/.dockerignore .dockerignore\n\n# Some utilities require a ".env" file\nRUN echo \'\' > .env\n\n# Install dependencies\nRUN rm -rf package-lock.json && \\\n    npm install --prefer-offline --no-audit --progress=false && \\\n    # Install external utils\n    npx playwright install --with-deps && \\\n    # Clear cache\n    npm cache clean --force\n\n# Copy folders with migrations\n# COPY --chown=node:node ./apps ./apps\n# COPY --chown=node:node ./libs ./libs\n\nCMD ["npm","run", "test:e2e"]\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"The list of dependencies differs from the root list. This is necessary to reduce the final image."}),"\n",(0,t.jsxs)(n.p,{children:["Creating a file with the necessary dependencies ",(0,t.jsx)(n.code,{children:".docker/e2e-tests-package.json"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "@nestjs-mod-fullstack/source",\n  "version": "0.0.0",\n  "license": "MIT",\n  "scripts": {\n    "test:e2e": "./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=e2e --skip-nx-cache=true --output-style=stream-without-prefixes"\n  },\n  "private": true,\n  "devDependencies": {\n    "@nx/jest": "19.5.3",\n    "@nx/playwright": "19.5.3",\n    "@playwright/test": "^1.36.0",\n    "@types/jest": "^29.4.0",\n    "@types/node": "~18.16.9",\n    "jest": "^29.4.1",\n    "nx": "19.5.3",\n    "ts-jest": "^29.1.0"\n  },\n  "dependencies": {\n    "dotenv": "^16.4.5",\n    "rxjs": "^7.8.0",\n    "tslib": "^2.3.0"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Migrations are started using nx, for which you need to install additional dependencies to fully run."}),"\n",(0,t.jsx)(n.p,{children:"In order not to increase the final size of the image for running tests, you need to create a modified version of the nx config."}),"\n",(0,t.jsxs)(n.p,{children:["Creating the file ",(0,t.jsx)(n.code,{children:".docker/e2e-tests-nx.json"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "$schema": "./node_modules/nx/schemas/nx-schema.json",\n  "namedInputs": {\n    "default": ["{projectRoot}/**/*", "sharedGlobals"],\n    "production": ["default", "!{projectRoot}/.eslintrc.json", "!{projectRoot}/eslint.config.js", "!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)", "!{projectRoot}/tsconfig.spec.json", "!{projectRoot}/jest.config.[jt]s", "!{projectRoot}/src/test-setup.[jt]s", "!{projectRoot}/test-setup.[jt]s"],\n    "sharedGlobals": []\n  },\n  "plugins": [\n    {\n      "plugin": "@nx/playwright/plugin",\n      "options": {\n        "targetName": "e2e"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"6-the-client-code-is-sent-via-nginx-so-we-create-a-docker-image-with-embedded-nginx-and-static-files",children:"6. The client code is sent via Nginx, so we create a Docker image with embedded Nginx and static files"}),"\n",(0,t.jsx)(n.p,{children:"Some of the Nginx configuration parameters must be redefined, since there will be several options for launching the infrastructure: Docker Compose and Kubernetes, in each case the full name of the services within the infrastructure network is different."}),"\n",(0,t.jsx)(n.p,{children:"The starting point of this image will not be Nginx, but a Bash script that pre-patches the Nginx configuration."}),"\n",(0,t.jsxs)(n.p,{children:["Creating the ",(0,t.jsx)(n.code,{children:".docker/nginxDockerfile"})," file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'FROM nginx:alpine\n\n# Set server port\nENV SERVER_PORT=8080\n# Set nginx port\nENV NGINX_PORT=8080\n\n# Copy nginx config\nCOPY --chown=node:node ../.docker/nginx /etc/nginx/conf.d\n# Copy frontend\nCOPY --chown=node:node ../dist/apps/client/browser /usr/share/nginx/html\n\n# Install Bash Shell\nRUN apk add --update bash\n# Clean up\nRUN rm -rf /var/cache/apk/*\n\n# Add a startup script\nCOPY --chown=node:node ../.docker/nginx/start.sh /start.sh\nRUN chmod 755 /start.sh\n\n# Expose nginx port\nEXPOSE 8080\n\nCMD ["/start.sh"]\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Updating the Nginx configuration file ",(0,t.jsx)(n.code,{children:".docker/nginx/nginx.conf"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"map $sent_http_content_type $expires {\n    \"text/html\" epoch;\n    \"text/html; charset=utf-8\" epoch;\n    default off;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nupstream nestjs-mod-fullstack-server {\n    # Dynamic name of the server container and the port it runs on\n    server ___SERVER_NAME___:___SERVER_PORT___;\n}\n\nserver {\n    # Dynamic Nginx port that is shared externally\n    listen ___NGINX_PORT___;\n    server_name localhost;\n\n    gzip on;\n    gzip_proxied any;\n    gzip_types text/plain application/xml text/css application/javascript application/json;\n    gzip_min_length 1000;\n    gzip_vary on;\n    gzip_disable \"MSIE [1-6]\\.(?!.*SV1)\";\n\n    client_max_body_size 50m;\n    proxy_connect_timeout 5m;\n    proxy_send_timeout 5m;\n    proxy_read_timeout 5m;\n    send_timeout 5m;\n\n    proxy_max_temp_file_size 0;\n\n    root /usr/share/nginx/html;\n    index index.html;\n\n\n    location /api {\n        proxy_pass http://nestjs-mod-fullstack-server;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_set_header Host $host;\n        proxy_set_header Origin $http_origin;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # kill cache\n        add_header Last-Modified $date_gmt;\n        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';\n        if_modified_since off;\n        expires off;\n        etag off;\n    }\n\n    location /swagger {\n        proxy_pass http://nestjs-mod-fullstack-server;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_set_header Host $host;\n        proxy_set_header Origin $http_origin;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # kill cache\n        add_header Last-Modified $date_gmt;\n        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';\n        if_modified_since off;\n        expires off;\n        etag off;\n    }\n\n    location / {\n        expires $expires;\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header Origin $http_origin;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_read_timeout 1m;\n        proxy_connect_timeout 1m;\n        proxy_intercept_errors on;\n        error_page 404 =200 /index.html;\n        root /usr/share/nginx/html;\n    }\n}\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Creating a Bash script for patching Nginx configuration and running it ",(0,t.jsx)(n.code,{children:".docker/nginx/start.sh "})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\nif [[ -z "${SERVER_PORT}" ]]; then\n    SERVER_PORT="8080"\nelse\n    SERVER_PORT="${SERVER_PORT}"\nfi\n\nif [[ -z "${SERVER_NAME}" ]]; then\n    SERVER_NAME="nestjs-mod-fullstack-server"\nelse\n    SERVER_NAME="${SERVER_NAME}"\nfi\n\nif [[ -z "${NGINX_PORT}" ]]; then\n    NGINX_PORT="8080"\nelse\n    NGINX_PORT="${NGINX_PORT}"\nfi\n\n# Replacing Nginx Dynamic Parameters\nsed -i "s/___SERVER_NAME___/$SERVER_NAME/g" /etc/nginx/conf.d/nginx.conf\nsed -i "s/___SERVER_PORT___/$SERVER_PORT/g" /etc/nginx/conf.d/nginx.conf\nsed -i "s/___NGINX_PORT___/$NGINX_PORT/g" /etc/nginx/conf.d/nginx.conf\n\n# Launch Nginx\n/usr/sbin/nginx -g "daemon off;"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"7-updating-files-to-run-in-docker-compose-mode",children:'7. Updating files to run in "Docker Compose" mode'}),"\n",(0,t.jsx)(n.p,{children:"Some of the environment variables for building and running images will be generated in a special Bash script and exported to the active process."}),"\n",(0,t.jsxs)(n.p,{children:["Creating a file ",(0,t.jsx)(n.code,{children:".docker/set-env.sh"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\nset -e\n\nexport REPOSITORY=nestjs-mod/nestjs-mod-fullstack\nexport REGISTRY=ghcr.io\nexport BASE_SERVER_IMAGE_NAME="${REPOSITORY}-base-server"\nexport BUILDER_IMAGE_NAME="${REPOSITORY}-builder"\nexport MIGRATIONS_IMAGE_NAME="${REPOSITORY}-migrations"\nexport SERVER_IMAGE_NAME="${REPOSITORY}-server"\nexport NGINX_IMAGE_NAME="${REPOSITORY}-nginx"\nexport E2E_TESTS_IMAGE_NAME="${REPOSITORY}-e2e-tests"\nexport COMPOSE_INTERACTIVE_NO_CLI=1\nexport NX_DAEMON=false\nexport NX_PARALLEL=1\nexport NX_SKIP_NX_CACHE=true\nexport DISABLE_SERVE_STATIC=true\n\nexport ROOT_VERSION=$(npm pkg get version --workspaces=false | tr -d \\")\nexport SERVER_VERSION=$(cd ./apps/server && npm pkg get version --workspaces=false | tr -d \\")\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Updating the file ",(0,t.jsx)(n.code,{children:".docker/docker-compose-full.yml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"version: '3'\nnetworks:\n  nestjs-mod-fullstack-network:\n    driver: 'bridge'\nservices:\n  nestjs-mod-fullstack-postgre-sql:\n    image: 'bitnami/postgresql:15.5.0'\n    container_name: 'nestjs-mod-fullstack-postgre-sql'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    healthcheck:\n      test:\n        - 'CMD-SHELL'\n        - 'pg_isready -U postgres'\n      interval: '5s'\n      timeout: '5s'\n      retries: 5\n    tty: true\n    restart: 'always'\n    environment:\n      POSTGRESQL_USERNAME: '${SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME}'\n      POSTGRESQL_PASSWORD: '${SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD}'\n      POSTGRESQL_DATABASE: '${SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE}'\n    volumes:\n      - 'nestjs-mod-fullstack-postgre-sql-volume:/bitnami/postgresql'\n  nestjs-mod-fullstack-postgre-sql-migrations:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-migrations:${ROOT_VERSION}'\n    container_name: 'nestjs-mod-fullstack-postgre-sql-migrations'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    tty: true\n    environment:\n      NX_SKIP_NX_CACHE: 'true'\n      SERVER_ROOT_DATABASE_URL: '${SERVER_ROOT_DATABASE_URL}'\n      SERVER_APP_DATABASE_URL: '${SERVER_APP_DATABASE_URL}'\n    depends_on:\n      nestjs-mod-fullstack-postgre-sql:\n        condition: 'service_healthy'\n    working_dir: '/usr/src/app'\n    volumes:\n      - './../apps:/usr/src/app/apps'\n      - './../libs:/usr/src/app/libs'\n  nestjs-mod-fullstack-server:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-server:${SERVER_VERSION}'\n    container_name: 'nestjs-mod-fullstack-server'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    healthcheck:\n      test: ['CMD-SHELL', 'npx -y wait-on --timeout= --interval=1000 --window --verbose --log http://localhost:${SERVER_PORT}/api/health']\n      interval: 30s\n      timeout: 10s\n      retries: 10\n    tty: true\n    environment:\n      SERVER_APP_DATABASE_URL: '${SERVER_APP_DATABASE_URL}'\n      SERVER_PORT: '${SERVER_PORT}'\n    restart: 'always'\n    depends_on:\n      nestjs-mod-fullstack-postgre-sql:\n        condition: service_healthy\n      nestjs-mod-fullstack-postgre-sql-migrations:\n        condition: service_completed_successfully\n  nestjs-mod-fullstack-nginx:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-nginx:${SERVER_VERSION}'\n    container_name: 'nestjs-mod-fullstack-nginx'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    healthcheck:\n      test: ['CMD-SHELL', 'curl -so /dev/null http://localhost:${NGINX_PORT} || exit 1']\n      interval: 30s\n      timeout: 10s\n      retries: 10\n    environment:\n      SERVER_PORT: '${SERVER_PORT}'\n      NGINX_PORT: '${NGINX_PORT}'\n    restart: 'always'\n    depends_on:\n      nestjs-mod-fullstack-server:\n        condition: service_healthy\n    ports:\n      - '${NGINX_PORT}:${NGINX_PORT}'\n  nestjs-mod-fullstack-e2e-tests:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-e2e-tests:${ROOT_VERSION}'\n    container_name: 'nestjs-mod-fullstack-e2e-tests'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    environment:\n      BASE_URL: 'http://nestjs-mod-fullstack-nginx:${NGINX_PORT}'\n    depends_on:\n      nestjs-mod-fullstack-nginx:\n        condition: service_healthy\n    working_dir: '/usr/src/app'\n    volumes:\n      - './../apps:/usr/src/app/apps'\n      - './../libs:/usr/src/app/libs'\n  nestjs-mod-fullstack-https-portal:\n    image: steveltn/https-portal:1\n    container_name: 'nestjs-mod-fullstack-https-portal'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    ports:\n      - '80:80'\n      - '443:443'\n    links:\n      - nestjs-mod-fullstack-nginx\n    restart: always\n    environment:\n      STAGE: '${HTTPS_PORTAL_STAGE}'\n      DOMAINS: '${SERVER_DOMAIN} -> http://nestjs-mod-fullstack-nginx:${NGINX_PORT}'\n    depends_on:\n      nestjs-mod-fullstack-nginx:\n        condition: service_healthy\n    volumes:\n      - nestjs-mod-fullstack-https-portal-volume:/var/lib/https-portal\nvolumes:\n  nestjs-mod-fullstack-postgre-sql-volume:\n    name: 'nestjs-mod-fullstack-postgre-sql-volume'\n  nestjs-mod-fullstack-https-portal-volume:\n    name: 'nestjs-mod-fullstack-https-portal-volume'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Updating the file with environment variables ",(0,t.jsx)(n.code,{children:".docker/docker-compose-full.env"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"SERVER_PORT=9090\nNGINX_PORT=8080\nSERVER_ROOT_DATABASE_URL=postgres://postgres:postgres_password@nestjs-mod-fullstack-postgre-sql:5432/postgres?schema=public\nSERVER_APP_DATABASE_URL=postgres://app:app_password@nestjs-mod-fullstack-postgre-sql:5432/app?schema=public\nSERVER_POSTGRE_SQL_POSTGRESQL_USERNAME=postgres\nSERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD=postgres_password\nSERVER_POSTGRE_SQL_POSTGRESQL_DATABASE=postgres\nSERVER_DOMAIN=example.com\nHTTPS_PORTAL_STAGE=local # local|stage|production\n"})}),"\n",(0,t.jsx)(n.h3,{id:"8-creating-a-bash-script-for-building-local-docker-images",children:"8. Creating a Bash script for building local Docker images"}),"\n",(0,t.jsx)(n.p,{children:'To run locally in the "Docker Compose" mode, you must first build all the images, we will do this in a separate Bash script in order to be able to customize the build process in the future.'}),"\n",(0,t.jsxs)(n.p,{children:["Creating a file ",(0,t.jsx)(n.code,{children:".docker/build-images.sh"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\nset -e\n\n# We check the existence of a local image with the specified tag, if it does not exist, we start building the image\nexport IMG=${REGISTRY}/${BUILDER_IMAGE_NAME}:${ROOT_VERSION} && [ -n "$(docker images -q $IMG)" ] || docker build -t "${REGISTRY}/${BUILDER_IMAGE_NAME}:${ROOT_VERSION}" -t "${REGISTRY}/${BUILDER_IMAGE_NAME}:latest" -f ./.docker/builder.Dockerfile . --progress=plain\n\n# We build all applications\ndocker run -v ./dist:/usr/src/app/dist -v ./apps:/usr/src/app/apps -v ./libs:/usr/src/app/libs ${REGISTRY}/${BUILDER_IMAGE_NAME}:${ROOT_VERSION}\n\n# We check the existence of a local image with the specified tag, if it does not exist, we start building the image\nexport IMG=${REGISTRY}/${BASE_SERVER_IMAGE_NAME}:${ROOT_VERSION} && [ -n "$(docker images -q $IMG)" ] || docker build -t "${REGISTRY}/${BASE_SERVER_IMAGE_NAME}:${ROOT_VERSION}" -t "${REGISTRY}/${BASE_SERVER_IMAGE_NAME}:latest" -f ./.docker/base-server.Dockerfile . --progress=plain\n\n# We check the existence of a local image with the specified tag, if it does not exist, we start building the image\nexport IMG=${REGISTRY}/${SERVER_IMAGE_NAME}:${SERVER_VERSION} && [ -n "$(docker images -q $IMG)" ] || docker build -t "${REGISTRY}/${SERVER_IMAGE_NAME}:${SERVER_VERSION}" -t "${REGISTRY}/${SERVER_IMAGE_NAME}:latest" -f ./.docker/server.Dockerfile . --progress=plain --build-arg=\\"BASE_SERVER_IMAGE_TAG=${ROOT_VERSION}\\"\n\n# We check the existence of a local image with the specified tag, if it does not exist, we start building the image\nexport IMG=${REGISTRY}/${MIGRATIONS_IMAGE_NAME}:${ROOT_VERSION} && [ -n "$(docker images -q $IMG)" ] || docker build -t "${REGISTRY}/${MIGRATIONS_IMAGE_NAME}:${ROOT_VERSION}" -t "${REGISTRY}/${MIGRATIONS_IMAGE_NAME}:latest" -f ./.docker/migrations.Dockerfile . --progress=plain\n\n# We check the existence of a local image with the specified tag, if it does not exist, we start building the image\nexport IMG=${REGISTRY}/${NGINX_IMAGE_NAME}:${SERVER_VERSION} && [ -n "$(docker images -q $IMG)" ] || docker build -t "${REGISTRY}/${NGINX_IMAGE_NAME}:${SERVER_VERSION}" -t "${REGISTRY}/${NGINX_IMAGE_NAME}:latest" -f ./.docker/nginx.Dockerfile . --progress=plain\n\n# We check the existence of a local image with the specified tag, if it does not exist, we start building the image\nexport IMG=${REGISTRY}/${E2E_TESTS_IMAGE_NAME}:${ROOT_VERSION} && [ -n "$(docker images -q $IMG)" ] || docker build -t "${REGISTRY}/${E2E_TESTS_IMAGE_NAME}:${ROOT_VERSION}" -t "${REGISTRY}/${E2E_TESTS_IMAGE_NAME}:latest" -f ./.docker/e2e-tests.Dockerfile . --progress=plain\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"9-to-run-the-updated-docker-compose-mode-all-npm-scripts-must-be-updated",children:"9. To run the updated Docker Compose mode, all npm scripts must be updated"}),"\n",(0,t.jsxs)(n.p,{children:["Updating the ",(0,t.jsx)(n.code,{children:"package.json"})," file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    // ...\n    "_____pm2-full dev infra_____": "_____pm2-full dev infra_____",\n    "pm2-full:dev:start": "npm run generate && npm run docker-compose:start-prod:server && npm run db:create-and-fill && npm run pm2:dev:start",\n    "pm2-full:dev:stop": "npm run docker-compose:stop-prod:server && npm run pm2:dev:stop",\n    "pm2-full:dev:test:e2e": "npm run test:e2e",\n    // ...\n    "_____pm2-full prod infra_____": "_____pm2-full prod infra_____",\n    "pm2-full:prod:start": "npm run build:prod && npm run docker-compose:start-prod:server && npm run db:create-and-fill && npm run pm2:start",\n    "pm2-full:prod:stop": "npm run docker-compose:stop-prod:server && npm run pm2:stop",\n    "pm2-full:prod:test:e2e": "export BASE_URL=http://localhost:3000 && npm run test:e2e",\n    // ...\n    "_____prod infra_____": "_____prod infra_____",\n    "start": "./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=start",\n    "build": "npm run generate && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=build --skip-nx-cache=true",\n    "build:prod": "npm run generate && chmod -R augo+rw libs apps dist && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=build --skip-nx-cache=true -c production",\n    // ...\n    "_____docker-compose-full prod infra_____": "_____docker-compose-full prod infra_____",\n    "docker-compose-full:prod:build": ". .docker/set-env.sh && .docker/build-images.sh",\n    "docker-compose-full:prod:start": "npm run docker-compose-full:prod:build && npm run docker-compose-full:prod:only-start",\n    "docker-compose-full:prod:stop": ". .docker/set-env.sh && docker compose -f ./.docker/docker-compose-full.yml --env-file ./.docker/docker-compose-full.env --compatibility down",\n    "docker-compose-full:prod:only-start": ". .docker/set-env.sh && docker compose -f ./.docker/docker-compose-full.yml --env-file ./.docker/docker-compose-full.env --compatibility up -d",\n    "docker-compose-full:prod:test:e2e": ". .docker/set-env.sh && export BASE_URL=http://localhost:8080 && npm run test:e2e",\n    // ...\n    "_____db_____": "_____db_____",\n    "db:create": "./node_modules/.bin/nx run-many -t=db-create",\n    "db:create-and-fill": "npm run db:create && npm run flyway:migrate"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"10-launching-the-updated-docker-compose-mode-with-built-in-launch-of-e2e-tests",children:'10. Launching the updated "Docker Compose" mode with built-in launch of E2E tests'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Commands"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run docker-compose-full:prod:start\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Console output"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\n> @nestjs-mod-fullstack/source@0.0.0 docker-compose-full:prod:start\n> npm run docker-compose-full:prod:build && npm run docker-compose-full:prod:only-start\n\n\n> @nestjs-mod-fullstack/source@0.0.0 docker-compose-full:prod:build\n> . .docker/set-env.sh && .docker/build-images.sh\n\n\n> @nestjs-mod-fullstack/source@0.0.0 build:prod\n> npm run generate && chmod -R augo+rw libs apps dist && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=build --skip-nx-cache=true -c production\n\n\n> @nestjs-mod-fullstack/source@0.0.0 generate\n> ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=generate --skip-nx-cache=true && npm run make-ts-list && npm run lint:fix\n\n\n NX   Running target generate for project server:\n\n- server\n\n\n\n> nx run server:generate\n\n> ./node_modules/.bin/prisma generate --schema=./apps/server/src/prisma/app-schema.prisma\n\n\x1b[2mEnvironment variables loaded from .env\x1b[22m\n\x1b[2mPrisma schema loaded from apps/server/src/prisma/app-schema.prisma\x1b[22m\n\x1b[36mprisma:info\x1b[39m [Prisma Class Generator]:Handler Registered.\n\x1b[36mprisma:info\x1b[39m [Prisma Class Generator]:Generate /usr/src/app/apps/server/src/app/generated/rest/dto/app_demo.ts\n\x1b[36mprisma:info\x1b[39m [Prisma Class Generator]:Generate /usr/src/app/apps/server/src/app/generated/rest/dto/migrations.ts\n\n\u2714 Generated \x1b[1mPrisma Client\x1b[22m (v5.18.0, engine=binary)\x1b[2m to ./node_modules/@prisma/app-client\x1b[22m in 83ms\n\n\u2714 Generated \x1b[1mPrisma Class Generator\x1b[22m\x1b[2m to ./apps/server/src/app/generated/rest/dto\x1b[22m in 88ms\n\nStart by importing your Prisma Client (See: http://pris.ly/d/importing-client)\n\nTip: Want real-time updates to your database without manual polling? Discover how with Pulse: https://pris.ly/tip-0-pulse\n\n> ./node_modules/.bin/rucken make-ts-list\n\n> export NESTJS_MODE=infrastructure && ./node_modules/.bin/nx serve server --host=0.0.0.0 --watch=false --inspect=false\n\n\n\x1b[2m> \x1b[22m\x1b[2mnx run\x1b[22m server:serve:development --host=0.0.0.0 --watch=false --inspect=false\n\nchunk (runtime: main) \x1b[1m\x1b[32mmain.js\x1b[39m\x1b[22m (main) 12.8 KiB \x1b[1m\x1b[33m[entry]\x1b[39m\x1b[22m \x1b[1m\x1b[32m[rendered]\x1b[39m\x1b[22m\nwebpack compiled \x1b[1m\x1b[32msuccessfully\x1b[39m\x1b[22m (77fef9f77a8e1069)\n[15:52:07.239] \x1b[32mINFO\x1b[39m (275): \x1b[36mStarting Nest application...\x1b[39m\n    context: "NestFactory"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApp dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mProjectUtilsSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApplicationInitializerSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApplicationInitializerShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mNestjsPinoLoggerModuleSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mNestjsPinoLoggerModuleShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mTerminusHealthCheckModuleSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApplicationListenerSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApplicationListenerShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mPrismaModuleSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mAppModuleSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mAppModuleShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mPrismaModule dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.240] \x1b[32mINFO\x1b[39m (275): \x1b[36mInfrastructureMarkdownReportGeneratorSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mPm2Settings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mPm2Shared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mProjectUtils dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerComposeSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mProjectUtils dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerComposePostgreSQLSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerCompose dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerComposePostgreSQL dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerComposePostgreSQLSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerComposePostgreSQLShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mFlywaySettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mFlywayShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mPrismaModuleSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mPrismaModuleShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mProjectUtils dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mInfrastructureMarkdownReportGeneratorSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mProjectUtils dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mInfrastructureMarkdownReportStorage dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mInfrastructureMarkdownReportStorageSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mProjectUtils dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerCompose dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mFlywaySettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mFlywayShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mProjectUtils dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApplicationListenerSettings dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApplicationListenerShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerComposeShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mInfrastructureMarkdownReportStorageShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mProjectUtils dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApplicationInitializer dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApplicationListener dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mPrismaModule dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mInfrastructureMarkdownReportGenerator dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerComposePostgreSQL dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mFlyway dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDefaultNestApplicationListener dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mNestjsPinoLoggerModule dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mTerminusModule dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mTerminusModule dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mProjectUtilsShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mInfrastructureMarkdownReportGeneratorShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mPm2 dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerCompose dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerComposePostgreSQL dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mPrismaModule dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mInfrastructureMarkdownReportGeneratorShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mFlyway dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mInfrastructureMarkdownReportGenerator dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mLoggerModule dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mDockerComposePostgreSQLShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mPrismaModuleShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mTerminusHealthCheckModuleShared dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mTerminusHealthCheckModule dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.241] \x1b[32mINFO\x1b[39m (275): \x1b[36mAppModule dependencies initialized\x1b[39m\n    context: "InstanceLoader"\n[15:52:07.285] \x1b[32mINFO\x1b[39m (275): \x1b[36mTerminusHealthCheckController {/api/health}:\x1b[39m\n    context: "RoutesResolver"\n[15:52:07.287] \x1b[32mINFO\x1b[39m (275): \x1b[36mMapped {/api/health, GET} route\x1b[39m\n    context: "RouterExplorer"\n[15:52:07.287] \x1b[32mINFO\x1b[39m (275): \x1b[36mAppController {/api}:\x1b[39m\n    context: "RoutesResolver"\n[15:52:07.287] \x1b[32mINFO\x1b[39m (275): \x1b[36mMapped {/api, GET} route\x1b[39m\n    context: "RouterExplorer"\n[15:52:07.287] \x1b[32mINFO\x1b[39m (275): \x1b[36mMapped {/api/demo, POST} route\x1b[39m\n    context: "RouterExplorer"\n[15:52:07.288] \x1b[32mINFO\x1b[39m (275): \x1b[36mMapped {/api/demo/:id, GET} route\x1b[39m\n    context: "RouterExplorer"\n[15:52:07.288] \x1b[32mINFO\x1b[39m (275): \x1b[36mMapped {/api/demo/:id, DELETE} route\x1b[39m\n    context: "RouterExplorer"\n[15:52:07.288] \x1b[32mINFO\x1b[39m (275): \x1b[36mMapped {/api/demo, GET} route\x1b[39m\n    context: "RouterExplorer"\n[15:52:07.292] \x1b[32mINFO\x1b[39m (275): \x1b[36mConnected to database!\x1b[39m\n    context: "PrismaClient"\n[15:52:07.329] \x1b[34mDEBUG\x1b[39m (275):\n    0: "SERVER_ROOT_DATABASE_URL: Description=\'Connection string for PostgreSQL with root credentials (example: postgres://postgres:postgres_password@localhost:5432/postgres?schema=public, username must be \\"postgres\\")\', Original Name=\'rootDatabaseUrl\'"\n    1: "SERVER_PORT: Description=\'The port on which to run the server.\', Default=\'3000\', Original Name=\'port\'"\n    2: "SERVER_HOSTNAME: Description=\'Hostname on which to listen for incoming packets.\', Original Name=\'hostname\'"\n    3: "SERVER_APP_DATABASE_URL: Description=\'Connection string for PostgreSQL with module credentials (example: postgres://feat:feat_password@localhost:5432/feat?schema=public)\', Original Name=\'databaseUrl\'"\n    context: "All application environments"\n[15:52:07.399] \x1b[32mINFO\x1b[39m (275): \x1b[36mNest application successfully started\x1b[39m\n    context: "NestApplication"\n\n\n\n\x1b[0m\x1b[7m\x1b[1m\x1b[32m NX \x1b[39m\x1b[22m\x1b[27m\x1b[0m  \x1b[32mSuccessfully ran target serve for project server\x1b[39m\n\n\n> rm -rf ./libs/sdk/app-angular-rest-sdk/src/lib && mkdir ./libs/sdk/app-angular-rest-sdk/src/lib && ./node_modules/.bin/openapi-generator-cli generate -i ./app-swagger.json -g typescript-angular -o ./libs/sdk/app-angular-rest-sdk/src/lib  --additional-properties=apiModulePrefix=RestClient,configurationPrefix=RestClient,fileNaming=kebab-case,modelFileSuffix=.interface,modelSuffix=Interface,enumNameSuffix=Type,enumPropertyNaming=original,serviceFileSuffix=-rest.service,serviceSuffix=RestService\n\n\x1b[33mDownload 7.8.0 ...\x1b[39m\n\x1b[32mDownloaded 7.8.0\x1b[39m\n\x1b[32mDid set selected version to 7.8.0\x1b[39m\n[main] INFO  o.o.codegen.DefaultGenerator - Generating with dryRun=false\n[main] INFO  o.o.c.ignore.CodegenIgnoreProcessor - No .openapi-generator-ignore file found.\n[main] INFO  o.o.codegen.DefaultGenerator - OpenAPI Generator: typescript-angular (client)\n[main] INFO  o.o.codegen.DefaultGenerator - Generator \'typescript-angular\' is considered stable.\n[main] INFO  o.o.c.l.AbstractTypeScriptClientCodegen - Hint: Environment variable \'TS_POST_PROCESS_FILE\' (optional) not defined. E.g. to format the source code, please try \'export TS_POST_PROCESS_FILE="/usr/local/bin/prettier --write"\' (Linux/Mac)\n[main] INFO  o.o.c.l.AbstractTypeScriptClientCodegen - Note: To enable file post-processing, \'enablePostProcessFile\' must be set to `true` (--enable-post-process-file for CLI).\n[main] WARN  o.o.codegen.DefaultCodegen - The value (generator\'s option) must be either boolean or string. Default to `false`.\n[main] INFO  o.o.c.l.TypeScriptAngularClientCodegen - generating code for Angular 18.0.0 ...\n[main] INFO  o.o.c.l.TypeScriptAngularClientCodegen -   (you can select the angular version by setting the additionalProperties (--additional-properties in CLI) ngVersion)\n[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as TerminusHealthCheckController_check_200_response_info_value. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings TerminusHealthCheckController_check_200_response_info_value=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings TerminusHealthCheckController_check_200_response_info_value=NewModel,ModelA=NewModelA in CLI).\n[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as TerminusHealthCheckController_check_200_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings TerminusHealthCheckController_check_200_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings TerminusHealthCheckController_check_200_response=NewModel,ModelA=NewModelA in CLI).\n[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as TerminusHealthCheckController_check_503_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings TerminusHealthCheckController_check_503_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings TerminusHealthCheckController_check_503_response=NewModel,ModelA=NewModelA in CLI).\n[main] INFO  o.o.codegen.utils.URLPathUtils - \'host\' (OAS 2.0) or \'servers\' (OAS 3.0) not defined in the spec. Default to [http://localhost] for server URL [http://localhost/]\n[main] INFO  o.o.codegen.utils.URLPathUtils - \'host\' (OAS 2.0) or \'servers\' (OAS 3.0) not defined in the spec. Default to [http://localhost] for server URL [http://localhost/]\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/model/./app-data.interface.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/model/./app-demo.interface.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/model/./terminus-health-check-controller-check200-response-info-value.interface.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/model/./terminus-health-check-controller-check200-response.interface.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/model/./terminus-health-check-controller-check503-response.interface.ts\n[main] INFO  o.o.codegen.utils.URLPathUtils - \'host\' (OAS 2.0) or \'servers\' (OAS 3.0) not defined in the spec. Default to [http://localhost] for server URL [http://localhost/]\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/api/default-rest.service.ts\n[main] INFO  o.o.codegen.utils.URLPathUtils - \'host\' (OAS 2.0) or \'servers\' (OAS 3.0) not defined in the spec. Default to [http://localhost] for server URL [http://localhost/]\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/model/models.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/api/api.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/index.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/api.module.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/configuration.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/variables.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/encoder.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/param.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/.gitignore\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/git_push.sh\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/README.md\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/.openapi-generator-ignore\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/.openapi-generator/VERSION\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-angular-rest-sdk/src/lib/.openapi-generator/FILES\n################################################################################\n# Thanks for using OpenAPI Generator.                                          #\n# Please consider donation to help us maintain this project \ud83d\ude4f                 #\n# https://opencollective.com/openapi_generator/donate                          #\n################################################################################\n> rm -rf ./libs/sdk/app-rest-sdk/src/lib && mkdir ./libs/sdk/app-rest-sdk/src/lib && ./node_modules/.bin/openapi-generator-cli generate -i ./app-swagger.json -g typescript-axios -o ./libs/sdk/app-rest-sdk/src/lib\n\n[main] INFO  o.o.codegen.DefaultGenerator - Generating with dryRun=false\n[main] INFO  o.o.c.ignore.CodegenIgnoreProcessor - No .openapi-generator-ignore file found.\n[main] INFO  o.o.codegen.DefaultGenerator - OpenAPI Generator: typescript-axios (client)\n[main] INFO  o.o.codegen.DefaultGenerator - Generator \'typescript-axios\' is considered stable.\n[main] INFO  o.o.c.l.AbstractTypeScriptClientCodegen - Hint: Environment variable \'TS_POST_PROCESS_FILE\' (optional) not defined. E.g. to format the source code, please try \'export TS_POST_PROCESS_FILE="/usr/local/bin/prettier --write"\' (Linux/Mac)\n[main] INFO  o.o.c.l.AbstractTypeScriptClientCodegen - Note: To enable file post-processing, \'enablePostProcessFile\' must be set to `true` (--enable-post-process-file for CLI).\n[main] WARN  o.o.codegen.DefaultCodegen - The value (generator\'s option) must be either boolean or string. Default to `false`.\n[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as TerminusHealthCheckController_check_200_response_info_value. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings TerminusHealthCheckController_check_200_response_info_value=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings TerminusHealthCheckController_check_200_response_info_value=NewModel,ModelA=NewModelA in CLI).\n[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as TerminusHealthCheckController_check_200_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings TerminusHealthCheckController_check_200_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings TerminusHealthCheckController_check_200_response=NewModel,ModelA=NewModelA in CLI).\n[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as TerminusHealthCheckController_check_503_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings TerminusHealthCheckController_check_503_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings TerminusHealthCheckController_check_503_response=NewModel,ModelA=NewModelA in CLI).\n[main] INFO  o.o.codegen.utils.URLPathUtils - \'host\' (OAS 2.0) or \'servers\' (OAS 3.0) not defined in the spec. Default to [http://localhost] for server URL [http://localhost/]\n[main] INFO  o.o.codegen.utils.URLPathUtils - \'host\' (OAS 2.0) or \'servers\' (OAS 3.0) not defined in the spec. Default to [http://localhost] for server URL [http://localhost/]\n[main] INFO  o.o.codegen.utils.URLPathUtils - \'host\' (OAS 2.0) or \'servers\' (OAS 3.0) not defined in the spec. Default to [http://localhost] for server URL [http://localhost/]\n[main] INFO  o.o.codegen.utils.URLPathUtils - \'host\' (OAS 2.0) or \'servers\' (OAS 3.0) not defined in the spec. Default to [http://localhost] for server URL [http://localhost/]\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/index.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/base.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/common.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/api.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/configuration.ts\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/git_push.sh\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/.gitignore\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/.npmignore\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/.openapi-generator-ignore\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/.openapi-generator/VERSION\n[main] INFO  o.o.codegen.TemplateManager - writing file /usr/src/app/./libs/sdk/app-rest-sdk/src/lib/.openapi-generator/FILES\n################################################################################\n# Thanks for using OpenAPI Generator.                                          #\n# Please consider donation to help us maintain this project \ud83d\ude4f                 #\n# https://opencollective.com/openapi_generator/donate                          #\n################################################################################\n\n\n\n NX   Successfully ran target generate for project server\n\n\n\n> @nestjs-mod-fullstack/source@0.0.0 make-ts-list\n> ./node_modules/.bin/rucken make-ts-list\n\n\n> @nestjs-mod-fullstack/source@0.0.0 lint:fix\n> npm run tsc:lint && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=lint --fix\n\n\n> @nestjs-mod-fullstack/source@0.0.0 tsc:lint\n> ./node_modules/.bin/tsc --noEmit -p tsconfig.base.json\n\n\n NX   Running target lint for 4 projects:\n\n- app-angular-rest-sdk\n- server-e2e\n- client\n- server\n\nWith additional flags:\n  --fix=true\n\n\n\n> nx run server-e2e:lint --fix\n\n\nLinting "server-e2e"...\n\n\u2714 All files pass linting\n\nESLint found too many warnings (maximum: -1).\n\n> nx run app-angular-rest-sdk:lint --fix\n\n\nLinting "app-angular-rest-sdk"...\n\x1b[0m\x1b[0m\n\x1b[0m\x1b[4m/usr/src/app/libs/sdk/app-angular-rest-sdk/src/test-setup.ts\x1b[24m\x1b[0m\n\x1b[0m  \x1b[2m1:16\x1b[22m  \x1b[33mwarning\x1b[39m  Unexpected any. Specify a different type  \x1b[2m@typescript-eslint/no-explicit-any\x1b[22m\x1b[0m\n\x1b[0m\x1b[0m\n\x1b[0m\x1b[33m\x1b[1m\u2716 1 problem (0 errors, 1 warning)\x1b[22m\x1b[39m\x1b[0m\n\x1b[0m\x1b[33m\x1b[1m\x1b[22m\x1b[39m\x1b[0m\n\u2716 1 problem (0 errors, 1 warning)\n\nESLint found too many warnings (maximum: -1).\n\n> nx run client:lint --fix\n\n\nLinting "client"...\n\x1b[0m\x1b[0m\n\x1b[0m\x1b[4m/usr/src/app/apps/client/src/test-setup.ts\x1b[24m\x1b[0m\n\x1b[0m  \x1b[2m1:16\x1b[22m  \x1b[33mwarning\x1b[39m  Unexpected any. Specify a different type  \x1b[2m@typescript-eslint/no-explicit-any\x1b[22m\x1b[0m\n\x1b[0m\x1b[0m\n\x1b[0m\x1b[33m\x1b[1m\u2716 1 problem (0 errors, 1 warning)\x1b[22m\x1b[39m\x1b[0m\n\x1b[0m\x1b[33m\x1b[1m\x1b[22m\x1b[39m\x1b[0m\n\u2716 1 problem (0 errors, 1 warning)\n\nESLint found too many warnings (maximum: -1).\n\n> nx run server:lint --fix\n\n\nLinting "server"...\n\n\u2714 All files pass linting\n\nESLint found too many warnings (maximum: -1).\n\n\n\n NX   Successfully ran target lint for 4 projects\n\n\n\n NX   Running target build for 4 projects:\n\n- app-angular-rest-sdk\n- app-rest-sdk\n- client\n- server\n\n\n\n> nx run app-rest-sdk:build\n\n\x1b[1m\x1b[33mYour library compilation option specifies that the compiler external helper (tslib) is needed but it is not installed.\x1b[39m\x1b[22m\nCompiling TypeScript files for project "app-rest-sdk"...\nDone compiling TypeScript files for project "app-rest-sdk".\n\n> nx run app-angular-rest-sdk:build:production\n\n\x1b[34mBuilding Angular Package\x1b[39m\n\x1b[37m\x1b[39m\n\x1b[37m------------------------------------------------------------------------------\x1b[39m\n\x1b[37mBuilding entry point \'@nestjs-mod-fullstack/app-angular-rest-sdk\'\x1b[39m\n\x1b[37m------------------------------------------------------------------------------\x1b[39m\n- Compiling with Angular sources in Ivy partial compilation mode.\n\x1b[32m\u2714\x1b[39m Compiling with Angular sources in Ivy partial compilation mode.\n\x1b[32m\u2714\x1b[39m Generating FESM bundles\n- Copying assets\n\x1b[32m\u2714\x1b[39m Copying assets\n- Writing package manifest\n\x1b[32m\u2714\x1b[39m Writing package manifest\n\x1b[32m\u2714\x1b[39m Built @nestjs-mod-fullstack/app-angular-rest-sdk\n\x1b[32m\x1b[39m\n\x1b[32m------------------------------------------------------------------------------\x1b[39m\n\x1b[32mBuilt Angular Package\x1b[39m\n\x1b[32m - from: /usr/src/app/libs/sdk/app-angular-rest-sdk\x1b[39m\n\x1b[32m - to:   /usr/src/app/dist/libs/sdk/app-angular-rest-sdk\x1b[39m\n\x1b[32m------------------------------------------------------------------------------\x1b[39m\n\x1b[37m\x1b[37m\x1b[39m\x1b[37m\x1b[39m\n\x1b[37m\x1b[37mBuild at: \x1b[1m2024-09-08T15:52:28.701Z\x1b[22m - Time: \x1b[1m2306\x1b[22mms\x1b[39m\x1b[37m\x1b[39m\n\x1b[37m\x1b[37m\x1b[39m\x1b[37m\x1b[39m\n\n> nx run server:build:production\n\nchunk (runtime: main) \x1b[1m\x1b[32mmain.js\x1b[39m\x1b[22m (main) 12.8 KiB \x1b[1m\x1b[33m[entry]\x1b[39m\x1b[22m \x1b[1m\x1b[32m[rendered]\x1b[39m\x1b[22m\nwebpack compiled \x1b[1m\x1b[32msuccessfully\x1b[39m\x1b[22m (77fef9f77a8e1069)\n\n> nx run client:build:production\n\n- Generating browser application bundles (phase: setup)...\n\x1b[32m\u2714\x1b[39m Browser application bundle generation complete.\n\x1b[32m\u2714\x1b[39m Browser application bundle generation complete.\n- Copying assets...\n\x1b[32m\u2714\x1b[39m Copying assets complete.\n- Generating index html...\n\x1b[32m\u2714\x1b[39m Index html generation complete.\n\x1b[37m\x1b[0m\x1b[0m\x1b[39m\n\x1b[37m\x1b[0m\x1b[1mInitial chunk files\x1b[22m          \x1b[2m | \x1b[22m\x1b[1mNames\x1b[22m        \x1b[2m | \x1b[22m \x1b[1mRaw size\x1b[22m\x1b[2m | \x1b[22m\x1b[1mEstimated transfer size\x1b[22m\x1b[0m\x1b[39m\n\x1b[37m\x1b[0m\x1b[32mmain.7e68bd24636243f2.js\x1b[39m\x1b[37m     \x1b[2m | \x1b[22m\x1b[2mmain\x1b[22m         \x1b[2m | \x1b[22m\x1b[36m250.88 kB\x1b[39m\x1b[37m\x1b[2m | \x1b[22m               \x1b[36m65.65 kB\x1b[39m\x1b[37m\x1b[0m\x1b[39m\n\x1b[37m\x1b[0m\x1b[32mpolyfills.b4ad6ba87a9b45cc.js\x1b[39m\x1b[37m\x1b[2m | \x1b[22m\x1b[2mpolyfills\x1b[22m    \x1b[2m | \x1b[22m \x1b[36m34.80 kB\x1b[39m\x1b[37m\x1b[2m | \x1b[22m               \x1b[36m11.36 kB\x1b[39m\x1b[37m\x1b[0m\x1b[39m\n\x1b[37m\x1b[0m\x1b[32mstyles.1f9d21bffd1c8a8d.css\x1b[39m\x1b[37m  \x1b[2m | \x1b[22m\x1b[2mstyles\x1b[22m       \x1b[2m | \x1b[22m  \x1b[36m5.90 kB\x1b[39m\x1b[37m\x1b[2m | \x1b[22m                \x1b[36m1.46 kB\x1b[39m\x1b[37m\x1b[0m\x1b[39m\n\x1b[37m\x1b[0m\x1b[32mruntime.a9340aa0e1064d4f.js\x1b[39m\x1b[37m  \x1b[2m | \x1b[22m\x1b[2mruntime\x1b[22m      \x1b[2m | \x1b[22m\x1b[36m890 bytes\x1b[39m\x1b[37m\x1b[2m | \x1b[22m              \x1b[36m504 bytes\x1b[39m\x1b[37m\x1b[0m\x1b[39m\n\x1b[37m\x1b[0m\x1b[0m\x1b[39m\n\x1b[37m\x1b[0m\x1b[1m \x1b[22m                            \x1b[2m | \x1b[22m\x1b[1mInitial total\x1b[22m\x1b[2m | \x1b[22m\x1b[1m292.46 kB\x1b[22m\x1b[2m | \x1b[22m               \x1b[1m78.97 kB\x1b[22m\x1b[0m\x1b[39m\n\x1b[37m\x1b[0m\x1b[0m\x1b[39m\n\x1b[37m\x1b[0mBuild at: \x1b[1m\x1b[37m2024-09-08T15:52:45.321Z\x1b[39m\x1b[37m\x1b[22m - Hash: \x1b[1m\x1b[37mcacf47df594708b3\x1b[39m\x1b[37m\x1b[22m - Time: \x1b[1m\x1b[37m16944\x1b[39m\x1b[37m\x1b[22mms\x1b[0m\x1b[39m\n\n\n\n NX   Successfully ran target build for 4 projects\n\n\n\n> @nestjs-mod-fullstack/source@0.0.0 docker-compose-full:prod:only-start\n> . .docker/set-env.sh && docker compose -f ./.docker/docker-compose-full.yml --env-file ./.docker/docker-compose-full.env --compatibility up -d\n\nWARN[0000] .docker/docker-compose-full.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion\n[+] Running 21/2\n \u2714 nestjs-mod-fullstack-postgre-sql Pulled 30.7s  92.33MB Pulling 30.6s\n \u2714 nestjs-mod-fullstack-https-portal Pulled 27.0s \u28ff\u28ff\u28ff\u28ff\u28ff\u2800] Pulling 26.9s\n[+] Running 9/9\n \u2714 Network docker_nestjs-mod-fullstack-network            Created0.1s\n \u2714 Volume "nestjs-mod-fullstack-https-portal-volume"      Created0.0s\n \u2714 Volume "nestjs-mod-fullstack-postgre-sql-volume"       Created0.0s\n \u2714 Container nestjs-mod-fullstack-postgre-sql             Healthy7.3s\n \u2714 Container nestjs-mod-fullstack-postgre-sql-migrations  Exited10.0s\n \u2714 Container nestjs-mod-fullstack-server                  Healthy41.2s\n \u2714 Container nestjs-mod-fullstack-nginx                   Healthy71.9s\n \u2714 Container nestjs-mod-fullstack-https-portal            Started72.2s\n \u2714 Container nestjs-mod-fullstack-e2e-tests               Started72.2s\n'})}),"\n",(0,t.jsx)(n.h3,{id:"11-we-display-a-list-of-the-collected-images-and-check-that-they-are-all-built-successfully",children:"11. We display a list of the collected images and check that they are all built successfully"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Commands"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker image list\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Console output"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ docker image list\nREPOSITORY                                            TAG       IMAGE ID       CREATED          SIZE\nghcr.io/nestjs-mod/nestjs-mod-fullstack-e2e-tests     0.0.0     0cfc73bba2ed   10 minutes ago   2.17GB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-e2e-tests     latest    0cfc73bba2ed   10 minutes ago   2.17GB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-nginx         0.0.1     d5502067f83f   12 minutes ago   47.6MB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-nginx         latest    d5502067f83f   12 minutes ago   47.6MB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-migrations    0.0.0     37854dd50cee   13 minutes ago   889MB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-migrations    latest    37854dd50cee   13 minutes ago   889MB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-server        0.0.1     0d97265cf4c3   14 minutes ago   406MB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-server        latest    0d97265cf4c3   14 minutes ago   406MB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-base-server   0.0.0     9375674299d4   14 minutes ago   423MB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-base-server   latest    9375674299d4   14 minutes ago   423MB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-builder       0.0.0     7d97e169a196   16 minutes ago   1.46GB\nghcr.io/nestjs-mod/nestjs-mod-fullstack-builder       latest    7d97e169a196   16 minutes ago   1.46GB\nsteveltn/https-portal                                 1         0b78eab92499   8 days ago       295MB\nbitnami/postgresql                                    15.5.0    47ef5063d3bc   7 months ago     275MB\n"})}),"\n",(0,t.jsx)(n.h3,{id:"12-we-display-a-list-of-running-containers",children:"12. We display a list of running containers"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Commands"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker stats\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Console output"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ docker stats\nCONTAINER ID   NAME                                CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS\n7681c91d0da3   nestjs-mod-fullstack-https-portal   0.00%     11.09MiB / 15.59GiB   0.07%     19.9kB / 0B       0B / 127kB        18\n45326f0c1f0d   nestjs-mod-fullstack-nginx          0.00%     11.21MiB / 15.59GiB   0.07%     60.9kB / 704kB    1.05MB / 8.19kB   8\n8c2c76c87d12   nestjs-mod-fullstack-server         0.02%     84.41MiB / 15.59GiB   0.53%     339kB / 21.7kB    28.8MB / 4.1kB    23\nef5075938209   nestjs-mod-fullstack-postgre-sql    0.00%     52.74MiB / 15.59GiB   0.33%     62.8kB / 25.6kB   119kB / 54.1MB    7\n"})}),"\n",(0,t.jsx)(n.h3,{id:"13-checking-the-result-of-running-e2e-tests",children:"13. Checking the result of running E2E tests"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Commands"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker logs nestjs-mod-fullstack-e2e-tests\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Console output"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ docker logs nestjs-mod-fullstack-e2e-tests\n\n> @nestjs-mod-fullstack/source@0.0.0 test:e2e\n> ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=e2e --skip-nx-cache=true --output-style=stream-without-prefixes\n\nNX  Falling back to ts-node for local typescript execution. This may be a little slower.\n - To fix this, ensure @swc-node/register and @swc/core have been installed\n\n NX   Running target e2e for 2 projects:\n\n- client-e2e\n- server-e2e\n\n\n\n> nx run client-e2e:e2e\n\n> playwright test\n\n\nRunning 6 tests using 3 workers\n  6 passed (4.9s)\n\nTo open last HTML report run:\n\n  npx playwright show-report ../../dist/.playwright/apps/client-e2e/playwright-report\n\n\n> nx run server-e2e:e2e\n\nSetting up...\n PASS   server-e2e  apps/server-e2e/src/server/server.spec.ts\n  GET /api\n    \u2713 should return a message (31 ms)\n    \u2713 should create and return a demo object (34 ms)\n    \u2713 should get demo object by id (9 ms)\n    \u2713 should get all demo object (7 ms)\n    \u2713 should delete demo object by id (7 ms)\n    \u2713 should get all demo object (5 ms)\nTest Suites: 1 passed, 1 total\nTests:       6 passed, 6 total\nSnapshots:   0 total\nTime:        0.643 s\nRan all test suites.\nTearing down...\n\n\n\n NX   Successfully ran target e2e for 2 projects\n"})}),"\n",(0,t.jsx)(n.h3,{id:"14-modifying-the-cicd-configuration-for-deploying-applications-to-a-dedicated-server",children:"14. Modifying the CI/CD configuration for deploying applications to a dedicated server"}),"\n",(0,t.jsx)(n.p,{children:"The configuration turned out to be very large, as it takes into account various scenarios and stages of building images in order to speed up the deployment process."}),"\n",(0,t.jsx)(n.p,{children:"I will describe the main points below and at the end there will be a link to the full contents of the CI/CD configuration."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Checking for the presence of the base image"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# ...\njobs:\n  # ...\n  check-base-server-image:\n    runs-on: ubuntu-latest\n    # We ignore errors that may occur during the Job process\n    continue-on-error: true\n    steps:\n      # Downloading the repository\n      - name: Checkout repository\n        # If we write [skip cache] in the commit text, then all image checks will be ignored and the image build will be launched\n        if: ${{ !contains(github.event.head_commit.message, \'[skip cache]\') }}\n        uses: actions/checkout@v4\n      # Creating new environment variables as part of the Job process\n      - name: Set ENV vars\n        if: ${{ !contains(github.event.head_commit.message, \'[skip cache]\') }}\n        id: version\n        # Getting the project version from package.json\n        run: |\n          echo "root_version="$(npm pkg get version --workspaces=false | tr -d \\") >> "$GITHUB_OUTPUT"\n      # We check the presence of a container with a certain version in the Docker register\n      - name: Check exists docker image\n        if: ${{ !contains(github.event.head_commit.message, \'[skip cache]\') }}\n        id: check-exists\n        # To verify, we first get an authorization token in the Docker register, and then check for the presence of a manifest file for a specific version\n        run: |\n          export TOKEN=$(curl -u ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} https://${{ env.REGISTRY }}/token\\?scope\\="repository:${{ env.BASE_SERVER_IMAGE_NAME}}:pull" | jq -r .token)\n          curl --head --fail -H "Authorization: Bearer $TOKEN" https://${{ env.REGISTRY }}/v2/${{ env.BASE_SERVER_IMAGE_NAME}}/manifests/${{ steps.version.outputs.root_version }}\n      # We check the response of the request for the presence of the manifests file and if the response code is not 404, it means that the Docker image exists\n      - name: Store result of check exists docker image\n        id: store-check-exists\n        if: ${{ !contains(github.event.head_commit.message, \'[skip cache]\') && !contains(needs.check-exists.outputs.result, \'HTTP/2 404\') }}\n        run: |\n          echo "conclusion=success" >> "$GITHUB_OUTPUT"\n    # We put the result of the request in the output object of this Job\n    outputs:\n      result: ${{ steps.store-check-exists.outputs.conclusion }}\n# ...\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Building a basic image"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# ...\njobs:\n  # ...\n  build-and-push-base-server-image:\n    runs-on: ubuntu-latest\n    # The current Job will start only after passing the check-base-server-image Jobs\n    needs: [check-base-server-image]\n    # Requesting permissions to publish Docker images to the Github Docker registry\n    permissions:\n      contents: read\n      packages: write\n      attestations: write\n      id-token: write\n    steps:\n      # Downloading the repository\n      - name: Checkout repository\n        if: ${{ needs.check-base-server-image.outputs.result != 'success' || contains(github.event.head_commit.message, '[skip cache]') }}\n        uses: actions/checkout@v4\n      # Creating new environment variables as part of the Job process\n      - name: Set ENV vars\n        if: ${{ needs.check-base-server-image.outputs.result != 'success' || contains(github.event.head_commit.message, '[skip cache]') }}\n        id: version\n        # Getting the project version from package.json\n        run: |\n          echo \"root_version=\"$(npm pkg get version --workspaces=false | tr -d \\\") >> \"$GITHUB_OUTPUT\"\n      # Logging in to the Docker register\n      - name: Log in to the Container registry\n        if: ${{ needs.check-base-server-image.outputs.result != 'success' || contains(github.event.head_commit.message, '[skip cache]') }}\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      # We collect and publish a Docker image\n      - name: Build and push Docker image\n        # We check that the image check failed, which means that we need to collect and publish the image,\n        # and also check that the image check was not ignored\n        if: ${{ needs.check-base-server-image.outputs.result != 'success' || contains(github.event.head_commit.message, '[skip cache]') }}\n        id: push\n        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4\n        with:\n          context: .\n          push: true\n          file: ./.docker/base-server.Dockerfile\n          # The built image will have a tag equal to the project version, and will also have the latest tag\n          tags: ${{ env.REGISTRY}}/${{ env.BASE_SERVER_IMAGE_NAME}}:${{ steps.version.outputs.root_version }},${{ env.REGISTRY}}/${{ env.BASE_SERVER_IMAGE_NAME}}:latest\n          # We specify a repository for checking existing layers, this is necessary to partially speed up the build\n          cache-from: type=registry,ref=${{ env.REGISTRY}}/${{ env.BASE_SERVER_IMAGE_NAME}}:${{ steps.version.outputs.root_version }}\n          cache-to: type=inline\n      # We form a digital signature of the image\n      - name: Generate artifact attestation\n        # We ignore errors that occur during the work process\n        continue-on-error: true\n        if: ${{ needs.check-base-server-image.outputs.result != 'success' || contains(github.event.head_commit.message, '[skip cache]') }}\n        uses: actions/attest-build-provenance@v1\n        with:\n          subject-name: ${{ env.REGISTRY }}/${{ env.BASE_SERVER_IMAGE_NAME}}\n          subject-digest: ${{ steps.push.outputs.digest }}\n          push-to-registry: true\n# ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["CI/CD configuration file: ",(0,t.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/blob/master/.github/workflows/docker-compose.workflows.yml",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/blob/master/.github/workflows/docker-compose.workflows.yml"})]}),"\n",(0,t.jsx)(n.h3,{id:"15-commit-the-updates-to-the-repository-and-see-the-result-of-the-work-in-github",children:'15. Commit the updates to the repository and see the result of the work in "Github"'}),"\n",(0,t.jsxs)(n.p,{children:["For the current project, the workflow of the runners can be seen here: ",(0,t.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions"})]}),"\n",(0,t.jsxs)(n.p,{children:["The current workflow of the runner: ",(0,t.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/10762536037",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/10762536037"}),"\nThe current time of full deployment together with the launch of E2E tests: ",(0,t.jsx)(n.code,{children:"6m 20s"})]}),"\n",(0,t.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["At the beginning of writing this post, I planned to use a cool tool to run Github actions locally ",(0,t.jsx)(n.a,{href:"https://github.com/nektos/act",children:"https://github.com/nektos/act"})," and I was able to successfully launch the construction and launch of the entire project locally through it, but for this I had to allocate a larger amount of memory and processor, as a result of ",(0,t.jsx)(n.a,{href:"https://github.com/nektos/act",children:"https://github.com/nektos/act"})," I had to give up and write a small Bash script to build images."]}),"\n",(0,t.jsx)(n.p,{children:"The volumes of the images of the migrator and the test runner turned out to be very large, but this is not so critical, since these images are rebuilt only when the version of the root package.json is changed."}),"\n",(0,t.jsx)(n.p,{children:"At the moment, there is no automatic rebuilding of images after changing the code or changing the dependencies of the project, rebuilding occurs only after manual modification of the version of the root package.json or package.json applications, automatic versioning will appear in further posts and nothing will need to be changed manually."}),"\n",(0,t.jsx)(n.p,{children:"Although the project uses nx, at this stage I am not using all its features, since first I need to implement the usual ways to optimize and speed up the process of building and deploying images."}),"\n",(0,t.jsx)(n.h3,{id:"plans",children:"Plans"}),"\n",(0,t.jsx)(n.p,{children:"In the next post, I will install Kubernetes on a dedicated server and reconfigure the CI/CD configuration of the project..."}),"\n",(0,t.jsx)(n.h3,{id:"links",children:"Links"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})," - website from the post"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/commit/6270febc23d50100133897630c1476b30b7e8751",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/commit/6270febc23d50100133897630c1476b30b7e8751"})," - current changes"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"#docker #github #nestjsmod #fullstack\n#2024-09-08"})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);