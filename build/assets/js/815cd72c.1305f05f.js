"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[3108],{5813:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=t(4848),a=t(8453);const r={},i="Adding multi-language support to NestJS and Angular applications",o={id:"en-posts/fullstack/2024-12-03",title:"Adding multi-language support to NestJS and Angular applications",description:"In this article I will add support for multiple languages \u200b\u200bin NestJS and Angular applications, for error messages, notifications and data retrieved from the database.",source:"@site/docs/en-posts/fullstack/2024-12-03.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-12-03",permalink:"/docs/en-posts/fullstack/2024-12-03",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-12-03.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Validating REST requests in a NestJS application and displaying errors in Angular application forms",permalink:"/docs/en-posts/fullstack/2024-11-24"},next:{title:"Timezone support in a full-stack application based on NestJS and Angular: working with REST and WebSockets",permalink:"/docs/en-posts/fullstack/2024-12-12"}},l={},c=[{value:"1. We install all the necessary libraries",id:"1-we-install-all-the-necessary-libraries",level:3},{value:"2. Adding translation support to an Angular application",id:"2-adding-translation-support-to-an-angular-application",level:3},{value:"3. We update the existing code and templates for the subsequent launch of parsing words and sentences for translating the Angular application",id:"3-we-update-the-existing-code-and-templates-for-the-subsequent-launch-of-parsing-words-and-sentences-for-translating-the-angular-application",level:3},{value:"4. Adding translation support to the NestJS application",id:"4-adding-translation-support-to-the-nestjs-application",level:3},{value:"5. Updating the existing code for subsequent launch of parsing of words and sentences for translation of the NestJS application",id:"5-updating-the-existing-code-for-subsequent-launch-of-parsing-of-words-and-sentences-for-translation-of-the-nestjs-application",level:3},{value:"6. Automatic generation of dictionaries for translations",id:"6-automatic-generation-of-dictionaries-for-translations",level:3},{value:"7. Adding translations for all dictionaries",id:"7-adding-translations-for-all-dictionaries",level:3},{value:"8. Add a test to check translated responses from the backend",id:"8-add-a-test-to-check-translated-responses-from-the-backend",level:3},{value:"9. Add a test to check the correct switching of translations in the frontend application",id:"9-add-a-test-to-check-the-correct-switching-of-translations-in-the-frontend-application",level:3},{value:"10. We launch the infrastructure with applications in development mode and check the operation through E2E tests",id:"10-we-launch-the-infrastructure-with-applications-in-development-mode-and-check-the-operation-through-e2e-tests",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3}];function p(n){const e={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"adding-multi-language-support-to-nestjs-and-angular-applications",children:"Adding multi-language support to NestJS and Angular applications"}),"\n",(0,s.jsxs)(e.p,{children:["In this article I will add support for multiple languages \u200b\u200bin ",(0,s.jsx)(e.code,{children:"NestJS"})," and ",(0,s.jsx)(e.code,{children:"Angular"})," applications, for error messages, notifications and data retrieved from the database."]}),"\n",(0,s.jsx)(e.h3,{id:"1-we-install-all-the-necessary-libraries",children:"1. We install all the necessary libraries"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Commands"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install --save @jsverse/transloco nestjs-translates class-validator-multi-lang class-transformer-global-storage @jsverse/transloco-keys-manager\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Since we use external generators, we do not have access to the generated code, but to be able to translate validation errors, we need to use the ",(0,s.jsx)(e.code,{children:"class-validator-multi-lang"})," library instead of ",(0,s.jsx)(e.code,{children:"class-validator"}),", which the generator adds."]}),"\n",(0,s.jsx)(e.p,{children:"To replace imports in typescript files, we will install and connect the webpack plugin for replacing strings."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Commands"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install --save string-replace-loader\n"})}),"\n",(0,s.jsx)(e.p,{children:"We register replacement rules in our webpack config."}),"\n",(0,s.jsxs)(e.p,{children:["Updating the file ",(0,s.jsx)(e.em,{children:"apps/server/webpack.config.js"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const { composePlugins, withNx } = require('@nx/webpack');\n\n// Nx plugins for webpack.\nmodule.exports = composePlugins(\n  withNx({\n    sourceMap: true,\n    target: 'node',\n  }),\n  (config) => {\n    // Update the webpack config as needed here.\n    // e.g. `config.plugins.push(new MyPlugin())`\n\n    config.module.rules = [\n      ...config.module.rules,\n      {\n        test: /\\.(ts)$/,\n        loader: 'string-replace-loader',\n        options: {\n          search: `class-validator`,\n          replace: `class-validator-multi-lang`,\n          flags: 'g',\n        },\n      },\n      {\n        test: /\\.(ts)$/,\n        loader: 'string-replace-loader',\n        options: {\n          search: 'class-transformer',\n          replace: 'class-transformer-global-storage',\n          flags: 'g',\n        },\n      },\n    ];\n    return config;\n  }\n);\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-adding-translation-support-to-an-angular-application",children:"2. Adding translation support to an Angular application"}),"\n",(0,s.jsx)(e.p,{children:"Adding a new module to the frontend config."}),"\n",(0,s.jsxs)(e.p,{children:["Updating the file ",(0,s.jsx)(e.em,{children:"apps/client/src/app/app.config.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { provideTransloco } from '@jsverse/transloco';\nimport { marker } from '@jsverse/transloco-keys-manager/marker';\nimport { AUTHORIZER_URL } from '@nestjs-mod-fullstack/auth-angular';\nimport { TranslocoHttpLoader } from './integrations/transloco-http.loader';\n\nexport const appConfig = ({ authorizerURL, minioURL }: { authorizerURL: string; minioURL: string }): ApplicationConfig => {\n  return {\n    providers: [\n      // ...\n      provideTransloco({\n        config: {\n          availableLangs: [\n            {\n              id: marker('en'),\n              label: marker('app.locale.name.english'),\n            },\n            {\n              id: marker('ru'),\n              label: marker('app.locale.name.russian'),\n            },\n          ],\n          defaultLang: 'en',\n          fallbackLang: 'en',\n          reRenderOnLangChange: true,\n          prodMode: true,\n          missingHandler: {\n            logMissingKey: true,\n            useFallbackTranslation: true,\n            allowEmpty: true,\n          },\n        },\n        loader: TranslocoHttpLoader,\n      }),\n    ],\n  };\n};\n"})}),"\n",(0,s.jsx)(e.p,{children:"To download translations from the Internet, you need to create a special downloader."}),"\n",(0,s.jsxs)(e.p,{children:["Create a file ",(0,s.jsx)(e.em,{children:"apps/client/src/app/integrations/transloco-http.loader.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Translation, TranslocoLoader } from '@jsverse/transloco';\nimport { catchError, forkJoin, map, of } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private readonly httpClient: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return forkJoin({\n      translation: this.httpClient.get<Translation>(`./assets/i18n/${lang}.json`).pipe(\n        catchError(() => {\n          return of({});\n        })\n      ),\n      vendor: this.httpClient.get(`./assets/i18n/${lang}.vendor.json`).pipe(\n        catchError(() => {\n          return of({});\n        })\n      ),\n    }).pipe(\n      map(({ translation, vendor }) => {\n        const dictionaries = {\n          ...translation,\n          ...Object.keys(vendor).reduce((all, key) => ({ ...all, ...vendor[key] }), {}),\n        };\n\n        for (const key in dictionaries) {\n          if (Object.prototype.hasOwnProperty.call(dictionaries, key)) {\n            const value = dictionaries[key];\n            if (!value && value !== 'empty') {\n              delete dictionaries[key];\n            }\n          }\n        }\n        return dictionaries;\n      })\n    );\n  }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"Translations will be loaded when the application is launched."}),"\n",(0,s.jsxs)(e.p,{children:["Updating the file ",(0,s.jsx)(e.em,{children:"apps/client/src/app/app-initializer.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { TranslocoService } from '@jsverse/transloco';\nimport { AppRestService, AuthorizerRestService, FilesRestService, TimeRestService, WebhookRestService } from '@nestjs-mod-fullstack/app-angular-rest-sdk';\nimport { AuthService, TokensService } from '@nestjs-mod-fullstack/auth-angular';\nimport { catchError, map, merge, mergeMap, of, Subscription, tap, throwError } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class AppInitializer {\n  private subscribeToTokenUpdatesSubscription?: Subscription;\n\n  constructor(\n    // ..\n    private readonly translocoService: TranslocoService,\n    private readonly tokensService: TokensService\n  ) {}\n\n  resolve() {\n    this.subscribeToTokenUpdates();\n    return (\n      this.authService.getAuthorizerClientID()\n        ? of(null)\n        : this.authorizerRestService.authorizerControllerGetAuthorizerClientID().pipe(\n            map(({ clientID }) => {\n              this.authService.setAuthorizerClientID(clientID);\n              return null;\n            })\n          )\n    ).pipe(\n      // ..\n      mergeMap(() => {\n        const lang = localStorage.getItem('activeLang') || this.translocoService.getDefaultLang();\n\n        this.translocoService.setActiveLang(lang);\n        localStorage.setItem('activeLang', lang);\n\n        return this.translocoService.load(lang);\n      })\n      // ..\n    );\n  }\n\n  private subscribeToTokenUpdates() {\n    if (this.subscribeToTokenUpdatesSubscription) {\n      this.subscribeToTokenUpdatesSubscription.unsubscribe();\n      this.subscribeToTokenUpdatesSubscription = undefined;\n    }\n    this.subscribeToTokenUpdatesSubscription = merge(this.tokensService.tokens$, this.translocoService.langChanges$)\n      .pipe(\n        tap(() => {\n          // ..\n        })\n      )\n      .subscribe();\n  }\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["The default language will be ",(0,s.jsx)(e.code,{children:"English"}),". To switch the language in the navigation menu, we will add a drop-down list with the languages \u200b\u200bavailable for switching."]}),"\n",(0,s.jsxs)(e.p,{children:["Updating the file ",(0,s.jsx)(e.em,{children:"apps/client/src/app/app.component.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { LangDefinition, TranslocoDirective, TranslocoPipe, TranslocoService } from '@jsverse/transloco';\nimport { marker } from '@jsverse/transloco-keys-manager/marker';\nimport { AppRestService, TimeRestService } from '@nestjs-mod-fullstack/app-angular-rest-sdk';\n// ...\n\n@UntilDestroy()\n@Component({\n  standalone: true,\n  imports: [RouterModule, NzMenuModule, NzLayoutModule, NzTypographyModule, AsyncPipe, NgForOf, NgFor, TranslocoPipe, TranslocoDirective],\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  title = marker('client');\n  serverMessage$ = new BehaviorSubject('');\n  serverTime$ = new BehaviorSubject('');\n  authUser$?: Observable<User | undefined>;\n  lang$ = new BehaviorSubject<string>('');\n  availableLangs$ = new BehaviorSubject<LangDefinition[]>([]);\n\n  constructor(\n    // ...\n    private readonly appRestService: AppRestService,\n    private readonly translocoService: TranslocoService\n  ) {}\n\n  ngOnInit() {\n    this.loadAvailableLangs();\n    this.subscribeToLangChanges();\n\n    this.fillServerMessage().pipe(untilDestroyed(this)).subscribe();\n    // ...\n  }\n\n  setActiveLang(lang: string) {\n    this.translocoService.setActiveLang(lang);\n    localStorage.setItem('activeLang', lang);\n  }\n\n  private loadAvailableLangs() {\n    this.availableLangs$.next(this.translocoService.getAvailableLangs() as LangDefinition[]);\n  }\n\n  private subscribeToLangChanges() {\n    this.translocoService.langChanges$\n      .pipe(\n        tap((lang) => this.lang$.next(lang)),\n        mergeMap(() => this.fillServerMessage()),\n        untilDestroyed(this)\n      )\n      .subscribe();\n  }\n\n  // ...\n\n  private fillServerMessage() {\n    return this.appRestService.appControllerGetData().pipe(tap((result) => this.serverMessage$.next(result.message)));\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-we-update-the-existing-code-and-templates-for-the-subsequent-launch-of-parsing-words-and-sentences-for-translating-the-angular-application",children:"3. We update the existing code and templates for the subsequent launch of parsing words and sentences for translating the Angular application"}),"\n",(0,s.jsxs)(e.p,{children:["There are a lot of changes in the files, here I will list the main principles of implementing translation support in the ",(0,s.jsx)(e.code,{children:"Angular"})," application files."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Using the translation directive (transloco=)"})}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"libs/core/auth-angular/src/lib/forms/auth-profile-form/auth-profile-form.component.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { TranslocoDirective } from \'@jsverse/transloco\';\n\n@Component({\n  standalone: true,\n  imports: [\n    // ...\n    TranslocoDirective,\n  ],\n  selector: \'auth-profile-form\',\n  template: `@if (formlyFields$ | async; as formlyFields) {\n    <form nz-form [formGroup]="form" (ngSubmit)="submitForm()_\n      <formly-form [model]="formlyModel$ | async" [fields]="formlyFields" [form]="form_ </formly-form>\n      @if (!hideButtons) {\n      <nz-form-control>\n        <div class="flex justify-between_\n          <div></div>\n          <button nz-button nzType="primary" type="submit" [disabled]="!form.valid" transloco="Update_</button>\n        </div>\n      </nz-form-control>\n      }\n    </form>\n    } `,\n})\nexport class AuthProfileFormComponent implements OnInit {}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Using the translation pipe (| transloco)"})}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/app/pages/demo/forms/demo-form/demo-form.component.html"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'@if (formlyFields$ | async; as formlyFields) {\n<form nz-form [formGroup]="form" (ngSubmit)="submitForm()_\n  <formly-form [model]="formlyModel$ | async" [fields]="formlyFields" [form]="form_ </formly-form>\n  @if (!hideButtons) {\n  <nz-form-control>\n    <button nzBlock nz-button nzType="primary" type="submit" [disabled]="!form.valid_{{ id ? (\'Save\' | transloco) : (\'Create\' | transloco) }}</button>\n  </nz-form-control>\n  }\n</form>\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Using the translation service (translocoService: TranslocoService)"})}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/app/pages/demo/forms/demo-form/demo-form.component.html"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// ...\nimport { TranslocoService } from '@jsverse/transloco';\n\n@Component({\n  // ...\n})\nexport class AuthSignInFormComponent implements OnInit {\n  // ...\n\n  constructor(\n    @Optional()\n    @Inject(NZ_MODAL_DATA)\n    private readonly nzModalData: AuthSignInFormComponent,\n    private readonly authService: AuthService,\n    private readonly nzMessageService: NzMessageService,\n    private readonly translocoService: TranslocoService\n  ) {}\n\n  ngOnInit(): void {\n    Object.assign(this, this.nzModalData);\n    this.setFieldsAndModel({ password: '' });\n  }\n\n  setFieldsAndModel(data: LoginInput = { password: '' }) {\n    this.formlyFields$.next([\n      {\n        key: 'email',\n        type: 'input',\n        validation: {\n          show: true,\n        },\n        props: {\n          label: this.translocoService.translate(`auth.sign-in-form.fields.email`),\n          placeholder: 'email',\n          required: true,\n        },\n      },\n      // ...\n    ]);\n    // ...\n  }\n  // ...\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Using a marker"})}),"\n",(0,s.jsxs)(e.p,{children:["The output of the translation via a directive, pipe and service is used not only for translation, but also as a marker for compiling dictionaries with sentences for translation. The project contains files without directives, pipes and services that contain sentences for translation, such sentences must be wrapped in the ",(0,s.jsx)(e.code,{children:"marker"})," function."]}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/app/app.config.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// ...\nimport { marker } from '@jsverse/transloco-keys-manager/marker';\n// ...\n\nexport const appConfig = ({ authorizerURL, minioURL }: { authorizerURL: string; minioURL: string }): ApplicationConfig => {\n  return {\n    providers: [\n      // ...\n      provideTransloco({\n        config: {\n          availableLangs: [\n            {\n              id: marker('en'),\n              label: marker('app.locale.name.english'),\n            },\n            {\n              id: marker('ru'),\n              label: marker('app.locale.name.russian'),\n            },\n          ],\n          defaultLang: 'en',\n          fallbackLang: 'en',\n          reRenderOnLangChange: true,\n          prodMode: true,\n          missingHandler: {\n            logMissingKey: true,\n            useFallbackTranslation: true,\n            allowEmpty: true,\n          },\n        },\n        loader: TranslocoHttpLoader,\n      }),\n    ],\n  };\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"4-adding-translation-support-to-the-nestjs-application",children:"4. Adding translation support to the NestJS application"}),"\n",(0,s.jsxs)(e.p,{children:["Adding a new module to ",(0,s.jsx)(e.code,{children:"AppModule"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["Updating the file ",(0,s.jsx)(e.em,{children:"apps/server/src/app/app.module.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { TranslatesModule } from 'nestjs-translates';\n// ...\n\nexport const { AppModule } = createNestModule({\n  moduleName: 'AppModule',\n  moduleCategory: NestModuleCategory.feature,\n  imports: [\n    // ...\n    TranslatesModule.forRootDefault({\n      localePaths: [join(__dirname, 'assets', 'i18n'), join(__dirname, 'assets', 'i18n', 'getText'), join(__dirname, 'assets', 'i18n', 'class-validator-messages')],\n      vendorLocalePaths: [join(__dirname, 'assets', 'i18n')],\n      locales: ['en', 'ru'],\n      validationPipeOptions: {\n        validatorPackage: require('class-validator'),\n        transformerPackage: require('class-transformer'),\n        transform: true,\n        whitelist: true,\n        validationError: {\n          target: false,\n          value: false,\n        },\n        exceptionFactory: (errors) => new ValidationError(ValidationErrorEnum.COMMON, undefined, errors),\n      },\n      usePipes: true,\n      useInterceptors: true,\n    }),\n    // ...\n  ],\n  // ...\n});\n"})}),"\n",(0,s.jsxs)(e.p,{children:["In order for validation errors to be sent to the frontend in the language that was specified in the request to the backend, it is necessary to connect the corresponding dictionaries with translations to the ",(0,s.jsx)(e.code,{children:"NX"})," project."]}),"\n",(0,s.jsxs)(e.p,{children:["Updating the file ",(0,s.jsx)(e.em,{children:"apps/server/project.json"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "name": "server",\n  // ...\n  "targets": {\n    "build": {\n      "executor": "@nx/webpack:webpack",\n      // ...\n      "options": {\n        // ...\n        "assets": [\n          "apps/server/src/assets",\n          {\n            "glob": "**/*.json",\n            "input": "./node_modules/class-validator-multi-lang/i18n/",\n            "output": "./assets/i18n/class-validator-multi-lang-messages/"\n          }\n        ],\n        "webpackConfig": "apps/server/webpack.config.js"\n      }\n    }\n    // ...\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"5-updating-the-existing-code-for-subsequent-launch-of-parsing-of-words-and-sentences-for-translation-of-the-nestjs-application",children:"5. Updating the existing code for subsequent launch of parsing of words and sentences for translation of the NestJS application"}),"\n",(0,s.jsxs)(e.p,{children:["There are a lot of changes in the files, here I will list the main principles of implementing support for translations in the files of the ",(0,s.jsx)(e.code,{children:"NestJS"})," application."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Using a decorator with a translation function (@InjectTranslateFunction() getText: TranslateFunction)"})}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/server/src/app/app.controller.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { InjectTranslateFunction, TranslateFunction } from 'nestjs-translates';\n// ...\n@AllowEmptyUser()\n@Controller()\nexport class AppController {\n  @Get('/get-data')\n  @ApiOkResponse({ type: AppData })\n  getData(@InjectTranslateFunction() getText: TranslateFunction) {\n    return this.appService.getData(getText);\n  }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Using the translation service (translatesService: TranslatesService)"})}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"libs/core/webhook/src/lib/controllers/webhook.controller.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// ...\nimport { CurrentLocale, TranslatesService } from 'nestjs-translates';\n\n// ...\n@Controller('/webhook')\nexport class WebhookController {\n  constructor(\n    // ...\n    private readonly translatesService: TranslatesService\n  ) {}\n\n  // ...\n\n  @Delete(':id')\n  @ApiOkResponse({ type: StatusResponse })\n  async deleteOne(\n    // ...\n    @CurrentLocale() locale: string\n  ) {\n    // ...\n    return { message: this.translatesService.translate('ok', locale) };\n  }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Using a marker (getText)"})}),"\n",(0,s.jsx)(e.p,{children:"The output of the translation via a decorator with a function and a service is used not only for translation, but also as a marker for compiling dictionaries with sentences for translation."}),"\n",(0,s.jsxs)(e.p,{children:["If you want to mark a sentence so that it gets into a dictionary with translations, then you need to wrap the sentence in the ",(0,s.jsx)(e.code,{children:"getText"})," function."]}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"libs/core/auth/src/lib/auth.errors.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// ...\nimport { getText } from 'nestjs-translates';\n\n// ...\n\nexport const AUTH_ERROR_ENUM_TITLES: Record<AuthErrorEnum, string> = {\n  [AuthErrorEnum.COMMON]: getText('Auth error'),\n  // ...\n};\n\n// ...\n"})}),"\n",(0,s.jsx)(e.h3,{id:"6-automatic-generation-of-dictionaries-for-translations",children:"6. Automatic generation of dictionaries for translations"}),"\n",(0,s.jsx)(e.p,{children:"The markup of sentences and words for backend and frontend translations differs. A long time ago I made a utility for myself that collects dictionaries for such projects, and I will use it in this project."}),"\n",(0,s.jsx)(e.p,{children:"If the utility was not previously installed or the version was old, then you need to reinstall it."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Commands"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install --save-dev rucken@latest\n"})}),"\n",(0,s.jsx)(e.p,{children:"Launch the utility"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Commands"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"./node_modules/.bin/rucken prepare --locales=en,ru --update-package-version=false\n"})}),"\n",(0,s.jsx)(e.p,{children:"After running this command, the project will have many files with extensions: po, pot, json."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example files"})}),"\n",(0,s.jsxs)(e.p,{children:["The file with the extension ",(0,s.jsx)(e.code,{children:"XXX.pot"})," contains the keys of the sentences for translation."]}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/assets/i18n/template.pot"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:'msgid ""\nmsgstr ""\n"Project-Id-Version: i18next-conv\\n"\n"mime-version: 1.0\\n"\n"Content-Type: text/plain; charset=utf-8\\n"\n"Content-Transfer-Encoding: 8bit\\n"\n"Plural-Forms: nplurals=2; plural=(n != 1)\\n"\n\nmsgid "Create new"\nmsgstr "Create new"\n\nmsgid "app.locale.name.english"\nmsgstr "app.locale.name.english"\n\nmsgid "app.locale.name.russian"\nmsgstr "app.locale.name.russian"\n\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Files with the extension ",(0,s.jsx)(e.code,{children:"<lang>.po"})," contain translations into the required language."]}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/assets/i18n/en.po"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:'msgid ""\nmsgstr ""\n"Project-Id-Version: i18next-conv\\n"\n"mime-version: 1.0\\n"\n"Content-Type: text/plain; charset=utf-8\\n"\n"Content-Transfer-Encoding: 8bit\\n"\n"Plural-Forms: nplurals=2; plural=(n != 1)\\n"\n\nmsgid "Create new"\nmsgstr "Create new"\n\nmsgid "app.locale.name.english"\nmsgstr "app.locale.name.english"\n\nmsgid "app.locale.name.russian"\nmsgstr "app.locale.name.russian"\n\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/assets/i18n/ru.po"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:'msgid ""\nmsgstr ""\n"Project-Id-Version: i18next-conv\\n"\n"mime-version: 1.0\\n"\n"Content-Type: text/plain; charset=utf-8\\n"\n"Content-Transfer-Encoding: 8bit\\n"\n"Plural-Forms: nplurals=2; plural=(n != 1)\\n"\n\nmsgid "Create new"\nmsgstr ""\n\nmsgid "app.locale.name.english"\nmsgstr ""\n\nmsgid "app.locale.name.russian"\nmsgstr ""\n\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Files with the extension ",(0,s.jsx)(e.code,{children:"<lang>.json"})," contain translations into the required language in ",(0,s.jsx)(e.code,{children:"json"})," format."]}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/assets/i18n/ru.json"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "Create new": "",\n  "app.locale.name.english": "",\n  "app.locale.name.russian": ""\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/assets/i18n/en.json"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "Create new": "Create new",\n  "app.locale.name.english": "app.locale.name.english",\n  "app.locale.name.russian": "app.locale.name.russian"\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"7-adding-translations-for-all-dictionaries",children:"7. Adding translations for all dictionaries"}),"\n",(0,s.jsxs)(e.p,{children:["For bulk translation of dictionaries, I usually use the cross-platform program ",(0,s.jsx)(e.a,{href:"https://poedit.net/",children:"poedit.net"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["I already wrote a post with an example of using this program - ",(0,s.jsx)(e.a,{href:"https://dev.to/endykaufman/add-new-dictionaries-with-translations-to-nestjs-application-using-poeditnet-3ei2",children:"https://dev.to/endykaufman/add-new-dictionaries-with-translations-to-nestjs-application-using-poeditnet-3ei2"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"Now I will simply give an example of manual translation of dictionaries."}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/assets/i18n/ru.po"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:'msgid ""\nmsgstr ""\n"Project-Id-Version: i18next-conv\\n"\n"mime-version: 1.0\\n"\n"Content-Type: text/plain; charset=utf-8\\n"\n"Content-Transfer-Encoding: 8bit\\n"\n"Plural-Forms: nplurals=2; plural=(n != 1)\\n"\n\nmsgid "Create new"\nmsgstr "\u0421\u043e\u0437\u0434\u0430\u0442\u044c"\n\nmsgid "app.locale.name.english"\nmsgstr "\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439"\n\nmsgid "app.locale.name.russian"\nmsgstr "\u0420\u0443\u0441\u0441\u043a\u0438\u0439"\n\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Sample file ",(0,s.jsx)(e.em,{children:"apps/client/src/assets/i18n/en.po"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:'msgid ""\nmsgstr ""\n"Project-Id-Version: i18next-conv\\n"\n"mime-version: 1.0\\n"\n"Content-Type: text/plain; charset=utf-8\\n"\n"Content-Transfer-Encoding: 8bit\\n"\n"Plural-Forms: nplurals=2; plural=(n != 1)\\n"\n\nmsgid "app.locale.name.english"\nmsgstr "English"\n\nmsgid "app.locale.name.russian"\nmsgstr "Russian"\n\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Translations can be added for both ",(0,s.jsx)(e.code,{children:"po"})," files and ",(0,s.jsx)(e.code,{children:"json"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"After adding all the necessary translations, you need to run a command that will combine all the translations and create dictionaries at the application level."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Commands"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"./node_modules/.bin/rucken prepare --locales=en,ru --update-package-version=false\n"})}),"\n",(0,s.jsx)(e.p,{children:"Translation workflow:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["Collect translation dictionaries ",(0,s.jsx)(e.code,{children:"./node_modules/.bin/rucken prepare --locales=en,ru --update-package-version=false"}),";"]}),"\n",(0,s.jsxs)(e.li,{children:["Add translations to all ",(0,s.jsx)(e.code,{children:"*.po"})," files;"]}),"\n",(0,s.jsxs)(e.li,{children:["Generate ",(0,s.jsx)(e.code,{children:"json"})," version of translations ",(0,s.jsx)(e.code,{children:"./node_modules/.bin/rucken prepare --locales=en,ru --update-package-version=false"}),";"]}),"\n",(0,s.jsxs)(e.li,{children:["Launch applications and they load ",(0,s.jsx)(e.code,{children:"json"})," files with translations."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"8-add-a-test-to-check-translated-responses-from-the-backend",children:"8. Add a test to check translated responses from the backend"}),"\n",(0,s.jsxs)(e.p,{children:["Create a file ",(0,s.jsx)(e.em,{children:"apps/server-e2e/src/server/ru-validation.spec.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { RestClientHelper } from '@nestjs-mod-fullstack/testing';\nimport { AxiosError } from 'axios';\n\ndescribe('Validation (ru)', () => {\n  jest.setTimeout(60000);\n\n  const user1 = new RestClientHelper({ activeLang: 'ru' });\n\n  beforeAll(async () => {\n    await user1.createAndLoginAsUser();\n  });\n\n  it('should catch error on create new webhook as user1', async () => {\n    try {\n      await user1.getWebhookApi().webhookControllerCreateOne({\n        enabled: false,\n        endpoint: '',\n        eventName: '',\n      });\n    } catch (err) {\n      expect((err as AxiosError).response?.data).toEqual({\n        code: 'VALIDATION-000',\n        message: 'Validation error',\n        metadata: [\n          {\n            property: 'eventName',\n            constraints: [\n              {\n                name: 'isNotEmpty',\n                description: 'eventName \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c',\n              },\n            ],\n          },\n          {\n            property: 'endpoint',\n            constraints: [\n              {\n                name: 'isNotEmpty',\n                description: 'endpoint \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c',\n              },\n            ],\n          },\n        ],\n      });\n    }\n  });\n});\n"})}),"\n",(0,s.jsx)(e.h3,{id:"9-add-a-test-to-check-the-correct-switching-of-translations-in-the-frontend-application",children:"9. Add a test to check the correct switching of translations in the frontend application"}),"\n",(0,s.jsxs)(e.p,{children:["Create a file ",(0,s.jsx)(e.em,{children:"apps/client-e2e/src/ru-validation.spec.ts"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { faker } from '@faker-js/faker';\nimport { expect, Page, test } from '@playwright/test';\nimport { get } from 'env-var';\nimport { join } from 'path';\nimport { setTimeout } from 'timers/promises';\n\ntest.describe('Validation (ru)', () => {\n  test.describe.configure({ mode: 'serial' });\n\n  const user = {\n    email: faker.internet.email({\n      provider: 'example.fakerjs.dev',\n    }),\n    password: faker.internet.password({ length: 8 }),\n    site: `http://${faker.internet.domainName()}`,\n  };\n  let page: Page;\n\n  test.beforeAll(async ({ browser }) => {\n    page = await browser.newPage({\n      viewport: { width: 1920, height: 1080 },\n      recordVideo: {\n        dir: join(__dirname, 'video'),\n        size: { width: 1920, height: 1080 },\n      },\n    });\n    await page.goto('/', {\n      timeout: 7000,\n    });\n    await page.evaluate((authorizerURL) => localStorage.setItem('authorizerURL', authorizerURL), get('SERVER_AUTHORIZER_URL').required().asString());\n    await page.evaluate((minioURL) => localStorage.setItem('minioURL', minioURL), get('SERVER_MINIO_URL').required().asString());\n  });\n\n  test.afterAll(async () => {\n    await setTimeout(1000);\n    await page.close();\n  });\n\n  test('should change language to RU', async () => {\n    await expect(page.locator('nz-header').locator('[nz-submenu]')).toContainText(`EN`);\n    await page.locator('nz-header').locator('[nz-submenu]').last().click();\n\n    await expect(page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last()).toContainText(`Russian`);\n\n    await page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last().click();\n\n    await setTimeout(4000);\n    //\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]')).toContainText(`RU`);\n  });\n\n  test('sign up as user', async () => {\n    await page.goto('/sign-up', {\n      timeout: 7000,\n    });\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=email]').click();\n    await page.keyboard.type(user.email.toLowerCase(), {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=email]')).toHaveValue(user.email.toLowerCase());\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=password]')).toHaveValue(user.password);\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]')).toHaveValue(user.password);\n\n    await expect(page.locator('auth-sign-up-form').locator('button[type=submit]')).toHaveText('\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f');\n\n    await page.locator('auth-sign-up-form').locator('button[type=submit]').click();\n\n    await setTimeout(5000);\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]').first()).toContainText(`\u0412\u044b \u0432\u043e\u0448\u043b\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043a\u0430\u043a ${user.email.toLowerCase()}`);\n  });\n\n  test('should catch error on create new webhook', async () => {\n    await page.locator('webhook-grid').locator('button').first().click();\n\n    await setTimeout(7000);\n\n    await page.locator('[nz-modal-footer]').locator('button').last().click();\n\n    await setTimeout(4000);\n\n    await expect(page.locator('webhook-form').locator('formly-validation-message').first()).toContainText('\u043f\u043e\u043b\u0435 \"\u0430\u0434\u0440\u0435\u0441\" \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c');\n    await expect(page.locator('webhook-form').locator('formly-validation-message').last()).toContainText('\u043f\u043e\u043b\u0435 \"\u0441\u043e\u0431\u044b\u0442\u0438\u0435\" \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c');\n  });\n});\n"})}),"\n",(0,s.jsx)(e.h3,{id:"10-we-launch-the-infrastructure-with-applications-in-development-mode-and-check-the-operation-through-e2e-tests",children:"10. We launch the infrastructure with applications in development mode and check the operation through E2E tests"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:"Commands"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm run pm2-full:dev:start\nnpm run pm2-full:dev:test:e2e\n"})}),"\n",(0,s.jsx)(e.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(e.p,{children:["In this post I added support for working with multiple languages \u200b\u200bin ",(0,s.jsx)(e.code,{children:"NestJS"})," and ",(0,s.jsx)(e.code,{children:"Angular"})," applications, as well as switching them in real time."]}),"\n",(0,s.jsx)(e.p,{children:"I created dictionaries for all sentences that need to be translated and added translations into English and Russian."}),"\n",(0,s.jsxs)(e.p,{children:["The user's selected language is saved in ",(0,s.jsx)(e.code,{children:"localstorage"})," and is used as the active one when the page is fully reloaded, in future posts it will be saved to the database."]}),"\n",(0,s.jsx)(e.h3,{id:"plans",children:"Plans"}),"\n",(0,s.jsx)(e.p,{children:"In the next post I will add support for working with time zones, as well as saving the user-selected time zone to the database..."}),"\n",(0,s.jsx)(e.h3,{id:"links",children:"Links"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})," - website from the post"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/2c14d02af439c0884a4052a3b0197a9ee94c571d..43979334656d63c8d4250b17f81fbd26793b5d78",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/2c14d02af439c0884a4052a3b0197a9ee94c571d..43979334656d63c8d4250b17f81fbd26793b5d78"})," - current changes"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"#angular #translates #nestjsmod #fullstack\n#2024-12-03"})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var s=t(6540);const a={},r=s.createContext(a);function i(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);