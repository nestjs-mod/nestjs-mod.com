"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[8033],{4011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=t(4848),r=t(8453);const s={},i='Integrating and storing the selected user language into the database in a full-stack application on "Angular" and "NestJS"',o={id:"en-posts/fullstack/2024-12-16",title:'Integrating and storing the selected user language into the database in a full-stack application on "Angular" and "NestJS"',description:"This post does not pretend to be large-scale, but since I consistently document all stages of boilerplate development in the article format, I decided to describe this task as well.",source:"@site/docs/en-posts/fullstack/2024-12-16.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-12-16",permalink:"/docs/en-posts/fullstack/2024-12-16",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-12-16.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Timezone support in a full-stack application based on NestJS and Angular: working with REST and WebSockets",permalink:"/docs/en-posts/fullstack/2024-12-12"},next:{title:'Converting date by user time zone in "NestJS", and entering and displaying date in "Angular"',permalink:"/docs/en-posts/fullstack/2024-12-29"}},l={},c=[{value:"1. Creating a migration to add a new field",id:"1-creating-a-migration-to-add-a-new-field",level:3},{value:"2. Applying the generated migrations and updating the Prisma schemas",id:"2-applying-the-generated-migrations-and-updating-the-prisma-schemas",level:3},{value:"3. Changes in DTO and methods for getting and updating the user profile",id:"3-changes-in-dto-and-methods-for-getting-and-updating-the-user-profile",level:3},{value:"4. Adapting &quot;AuthGuard&quot; to get the user&#39;s language from the database",id:"4-adapting-authguard-to-get-the-users-language-from-the-database",level:3},{value:"5. Updating &quot;SDK&quot; for interaction with the backend",id:"5-updating-sdk-for-interaction-with-the-backend",level:3},{value:"6. Developing a new test for the backend for changing and using the language from the database",id:"6-developing-a-new-test-for-the-backend-for-changing-and-using-the-language-from-the-database",level:3},{value:"7. Running all server &quot;E2E&quot; tests",id:"7-running-all-server-e2e-tests",level:3},{value:"8. Creating a service to manage the user&#39;s active language in the frontend",id:"8-creating-a-service-to-manage-the-users-active-language-in-the-frontend",level:3},{value:"9. Developing a new frontend test for changing and using language from the database",id:"9-developing-a-new-frontend-test-for-changing-and-using-language-from-the-database",level:3},{value:"10. Run all &quot;E2E&quot; level tests for both server and client",id:"10-run-all-e2e-level-tests-for-both-server-and-client",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"integrating-and-storing-the-selected-user-language-into-the-database-in-a-full-stack-application-on-angular-and-nestjs",children:'Integrating and storing the selected user language into the database in a full-stack application on "Angular" and "NestJS"'}),"\n",(0,a.jsx)(n.p,{children:"This post does not pretend to be large-scale, but since I consistently document all stages of boilerplate development in the article format, I decided to describe this task as well."}),"\n",(0,a.jsx)(n.p,{children:"Here I will give an example of a database migration for adding a new field, and also show how to implement the corresponding functionality on the backend and frontend to change this value."}),"\n",(0,a.jsxs)(n.p,{children:["The user language, like the time zone, will be stored in the ",(0,a.jsx)(n.code,{children:"Auth"})," database."]}),"\n",(0,a.jsx)(n.h3,{id:"1-creating-a-migration-to-add-a-new-field",children:"1. Creating a migration to add a new field"}),"\n",(0,a.jsx)(n.p,{children:"At this stage, we will migrate the database, adding a new field to store the selected information."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Commands"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create empty migration\nnpm run flyway:create:auth --args=AddFieldLangToAuthUser\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Fill the migration file with ",(0,a.jsx)(n.code,{children:"SQL"})," script needed to create new column."]}),"\n",(0,a.jsxs)(n.p,{children:["Update the file ",(0,a.jsx)(n.em,{children:"libs/core/auth/src/migrations/V202412141339__AddFieldLangToAuthUser.sql"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'DO $$\nBEGIN\n    ALTER TABLE "AuthUser"\n        ADD "lang" varchar(2);\nEXCEPTION\n    WHEN duplicate_column THEN\n        NULL;\nEND\n$$;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-applying-the-generated-migrations-and-updating-the-prisma-schemas",children:"2. Applying the generated migrations and updating the Prisma schemas"}),"\n",(0,a.jsxs)(n.p,{children:["After you have finished creating the migrations, you need to apply them, update the ",(0,a.jsx)(n.code,{children:"Prisma"})," schemas for all databases and restart the ",(0,a.jsx)(n.code,{children:"Prisma"})," generators."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Commands"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run db:create-and-fill\nnpm run prisma:pull\nnpm run generate\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Schema file for the new database ",(0,a.jsx)(n.em,{children:"libs/core/auth/src/prisma/schema.prisma"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prisma",children:'generator client {\n  provider      = "prisma-client-js"\n  output        = "../../../../../node_modules/@prisma/auth-client"\n  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]\n  engineType    = "binary"\n}\n\ngenerator prismaClassGenerator {\n  provider                        = "prisma-generator-nestjs-dto"\n  output                          = "../lib/generated/rest/dto"\n  flatResourceStructure           = "false"\n  dtoSuffix                       = "Dto"\n  entityPrefix                    = ""\n  prettier                        = "true"\n  annotateAllDtoProperties        = "true"\n  fileNamingStyle                 = "kebab"\n  noDependencies                  = "false"\n  updateDtoPrefix                 = "Update"\n  exportRelationModifierClasses   = "true"\n  entitySuffix                    = ""\n  outputToNestJsResourceStructure = "false"\n  reExport                        = "false"\n  definiteAssignmentAssertion     = "true"\n  createDtoPrefix                 = "Create"\n  classValidation                 = "true"\n}\n\ndatasource db {\n  provider = "postgres"\n  url      = env("SERVER_AUTH_DATABASE_URL")\n}\n\nmodel AuthUser {\n  id             String   @id(map: "PK_AUTH_USER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  externalUserId String   @unique(map: "UQ_AUTH_USER") @db.Uuid\n  userRole       AuthRole\n  timezone       Float?\n  /// @DtoCreateHidden\n  /// @DtoUpdateHidden\n  createdAt      DateTime @default(now()) @db.Timestamp(6)\n  /// @DtoCreateHidden\n  /// @DtoUpdateHidden\n  updatedAt      DateTime @default(now()) @db.Timestamp(6)\n  lang           String?  @db.VarChar(2)  // <--updates\n\n  @@index([userRole], map: "IDX_AUTH_USER__USER_ROLE")\n}\n\nmodel migrations {\n  installed_rank Int      @id(map: "__migrations_pk")\n  version        String?  @db.VarChar(50)\n  description    String   @db.VarChar(200)\n  type           String   @db.VarChar(20)\n  script         String   @db.VarChar(1000)\n  checksum       Int?\n  installed_by   String   @db.VarChar(100)\n  installed_on   DateTime @default(now()) @db.Timestamp(6)\n  execution_time Int\n  success        Boolean\n\n  @@index([success], map: "__migrations_s_idx")\n  @@map("__migrations")\n}\n\nenum AuthRole {\n  Admin\n  User\n}\n\n'})}),"\n",(0,a.jsxs)(n.p,{children:["After a successful restart of the generators, all ",(0,a.jsx)(n.code,{children:"DTO"}),"s associated with the ",(0,a.jsx)(n.code,{children:"AuthUser"})," table will have a new ",(0,a.jsx)(n.code,{children:"lang"})," field."]}),"\n",(0,a.jsxs)(n.p,{children:["Updated file ",(0,a.jsx)(n.em,{children:"libs/core/auth/src/lib/generated/rest/dto/auth-user.entity.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { AuthRole } from '../../../../../../../../node_modules/@prisma/auth-client';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthUser {\n  @ApiProperty({\n    type: 'string',\n  })\n  id!: string;\n  @ApiProperty({\n    type: 'string',\n  })\n  externalUserId!: string;\n  @ApiProperty({\n    enum: AuthRole,\n    enumName: 'AuthRole',\n  })\n  userRole!: AuthRole;\n  @ApiProperty({\n    type: 'number',\n    format: 'float',\n    nullable: true,\n  })\n  timezone!: number | null;\n  @ApiProperty({\n    type: 'string',\n    format: 'date-time',\n  })\n  createdAt!: Date;\n  @ApiProperty({\n    type: 'string',\n    format: 'date-time',\n  })\n  updatedAt!: Date;\n  @ApiProperty({\n    type: 'string',\n    nullable: true,\n  })\n  lang!: string | null; // <--updates\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-changes-in-dto-and-methods-for-getting-and-updating-the-user-profile",children:"3. Changes in DTO and methods for getting and updating the user profile"}),"\n",(0,a.jsxs)(n.p,{children:["To update the new ",(0,a.jsx)(n.code,{children:"lang"})," field, you can create a separate method or adapt the existing methods for getting and updating the profile. In this article, we will choose the second option - modifying the existing methods."]}),"\n",(0,a.jsxs)(n.p,{children:["Updating the DTO file ",(0,a.jsx)(n.em,{children:"libs/core/auth/src/lib/types/auth-profile.dto.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { PickType } from '@nestjs/swagger';\nimport { CreateAuthUserDto } from '../generated/rest/dto/create-auth-user.dto';\n\nexport class AuthProfileDto extends PickType(CreateAuthUserDto, ['timezone', 'lang']) {}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Since the allowed languages \u200b\u200bare limited to a certain set of values, it is necessary to check the correctness of the incoming data on the server."}),"\n",(0,a.jsx)(n.p,{children:"There are several approaches to implementing such a check. In this case, I will perform the check inside the method and throw a validation error, similar to how the validation pipe does it. This approach will help to unify the handling of field errors on the client side."}),"\n",(0,a.jsxs)(n.p,{children:["Now let's update the controller ",(0,a.jsx)(n.em,{children:"libs/core/auth/src/lib/controllers/auth.controller.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { StatusResponse } from '@nestjs-mod-fullstack/common';\nimport { ValidationError, ValidationErrorEnum } from '@nestjs-mod-fullstack/validation';\nimport { InjectPrismaClient } from '@nestjs-mod/prisma';\nimport { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiBadRequestResponse, ApiExtraModels, ApiOkResponse, ApiTags, refs } from '@nestjs/swagger';\nimport { AuthRole, PrismaClient } from '@prisma/auth-client';\nimport { InjectTranslateFunction, TranslateFunction, TranslatesService, TranslatesStorage } from 'nestjs-translates';\nimport { AUTH_FEATURE } from '../auth.constants';\nimport { CheckAuthRole, CurrentAuthUser } from '../auth.decorators';\nimport { AuthError } from '../auth.errors';\nimport { AuthUser } from '../generated/rest/dto/auth-user.entity';\nimport { AuthEntities } from '../types/auth-entities';\nimport { AuthProfileDto } from '../types/auth-profile.dto';\nimport { AuthCacheService } from '../services/auth-cache.service';\n\n@ApiExtraModels(AuthError, AuthEntities, ValidationError)\n@ApiBadRequestResponse({\n  schema: { allOf: refs(AuthError, ValidationError) },\n})\n@ApiTags('Auth')\n@CheckAuthRole([AuthRole.User, AuthRole.Admin])\n@Controller('/auth')\nexport class AuthController {\n  constructor(\n    @InjectPrismaClient(AUTH_FEATURE)\n    private readonly prismaClient: PrismaClient,\n    private readonly authCacheService: AuthCacheService,\n    private readonly translatesStorage: TranslatesStorage\n  ) {}\n\n  @Get('profile')\n  @ApiOkResponse({ type: AuthProfileDto })\n  async profile(@CurrentAuthUser() authUser: AuthUser): Promise<AuthProfileDto> {\n    return {\n      lang: authUser.lang, // <--updates\n      timezone: authUser.timezone,\n    };\n  }\n\n  @Post('update-profile')\n  @ApiOkResponse({ type: StatusResponse })\n  async updateProfile(@CurrentAuthUser() authUser: AuthUser, @Body() args: AuthProfileDto, @InjectTranslateFunction() getText: TranslateFunction) {\n    if (args.lang && !this.translatesStorage.locales.includes(args.lang)) {\n      // <--updates\n      throw new ValidationError(undefined, ValidationErrorEnum.COMMON, [\n        {\n          property: 'lang',\n          constraints: {\n            isNotEmpty: getText('lang must have one of the values: {{values}}', this.translatesStorage.locales.join(', ')),\n          },\n        },\n      ]);\n    }\n    await this.prismaClient.authUser.update({\n      where: { id: authUser.id },\n      data: {\n        ...(args.lang === undefined // <--updates\n          ? {}\n          : {\n              lang: args.lang,\n            }),\n        ...(args.timezone === undefined // <--updates\n          ? {}\n          : {\n              timezone: args.timezone,\n            }),\n        updatedAt: new Date(),\n      },\n    });\n    await this.authCacheService.clearCacheByExternalUserId(authUser.externalUserId);\n    return { message: getText('ok') };\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-adapting-authguard-to-get-the-users-language-from-the-database",children:'4. Adapting "AuthGuard" to get the user\'s language from the database'}),"\n",(0,a.jsxs)(n.p,{children:["Now let's change the behavior of ",(0,a.jsx)(n.code,{children:"AuthGuard"})," so that the user's language value is retrieved not from the frontend request, but from the settings stored in the database."]}),"\n",(0,a.jsxs)(n.p,{children:["To do this, update the file ",(0,a.jsx)(n.em,{children:"libs/core/auth/src/lib/auth.guard.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// ...\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private logger = new Logger(AuthGuard.name);\n\n  constructor(\n    // ...\n    private readonly translatesStorage: TranslatesStorage\n  ) {}\n\n  // ...\n\n  private async tryGetOrCreateCurrentUserWithExternalUserId(req: AuthRequest, externalUserId: string) {\n    if (!req.authUser && externalUserId) {\n      const authUser = await this.authCacheService.getCachedUserByExternalUserId(externalUserId);\n      req.authUser =\n        authUser ||\n        (await this.prismaClient.authUser.upsert({\n          create: { externalUserId, userRole: 'User' },\n          update: {},\n          where: { externalUserId },\n        }));\n\n      if (req.authUser.lang) {\n        req.headers[ACCEPT_LANGUAGE] = req.authUser.lang;\n      }\n    }\n\n    if (req.headers[ACCEPT_LANGUAGE] && !this.translatesStorage.locales.includes(req.headers[ACCEPT_LANGUAGE])) {\n      req.headers[ACCEPT_LANGUAGE] = this.translatesStorage.defaultLocale;\n    }\n  }\n  // ...\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-updating-sdk-for-interaction-with-the-backend",children:'5. Updating "SDK" for interaction with the backend'}),"\n",(0,a.jsxs)(n.p,{children:["Now we need to recreate all ",(0,a.jsx)(n.code,{children:"SDK"}),"s that provide interaction with our server."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Commands"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run manual:prepare\n"})}),"\n",(0,a.jsx)(n.h3,{id:"6-developing-a-new-test-for-the-backend-for-changing-and-using-the-language-from-the-database",children:"6. Developing a new test for the backend for changing and using the language from the database"}),"\n",(0,a.jsx)(n.p,{children:"To check the correctness of the functionality, we will create a special test scenario that will confirm that the change of language and its subsequent extraction from the database occur without errors."}),"\n",(0,a.jsxs)(n.p,{children:["Create the file ",(0,a.jsx)(n.em,{children:"apps/server-e2e/src/server/store-lang-in-db.spec.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { RestClientHelper } from '@nestjs-mod-fullstack/testing';\nimport { AxiosError } from 'axios';\n\ndescribe('Store lang in db', () => {\n  jest.setTimeout(60000);\n\n  const user1 = new RestClientHelper();\n\n  beforeAll(async () => {\n    await user1.createAndLoginAsUser();\n  });\n\n  it('should catch error on try use not exists language code', async () => {\n    try {\n      await user1.getAuthApi().authControllerUpdateProfile({ lang: 'tt' });\n    } catch (err) {\n      expect((err as AxiosError).response?.data).toEqual({\n        code: 'VALIDATION-000',\n        message: 'Validation error',\n        metadata: [\n          {\n            property: 'lang',\n            constraints: [\n              {\n                name: 'isWrongEnumValue',\n                description: 'lang must have one of the values: en, ru',\n              },\n            ],\n          },\n        ],\n      });\n    }\n  });\n\n  it('should catch error in Russian language on create new webhook as user1', async () => {\n    await user1.getAuthApi().authControllerUpdateProfile({ lang: 'ru' });\n    try {\n      await user1.getWebhookApi().webhookControllerCreateOne({\n        enabled: false,\n        endpoint: '',\n        eventName: '',\n      });\n    } catch (err) {\n      expect((err as AxiosError).response?.data).toEqual({\n        code: 'VALIDATION-000',\n        message: 'Validation error',\n        metadata: [\n          {\n            property: 'eventName',\n            constraints: [\n              {\n                name: 'isNotEmpty',\n                description: 'eventName \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c',\n              },\n            ],\n          },\n          {\n            property: 'endpoint',\n            constraints: [\n              {\n                name: 'isNotEmpty',\n                description: 'endpoint \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c',\n              },\n            ],\n          },\n        ],\n      });\n    }\n  });\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"7-running-all-server-e2e-tests",children:'7. Running all server "E2E" tests'}),"\n",(0,a.jsxs)(n.p,{children:["Let's run all ",(0,a.jsx)(n.code,{children:"E2E"})," level tests for the server to make sure that all functionality works correctly and without failures."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Commands"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run nx -- run server-e2e:e2e\n"})}),"\n",(0,a.jsx)(n.h3,{id:"8-creating-a-service-to-manage-the-users-active-language-in-the-frontend",children:"8. Creating a service to manage the user's active language in the frontend"}),"\n",(0,a.jsx)(n.p,{children:"In the frontend application, we will create a service that will manage the active language for both authorized and unauthorized users."}),"\n",(0,a.jsxs)(n.p,{children:["The logic for working with the active language for unauthorized users will remain the same: it will use ",(0,a.jsx)(n.code,{children:"localStorage"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"However, after authorization, the active language will be saved in the user profile."}),"\n",(0,a.jsxs)(n.p,{children:["Create the file ",(0,a.jsx)(n.em,{children:"libs/core/auth-angular/src/lib/services/auth-active-lang.service.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@angular/core';\nimport { TranslocoService } from '@jsverse/transloco';\nimport { AuthErrorEnumInterface, AuthErrorInterface, AuthRestService } from '@nestjs-mod-fullstack/app-angular-rest-sdk';\nimport { catchError, map, of, tap, throwError } from 'rxjs';\n\nconst AUTH_ACTIVE_LANG_LOCAL_STORAGE_KEY = 'activeLang';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthActiveLangService {\n  constructor(private readonly authRestService: AuthRestService, private readonly translocoService: TranslocoService) {}\n\n  getActiveLang() {\n    return this.authRestService.authControllerProfile().pipe(\n      map((profile) => {\n        return profile.lang || this.translocoService.getDefaultLang();\n      }),\n      catchError((err) => {\n        if ('error' in err && (err.error as AuthErrorInterface).code === AuthErrorEnumInterface._001) {\n          return of(localStorage.getItem(AUTH_ACTIVE_LANG_LOCAL_STORAGE_KEY) || this.translocoService.getDefaultLang());\n        }\n        return throwError(() => err);\n      })\n    );\n  }\n\n  setActiveLang(lang: string) {\n    return this.authRestService.authControllerUpdateProfile({ lang }).pipe(\n      tap(() => {\n        this.translocoService.setActiveLang(lang);\n      }),\n      catchError((err) => {\n        if ('error' in err && (err.error as AuthErrorInterface).code === AuthErrorEnumInterface._001) {\n          localStorage.setItem(AUTH_ACTIVE_LANG_LOCAL_STORAGE_KEY, lang);\n          this.translocoService.setActiveLang(lang);\n          return of(null);\n        }\n        return throwError(() => err);\n      })\n    );\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now let's replace all usages of ",(0,a.jsx)(n.code,{children:"localStorage"})," for storing language with ",(0,a.jsx)(n.code,{children:"AuthActiveLangService"})," throughout the frontend code."]}),"\n",(0,a.jsx)(n.h3,{id:"9-developing-a-new-frontend-test-for-changing-and-using-language-from-the-database",children:"9. Developing a new frontend test for changing and using language from the database"}),"\n",(0,a.jsxs)(n.p,{children:["As part of the test, we will perform the following steps: register, change the language to Russian, then change the language in ",(0,a.jsx)(n.code,{children:"localStorage"})," from Russian to English and try to create a new webhook with empty fields. The expected result is getting a validation error in Russian."]}),"\n",(0,a.jsxs)(n.p,{children:["Create a file ",(0,a.jsx)(n.em,{children:"apps/client-e2e/src/ru-validation-with-store-lang-in-db.spec.ts"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { faker } from '@faker-js/faker';\nimport { expect, Page, test } from '@playwright/test';\nimport { get } from 'env-var';\nimport { join } from 'path';\nimport { setTimeout } from 'timers/promises';\n\ntest.describe('Validation with store lang in db (ru)', () => {\n  test.describe.configure({ mode: 'serial' });\n\n  const user = {\n    email: faker.internet.email({\n      provider: 'example.fakerjs.dev',\n    }),\n    password: faker.internet.password({ length: 8 }),\n    site: `http://${faker.internet.domainName()}`,\n  };\n  let page: Page;\n\n  test.beforeAll(async ({ browser }) => {\n    page = await browser.newPage({\n      viewport: { width: 1920, height: 1080 },\n      recordVideo: {\n        dir: join(__dirname, 'video'),\n        size: { width: 1920, height: 1080 },\n      },\n    });\n    await page.goto('/', {\n      timeout: 7000,\n    });\n    await page.evaluate((authorizerURL) => localStorage.setItem('authorizerURL', authorizerURL), get('SERVER_AUTHORIZER_URL').required().asString());\n    await page.evaluate((minioURL) => localStorage.setItem('minioURL', minioURL), get('SERVER_MINIO_URL').required().asString());\n  });\n\n  test.afterAll(async () => {\n    await setTimeout(1000);\n    await page.close();\n  });\n\n  test('sign up as user', async () => {\n    await page.goto('/sign-up', {\n      timeout: 7000,\n    });\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=email]').click();\n    await page.keyboard.type(user.email.toLowerCase(), {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=email]')).toHaveValue(user.email.toLowerCase());\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=password]')).toHaveValue(user.password);\n\n    await page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]').click();\n    await page.keyboard.type(user.password, {\n      delay: 50,\n    });\n    await expect(page.locator('auth-sign-up-form').locator('[placeholder=confirm_password]')).toHaveValue(user.password);\n\n    await expect(page.locator('auth-sign-up-form').locator('button[type=submit]')).toHaveText('Sign-up');\n\n    await page.locator('auth-sign-up-form').locator('button[type=submit]').click();\n\n    await setTimeout(5000);\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]').first()).toContainText(`You are logged in as ${user.email.toLowerCase()}`);\n  });\n\n  test('should change language to RU', async () => {\n    await expect(page.locator('nz-header').locator('[nz-submenu]').last()).toContainText(`EN`);\n    await page.locator('nz-header').locator('[nz-submenu]').last().click();\n\n    await expect(page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last()).toContainText(`Russian`);\n\n    await page.locator('[nz-submenu-none-inline-child]').locator('[nz-menu-item]').last().click();\n\n    await setTimeout(4000);\n    //\n\n    await expect(page.locator('nz-header').locator('[nz-submenu]').last()).toContainText(`RU`);\n  });\n\n  test('change lang to en in localStorage', async () => {\n    await page.evaluate(() => localStorage.setItem('activeLang', 'en'));\n\n    const activeLang = await page.evaluate(() => localStorage.getItem('activeLang'));\n\n    expect(activeLang).toEqual('en');\n  });\n\n  test('should catch error on create new webhook', async () => {\n    await page.locator('webhook-grid').locator('button').first().click();\n\n    await setTimeout(7000);\n\n    await page.locator('[nz-modal-footer]').locator('button').last().click();\n\n    await setTimeout(4000);\n\n    await expect(page.locator('webhook-form').locator('formly-validation-message').first()).toContainText('\u043f\u043e\u043b\u0435 \"\u0430\u0434\u0440\u0435\u0441\" \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c');\n    await expect(page.locator('webhook-form').locator('formly-validation-message').last()).toContainText('\u043f\u043e\u043b\u0435 \"\u0441\u043e\u0431\u044b\u0442\u0438\u0435\" \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c');\n  });\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"10-run-all-e2e-level-tests-for-both-server-and-client",children:'10. Run all "E2E" level tests for both server and client'}),"\n",(0,a.jsxs)(n.p,{children:["Let's run all ",(0,a.jsx)(n.code,{children:"E2E"})," level tests for both server and client to make sure all functionality works correctly and without errors."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Commands"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm run pm2-full:dev:test:e2e\n"})}),"\n",(0,a.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"Despite the apparent simplicity of the task, its solution required a significant amount of time and writing a considerable amount of code."}),"\n",(0,a.jsxs)(n.p,{children:["However, even for such minimal changes it is extremely important to ensure ",(0,a.jsx)(n.code,{children:"E2E"})," test coverage, which was demonstrated in this post."]}),"\n",(0,a.jsx)(n.h3,{id:"plans",children:"Plans"}),"\n",(0,a.jsxs)(n.p,{children:["In the previous article, I implemented the function of automatic conversion of output data containing fields of type ",(0,a.jsx)(n.code,{children:"Date"})," or strings in ",(0,a.jsx)(n.code,{children:"ISOString"})," format. However, I have not yet implemented automatic conversion of input data. In the next post, I will deal with this issue."]}),"\n",(0,a.jsx)(n.h3,{id:"links",children:"Links"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://fullstack.nestjs-mod.com",children:"https://fullstack.nestjs-mod.com"})," - website from the post"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/3019d982ca9605479a8b917f71a8ae268f3582bc..4f495dbd6b9b4efd8d8e13a60c5f66b895c483af",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/compare/3019d982ca9605479a8b917f71a8ae268f3582bc..4f495dbd6b9b4efd8d8e13a60c5f66b895c483af"})," - current changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/12347665539/artifacts/2324579763",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/12347665539/artifacts/2324579763"})," - video from E2E frontend tests"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"#angular #translates #nestjsmod #fullstack\n#2024-12-16"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);