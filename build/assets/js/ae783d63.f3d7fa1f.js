"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[5196],{3415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var o=t(4848),r=t(8453);const s={sidebar_position:3},a="Environment variables",i={id:"guides/info/env-model",title:"Environment variables",description:"Decorators EnvModel, EnvModelProperty for describing the module's environment variables and the envTransform function for its serialization and verification. Values can be automatically read from process.env or other sources such as https//developer.hashicorp.com/consul/docs/dynamic-app-config/kv.",source:"@site/docs/guides/info/3-env-model.md",sourceDirName:"guides/info",slug:"/guides/info/env-model",permalink:"/docs/guides/info/env-model",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/guides/info/3-env-model.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guidesSidebar",previous:{title:"Configuration model",permalink:"/docs/guides/info/config-model"},next:{title:"Function for creating a NestJS-mod module",permalink:"/docs/guides/info/nestjs-module"}},c={},l=[{value:"Example NestJS application with different ways to use environment variables",id:"example-nestjs-application-with-different-ways-to-use-environment-variables",level:3},{value:"Field key names are formed using formatters.",id:"field-key-names-are-formed-using-formatters",level:3},{value:"The values of environment variables are obtained using extractors, which in their work use the names of the keys that the formatters created.",id:"the-values-of-environment-variables-are-obtained-using-extractors-which-in-their-work-use-the-names-of-the-keys-that-the-formatters-created",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"environment-variables",children:"Environment variables"}),"\n",(0,o.jsxs)(n.p,{children:["Decorators ",(0,o.jsx)(n.code,{children:"EnvModel"}),", ",(0,o.jsx)(n.code,{children:"EnvModelProperty"})," for describing the module's environment variables and the ",(0,o.jsx)(n.code,{children:"envTransform"})," function for its serialization and verification. Values can be automatically read from ",(0,o.jsx)(n.code,{children:"process.env"})," or other sources such as ",(0,o.jsx)(n.a,{href:"https://www.vaultproject.io",children:"https://www.vaultproject.io"})," or ",(0,o.jsx)(n.a,{href:"https://developer.hashicorp.com/consul/docs/dynamic-app-config/kv",children:"https://developer.hashicorp.com/consul/docs/dynamic-app-config/kv"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"example-nestjs-application-with-different-ways-to-use-environment-variables",children:"Example NestJS application with different ways to use environment variables"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { EnvModel, EnvModelProperty, envTransform } from "@nestjs-mod/common";\nimport { DynamicModule, Module } from "@nestjs/common";\nimport { NestFactory } from "@nestjs/core";\nimport { IsNotEmpty } from "class-validator";\n\n// Describe a class for working with environment variables\n@EnvModel()\nclass AppEnv {\n  @EnvModelProperty()\n  @IsNotEmpty()\n  option!: string;\n}\n\n// Describe a module that receives the values of environment variables when calling the forRoot method\n@Module({ providers: [AppEnv] })\nclass AppModule {\n  static forRoot(env: Partial<AppEnv>): DynamicModule {\n    return {\n      module: AppModule,\n      providers: [\n        {\n          provide: `${AppEnv.name}_loader`,\n          useFactory: async (emptyAppEnv: AppEnv) => {\n            if (env.constructor !== Object) {\n              Object.setPrototypeOf(emptyAppEnv, env);\n            }\n            const obj = await envTransform({\n              model: AppEnv,\n              data: env,\n            });\n            Object.assign(emptyAppEnv, obj.data);\n          },\n          inject: [AppEnv],\n        },\n      ],\n    };\n  }\n}\n\n// We try to run the application and at the same time we do not pass anything to the module and do not have the necessary variables in process.env\nasync function bootstrap1() {\n  const app = await NestFactory.create(AppModule.forRoot({}));\n  await app.listen(3000);\n}\n\n// We get a validation error\n// throw new ConfigModelValidationErrors(validateErrors);\n// isNotEmpty: option should not be empty\nbootstrap1();\n\n// We try to launch the application and manually transfer the values of environment variables to the module, process.env is still empty\nasync function bootstrap2() {\n  const app = await NestFactory.create(AppModule.forRoot({ option: "value1" }));\n  console.log(app.get(AppEnv)); // output: { option: \'value1\' }\n  await app.listen(3000);\n}\n\n// No error\nbootstrap2();\n\n// We try to launch the application and do not pass the values of environment variables to the module, but put them in process.env\nasync function bootstrap3() {\n  process.env["OPTION"] = "value1";\n  const app = await NestFactory.create(AppModule.forRoot({}));\n  console.log(app.get(AppEnv)); // output: { option: \'value1\' }\n  await app.listen(3000);\n}\n\n// No error\nbootstrap3();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"field-key-names-are-formed-using-formatters",children:"Field key names are formed using formatters."}),"\n",(0,o.jsx)(n.p,{children:"Examples:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["main formatter - transforms the chain of names: application, context, module, properties, which are formed during the process of starting the creation of the application and module (example: ",(0,o.jsx)(n.em,{children:"PROJECT_NAME+CONTEXT_NAME+MODULE_NAME+PROPERTY_NAME"}),"). (",(0,o.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod/blob/master/libs/common/src/lib/env-model/formatters/dot-env-property-name.formatter.ts",children:"code"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:["custom formatter - inherited from the main transformer and includes in the naming chain an additional static string ",(0,o.jsx)(n.em,{children:"PROJECT_NAME+CONTEXT_NAME+MODULE_NAME+STATIC_STRING+PROPERTY_NAME"}),") (",(0,o.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-contrib/blob/master/libs/core/prisma/src/lib/formatters/dot-env-property-name.formatter.ts",children:"code"}),")"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"the-values-of-environment-variables-are-obtained-using-extractors-which-in-their-work-use-the-names-of-the-keys-that-the-formatters-created",children:"The values of environment variables are obtained using extractors, which in their work use the names of the keys that the formatters created."}),"\n",(0,o.jsx)(n.p,{children:"Examples:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["main extractor - gets the value by key from the object that was passed to the ",(0,o.jsx)(n.code,{children:"configTransform"})," function (",(0,o.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod/blob/master/libs/common/src/lib/env-model/extractors/default-property-value.extractor.ts",children:"code"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"process.env"})," extractor - gets values from the environment of the current process (",(0,o.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod/blob/master/libs/common/src/lib/env-model/extractors/process-env-property-value.extractor.ts",children:"code"}),")"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);