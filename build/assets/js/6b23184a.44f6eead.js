"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[9264],{4699:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=t(4848),a=t(8453);const s={},o="Adding the Postgres database to the project and running migrations via Flyway for the NestJS-mod application",r={id:"en-posts/fullstack/2024-08-11",title:"Adding the Postgres database to the project and running migrations via Flyway for the NestJS-mod application",description:"The database will be lifted via Docker Compose.",source:"@site/docs/en-posts/fullstack/2024-08-11.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-08-11",permalink:"/docs/en-posts/fullstack/2024-08-11",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-08-11.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Creating an empty Angular project and linking it to an existing server on NestJS",permalink:"/docs/en-posts/fullstack/2024-08-09"},next:{title:"Connecting PrismaORM to the NestJS-mod application and checking its operation via REST",permalink:"/docs/en-posts/fullstack/2024-08-13"}},d={},c=[{value:"1. Installing a package to generate Docker Compose and Flyway files",id:"1-installing-a-package-to-generate-docker-compose-and-flyway-files",level:3},{value:"2. Adding infrastructure modules to the server code",id:"2-adding-infrastructure-modules-to-the-server-code",level:3},{value:"3. We create documentation for the project and simultaneously create additional code and scripts for Docker Compose and Flyway",id:"3-we-create-documentation-for-the-project-and-simultaneously-create-additional-code-and-scripts-for-docker-compose-and-flyway",level:3},{value:"4. Filling in new environment variables",id:"4-filling-in-new-environment-variables",level:3},{value:"5. Re-create the project documentation and simultaneously re-create additional code and scripts for Docker Compose and Flyway",id:"5-re-create-the-project-documentation-and-simultaneously-re-create-additional-code-and-scripts-for-docker-compose-and-flyway",level:3},{value:"6. Copy the updated file with the environment variables as an example",id:"6-copy-the-updated-file-with-the-environment-variables-as-an-example",level:3},{value:"7. Creating a migration with an example of creating a table",id:"7-creating-a-migration-with-an-example-of-creating-a-table",level:3},{value:"8. We describe the sql script for creating a demo table",id:"8-we-describe-the-sql-script-for-creating-a-demo-table",level:3},{value:"9. Launching the database",id:"9-launching-the-database",level:3},{value:"10. Launching the creation of application databases",id:"10-launching-the-creation-of-application-databases",level:3},{value:"11. We apply migrations",id:"11-we-apply-migrations",level:3},{value:"12. We connect to the database and get a list of tables",id:"12-we-connect-to-the-database-and-get-a-list-of-tables",level:3},{value:"13. Stopping the database",id:"13-stopping-the-database",level:3},{value:"Links",id:"links",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"adding-the-postgres-database-to-the-project-and-running-migrations-via-flyway-for-the-nestjs-mod-application",children:"Adding the Postgres database to the project and running migrations via Flyway for the NestJS-mod application"}),"\n",(0,i.jsx)(n.p,{children:"The database will be lifted via Docker Compose."}),"\n",(0,i.jsx)(n.p,{children:"Migrations are written manually and run through the Flyway migrator."}),"\n",(0,i.jsx)(n.p,{children:"The application has its own username and password, which is different from the root one."}),"\n",(0,i.jsx)(n.p,{children:"Configurations for Docker Compose and Flyway are generated by running NestJS-mod in infrastructure mode."}),"\n",(0,i.jsx)(n.h3,{id:"1-installing-a-package-to-generate-docker-compose-and-flyway-files",children:"1. Installing a package to generate Docker Compose and Flyway files"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install all need dependencies\nnpm i --save @nestjs-mod/docker-compose @nestjs-mod/flyway\n\n# Install all need dev-dependencies\nnpm i --save-dev node-flywaydb@3.0.7\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Console output"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ npm i --save @nestjs-mod/docker-compose @nestjs-mod/flyway\n\nadded 41 packages, and audited 2484 packages in 23s\n\n299 packages are looking for funding\n  run `npm fund` for details\n\n14 vulnerabilities (4 moderate, 10 high)\n\nTo address issues that do not require attention, run:\n  npm audit fix\n\nTo address all issues (including breaking changes), run:\n  npm audit fix --force\n\nRun `npm audit` for details.\n\n$ npm i --save-dev node-flywaydb@3.0.7\n\nadded 15 packages, and audited 2499 packages in 6s\n\n300 packages are looking for funding\n  run `npm fund` for details\n\n16 vulnerabilities (6 moderate, 10 high)\n\nTo address issues that do not require attention, run:\n  npm audit fix\n\nTo address all issues (including breaking changes), run:\n  npm audit fix --force\n\nRun `npm audit` for details.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-adding-infrastructure-modules-to-the-server-code",children:"2. Adding infrastructure modules to the server code"}),"\n",(0,i.jsx)(n.p,{children:"They will be used to generate additional files and scripts."}),"\n",(0,i.jsxs)(n.p,{children:["Updated file ",(0,i.jsx)(n.code,{children:"apps/server/src/main.ts"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { DefaultNestApplicationInitializer, DefaultNestApplicationListener, InfrastructureMarkdownReportGenerator, PACKAGE_JSON_FILE, ProjectUtils, bootstrapNestApplication, isInfrastructureMode } from '@nestjs-mod/common';\nimport { DOCKER_COMPOSE_FILE, DockerCompose, DockerComposePostgreSQL } from '@nestjs-mod/docker-compose'; // <--\nimport { FLYWAY_JS_CONFIG_FILE, Flyway } from '@nestjs-mod/flyway'; // <--\nimport { NestjsPinoLoggerModule } from '@nestjs-mod/pino';\nimport { ECOSYSTEM_CONFIG_FILE, Pm2 } from '@nestjs-mod/pm2';\nimport { TerminusHealthCheckModule } from '@nestjs-mod/terminus';\nimport { MemoryHealthIndicator } from '@nestjs/terminus';\nimport { join } from 'path';\nimport { AppModule } from './app/app.module';\n\nconst appFeatureName = 'app'; // <--\nconst rootFolder = join(__dirname, '..', '..', '..');\nconst appFolder = join(rootFolder, 'apps', 'server');\n\nbootstrapNestApplication({\n  modules: {\n    system: [\n      ProjectUtils.forRoot({\n        staticConfiguration: {\n          applicationPackageJsonFile: join(appFolder, PACKAGE_JSON_FILE),\n          packageJsonFile: join(rootFolder, PACKAGE_JSON_FILE),\n          envFile: join(rootFolder, '.env'),\n        },\n      }),\n      DefaultNestApplicationInitializer.forRoot({\n        staticConfiguration: { bufferLogs: true },\n      }),\n      NestjsPinoLoggerModule.forRoot(),\n      TerminusHealthCheckModule.forRootAsync({\n        configurationFactory: (memoryHealthIndicator: MemoryHealthIndicator) => ({\n          standardHealthIndicators: [\n            {\n              name: 'memory_heap',\n              check: () => memoryHealthIndicator.checkHeap('memory_heap', 150 * 1024 * 1024),\n            },\n          ],\n        }),\n        inject: [MemoryHealthIndicator],\n      }),\n      DefaultNestApplicationListener.forRoot({\n        staticConfiguration: {\n          // When running in infrastructure mode, the backend server does not start.\n          mode: isInfrastructureMode() ? 'silent' : 'listen',\n        },\n      }),\n    ],\n    feature: [AppModule.forRoot()],\n    infrastructure: [\n      InfrastructureMarkdownReportGenerator.forRoot({\n        staticConfiguration: {\n          markdownFile: join(appFolder, 'INFRASTRUCTURE.MD'),\n          skipEmptySettings: true,\n        },\n      }),\n      Pm2.forRoot({\n        configuration: {\n          ecosystemConfigFile: join(rootFolder, ECOSYSTEM_CONFIG_FILE),\n          applicationScriptFile: join('dist/apps/server/main.js'),\n        },\n      }),\n      DockerCompose.forRoot({\n        // <--\n        configuration: {\n          dockerComposeFileVersion: '3',\n          dockerComposeFile: join(appFolder, DOCKER_COMPOSE_FILE),\n        },\n      }),\n      DockerComposePostgreSQL.forRoot(), // <--\n      DockerComposePostgreSQL.forFeature({\n        // <--\n        featureModuleName: appFeatureName,\n      }),\n      Flyway.forRoot({\n        // <--\n        staticConfiguration: {\n          featureName: appFeatureName,\n          migrationsFolder: join(appFolder, 'src', 'migrations'),\n          configFile: join(rootFolder, FLYWAY_JS_CONFIG_FILE),\n        },\n      }),\n    ],\n  },\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-we-create-documentation-for-the-project-and-simultaneously-create-additional-code-and-scripts-for-docker-compose-and-flyway",children:"3. We create documentation for the project and simultaneously create additional code and scripts for Docker Compose and Flyway"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Build all applications and library\nnpm run build\n\n# Generate markdown report\nnpm run docs:infrastructure\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Console output"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'$ npm run build\n\n> @nestjs-mod-fullstack/source@0.0.0 build\n> npm run generate && npm run tsc:lint && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=build --skip-nx-cache=true\n\n\n> @nestjs-mod-fullstack/source@0.0.0 generate\n> ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=generate --skip-nx-cache=true && npm run make-ts-list && npm run lint:fix\n\n NX   Successfully ran target generate for 0 projects (29ms)\n\n\n> @nestjs-mod-fullstack/source@0.0.0 make-ts-list\n> ./node_modules/.bin/rucken make-ts-list\n\n\n> @nestjs-mod-fullstack/source@0.0.0 lint:fix\n> npm run tsc:lint && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=lint --fix\n\n\n> @nestjs-mod-fullstack/source@0.0.0 tsc:lint\n> ./node_modules/.bin/tsc --noEmit -p tsconfig.base.json\n\n\n   \u2714  nx run server-e2e:lint  [existing outputs match the cache, left as is]\n   \u2714  nx run server:lint (1s)\n   \u2714  nx run client:lint (1s)\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n NX   Successfully ran target lint for 3 projects (1s)\n\n      With additional flags:\n        --fix=true\n\nNx read the output from the cache instead of running the command for 1 out of 3 tasks.\n\n\n> @nestjs-mod-fullstack/source@0.0.0 tsc:lint\n> ./node_modules/.bin/tsc --noEmit -p tsconfig.base.json\n\n\n   \u2714  nx run server:build:production (3s)\n   \u2714  nx run client:build:production (15s)\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n NX   Successfully ran target build for 2 projects (15s)\n\n $ npm run docs:infrastructure\n\n> @nestjs-mod-fullstack/source@0.0.0 docs:infrastructure\n> export NESTJS_MODE=infrastructure && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=start --parallel=1\n\n\n NX   Running target start for project server:\n\n- server\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n> nx run server:start\n\n> node dist/apps/server/main.js\n\n[22:07:23.987] INFO (491733): Starting Nest application...\n    context: "NestFactory"\n[22:07:23.987] INFO (491733): DefaultNestApp dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.987] INFO (491733): ProjectUtilsSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.987] INFO (491733): DefaultNestApplicationInitializerSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.987] INFO (491733): DefaultNestApplicationInitializerShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.987] INFO (491733): NestjsPinoLoggerModuleSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.987] INFO (491733): NestjsPinoLoggerModuleShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.987] INFO (491733): TerminusHealthCheckModuleSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.987] INFO (491733): DefaultNestApplicationListenerSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.987] INFO (491733): DefaultNestApplicationListenerShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.987] INFO (491733): AppModuleSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): AppModuleShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): InfrastructureMarkdownReportGeneratorSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): Pm2Settings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): Pm2Shared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerComposeSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerComposePostgreSQLSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerCompose dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerComposePostgreSQL dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerComposePostgreSQLSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerComposePostgreSQLShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): FlywaySettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): FlywayShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): InfrastructureMarkdownReportGeneratorSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): InfrastructureMarkdownReportStorage dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): InfrastructureMarkdownReportStorageSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerCompose dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): FlywaySettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): FlywayShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DefaultNestApplicationListenerSettings dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DefaultNestApplicationListenerShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerComposeShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): InfrastructureMarkdownReportStorageShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): AppModule dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DefaultNestApplicationInitializer dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DefaultNestApplicationListener dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): InfrastructureMarkdownReportGenerator dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerComposePostgreSQL dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): Flyway dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DefaultNestApplicationListener dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): NestjsPinoLoggerModule dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): TerminusModule dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): TerminusModule dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): ProjectUtilsShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): InfrastructureMarkdownReportGeneratorShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): Pm2 dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerCompose dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerComposePostgreSQL dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): InfrastructureMarkdownReportGeneratorShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): Flyway dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): InfrastructureMarkdownReportGenerator dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): LoggerModule dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): DockerComposePostgreSQLShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): TerminusHealthCheckModuleShared dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.988] INFO (491733): TerminusHealthCheckModule dependencies initialized\n    context: "InstanceLoader"\n[22:07:23.996] INFO (491733): TerminusHealthCheckController {/health}:\n    context: "RoutesResolver"\n[22:07:23.997] INFO (491733): Mapped {/health, GET} route\n    context: "RouterExplorer"\n[22:07:23.997] INFO (491733): AppController {/}:\n    context: "RoutesResolver"\n[22:07:23.997] INFO (491733): Mapped {/, GET} route\n    context: "RouterExplorer"\n[22:07:24.010] DEBUG (491733):\n    0: "SERVER_ROOT_DATABASE_URL: Description=\'Connection string for PostgreSQL with root credentials (example: postgres://postgres:postgres_password@localhost:5432/postgres?schema=public, username must be \\"postgres\\")\', Original Name=\'rootDatabaseUrl\'"\n    1: "SERVER_PORT: Description=\'The port on which to run the server.\', Default=\'3000\', Original Name=\'port\'"\n    2: "SERVER_HOSTNAME: Description=\'Hostname on which to listen for incoming packets.\', Original Name=\'hostname\'"\n    3: "SERVER_APP_DATABASE_URL: Description=\'Connection string for PostgreSQL with module credentials (example: postgres://feat:feat_password@localhost:5432/feat?schema=public)\', Original Name=\'databaseUrl\'"\n    context: "All application environments"\n[22:07:24.027] INFO (491733): Nest application successfully started\n    context: "NestApplication"\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n NX   Successfully ran target start for project server\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-filling-in-new-environment-variables",children:"4. Filling in new environment variables"}),"\n",(0,i.jsxs)(n.p,{children:["After launching the server application in infrastructure mode, additional variables will appear in the environment variables file, examples of values can be found in the infrastructure report ",(0,i.jsx)(n.code,{children:"apps/server/INFRASTRUCTURE.MD"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Updated ",(0,i.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"SERVER_PORT=3000\nSERVER_ROOT_DATABASE_URL=postgres://postgres:postgres_password@localhost:5432/postgres?schema=public\nSERVER_APP_DATABASE_URL=postgres://app:app_password@localhost:5432/app?schema=public\n# server-postgre-sql (generated)\nSERVER_POSTGRE_SQL_POSTGRESQL_USERNAME=postgres\nSERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD=postgres_password\nSERVER_POSTGRE_SQL_POSTGRESQL_DATABASE=postgres\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-re-create-the-project-documentation-and-simultaneously-re-create-additional-code-and-scripts-for-docker-compose-and-flyway",children:"5. Re-create the project documentation and simultaneously re-create additional code and scripts for Docker Compose and Flyway"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate markdown report\nnpm run docs:infrastructure\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Console output"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'$ npm run docs:infrastructure\n\n> @nestjs-mod-fullstack/source@0.0.0 docs:infrastructure\n> export NESTJS_MODE=infrastructure && ./node_modules/.bin/nx run-many --exclude=@nestjs-mod-fullstack/source --all -t=start --parallel=1\n\n\n NX   Running target start for project server:\n\n- server\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n> nx run server:start\n\n> node dist/apps/server/main.js\n\n[22:22:53.712] INFO (493825): Starting Nest application...\n    context: "NestFactory"\n[22:22:53.712] INFO (493825): DefaultNestApp dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): ProjectUtilsSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DefaultNestApplicationInitializerSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DefaultNestApplicationInitializerShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): NestjsPinoLoggerModuleSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): NestjsPinoLoggerModuleShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): TerminusHealthCheckModuleSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DefaultNestApplicationListenerSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DefaultNestApplicationListenerShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): AppModuleSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): AppModuleShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): InfrastructureMarkdownReportGeneratorSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): Pm2Settings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): Pm2Shared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DockerComposeSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DockerComposePostgreSQLSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DockerCompose dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DockerComposePostgreSQL dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DockerComposePostgreSQLSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DockerComposePostgreSQLShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): FlywaySettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): FlywayShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): InfrastructureMarkdownReportGeneratorSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): InfrastructureMarkdownReportStorage dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): InfrastructureMarkdownReportStorageSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): DockerCompose dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): FlywaySettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.712] INFO (493825): FlywayShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DefaultNestApplicationListenerSettings dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DefaultNestApplicationListenerShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DockerComposeShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): InfrastructureMarkdownReportStorageShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): AppModule dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): ProjectUtils dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DefaultNestApplicationInitializer dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DefaultNestApplicationListener dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): InfrastructureMarkdownReportGenerator dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DockerComposePostgreSQL dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): Flyway dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DefaultNestApplicationListener dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): NestjsPinoLoggerModule dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): TerminusModule dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): TerminusModule dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): ProjectUtilsShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): InfrastructureMarkdownReportGeneratorShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): Pm2 dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DockerCompose dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DockerComposePostgreSQL dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): InfrastructureMarkdownReportGeneratorShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): Flyway dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): InfrastructureMarkdownReportGenerator dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): LoggerModule dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): DockerComposePostgreSQLShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): TerminusHealthCheckModuleShared dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.713] INFO (493825): TerminusHealthCheckModule dependencies initialized\n    context: "InstanceLoader"\n[22:22:53.720] INFO (493825): TerminusHealthCheckController {/health}:\n    context: "RoutesResolver"\n[22:22:53.721] INFO (493825): Mapped {/health, GET} route\n    context: "RouterExplorer"\n[22:22:53.721] INFO (493825): AppController {/}:\n    context: "RoutesResolver"\n[22:22:53.722] INFO (493825): Mapped {/, GET} route\n    context: "RouterExplorer"\n[22:22:53.735] DEBUG (493825):\n    0: "SERVER_ROOT_DATABASE_URL: Description=\'Connection string for PostgreSQL with root credentials (example: postgres://postgres:postgres_password@localhost:5432/postgres?schema=public, username must be \\"postgres\\")\', Original Name=\'rootDatabaseUrl\'"\n    1: "SERVER_PORT: Description=\'The port on which to run the server.\', Default=\'3000\', Original Name=\'port\'"\n    2: "SERVER_HOSTNAME: Description=\'Hostname on which to listen for incoming packets.\', Original Name=\'hostname\'"\n    3: "SERVER_APP_DATABASE_URL: Description=\'Connection string for PostgreSQL with module credentials (example: postgres://feat:feat_password@localhost:5432/feat?schema=public)\', Original Name=\'databaseUrl\'"\n    context: "All application environments"\n[22:22:53.759] INFO (493825): Nest application successfully started\n    context: "NestApplication"\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n NX   Successfully ran target start for project server\n'})}),"\n",(0,i.jsx)(n.h3,{id:"6-copy-the-updated-file-with-the-environment-variables-as-an-example",children:"6. Copy the updated file with the environment variables as an example"}),"\n",(0,i.jsx)(n.p,{children:"Since the file with environment variables is located under gitignore, when cloning an empty project, you need to re-enter all the values for environment variables, to quickly launch the project, you need to have an example of a filled file with environment variables."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp -r ./.env ./example.env\n"})}),"\n",(0,i.jsx)(n.h3,{id:"7-creating-a-migration-with-an-example-of-creating-a-table",children:"7. Creating a migration with an example of creating a table"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create migrations folder\nmkdir -p ./apps/server/src/migrations\n\n# Create empty migration\nnpm run flyway:create:server\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Console output"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ npm run flyway:create:server\n\n> @nestjs-mod-fullstack/source@0.0.0 flyway:create:server\n> ./node_modules/.bin/nx run server:flyway-create-migration\n\n\n> nx run server:flyway-create-migration\n\n> echo 'select 1;' > ./apps/server/src/migrations/V`date +%Y%m%d%H%M`__NewMigration.sql\n\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n NX   Successfully ran target flyway-create-migration for project server (42ms)\n\n\n NX   Nx detected a flaky task\n\n  server:flyway-create-migration\n\nFlaky tasks can disrupt your CI pipeline. Automatically retry them with Nx Cloud. Learn more at https://nx.dev/ci/features/flaky-tasks\n"})}),"\n",(0,i.jsx)(n.h3,{id:"8-we-describe-the-sql-script-for-creating-a-demo-table",children:"8. We describe the sql script for creating a demo table"}),"\n",(0,i.jsxs)(n.p,{children:["Migration file ",(0,i.jsx)(n.code,{children:"apps/server/src/migrations/V202408112241__New Migration.sql"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE IF NOT EXISTS "AppDemo"(\n    id uuid DEFAULT uuid_generate_v4() NOT NULL,\n    "name" varchar(128) NOT NULL,\n    "createdAt" timestamp DEFAULT "now"() NOT NULL,\n    "updatedAt" timestamp DEFAULT "now"() NOT NULL,\n    CONSTRAINT "PK_APP_DEMO" PRIMARY KEY (id)\n);\n\nCREATE UNIQUE INDEX IF NOT EXISTS "UQ_APP_DEMO" ON "AppDemo"("name");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"9-launching-the-database",children:"9. Launching the database"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run docker-compose:start-prod:server\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Console output"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'$ npm run docker-compose:start-prod:server\n\n> @nestjs-mod-fullstack/source@0.0.0 docker-compose:start-prod:server\n> export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/server/docker-compose-prod.yml --env-file ./apps/server/docker-compose-prod.env --compatibility up -d\n\nCreating network "server_server-network" with driver "bridge"\nPulling server-postgre-sql (bitnami/postgresql:15.5.0)...\n15.5.0: Pulling from bitnami/postgresql\nc9b6a72ca844: Pull complete\nDigest: sha256:6887635cc793826e1e177d0cee151a878baa6747e37389252e89b034a30f04bc\nStatus: Downloaded newer image for bitnami/postgresql:15.5.0\nCreating server-postgre-sql ... done\n'})}),"\n",(0,i.jsx)(n.h3,{id:"10-launching-the-creation-of-application-databases",children:"10. Launching the creation of application databases"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run db:create\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Console output"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ npm run db:create\n\n> @nestjs-mod-fullstack/source@0.0.0 db:create\n> ./node_modules/.bin/nx run-many -t=db-create\n\n\n   \u2714  nx run server:db-create (787ms)\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n NX   Successfully ran target db-create for project server (819ms)\n\n\n NX   Nx detected a flaky task\n\n  server:db-create\n\nFlaky tasks can disrupt your CI pipeline. Automatically retry them with Nx Cloud. Learn more at https://nx.dev/ci/features/flaky-tasks\n"})}),"\n",(0,i.jsx)(n.h3,{id:"11-we-apply-migrations",children:"11. We apply migrations"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run flyway:migrate\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Console output"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ npm run flyway:migrate\n\n> @nestjs-mod-fullstack/source@0.0.0 flyway:migrate\n> ./node_modules/.bin/nx run-many -t=flyway-migrate\n\n\n   \u2714  nx run server:flyway-migrate (1s)\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n NX   Successfully ran target flyway-migrate for project server (1s)\n\n\n NX   Nx detected a flaky task\n\n  server:flyway-migrate\n\nFlaky tasks can disrupt your CI pipeline. Automatically retry them with Nx Cloud. Learn more at https://nx.dev/ci/features/flaky-tasks\n"})}),"\n",(0,i.jsx)(n.h3,{id:"12-we-connect-to-the-database-and-get-a-list-of-tables",children:"12. We connect to the database and get a list of tables"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker exec -it server-postgre-sql psql postgres://app:app_password@localhost:5432/app\n\\d\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Console output"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker exec -it server-postgre-sql psql postgres://app:app_password@localhost:5432/app\npsql (15.5)\nType "help" for help.\n\napp-> \\d\n public | AppDemo      | table | app\n public | __migrations | table | app\n\napp->\n'})}),"\n",(0,i.jsx)(n.h3,{id:"13-stopping-the-database",children:"13. Stopping the database"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Commands"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run docker-compose:stop-prod:server\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Console output"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ npm run docker-compose:stop-prod:server\n\n> @nestjs-mod-fullstack/source@0.0.0 docker-compose:stop-prod:server\n> export COMPOSE_INTERACTIVE_NO_CLI=1 && docker-compose -f ./apps/server/docker-compose-prod.yml --env-file ./apps/server/docker-compose-prod.env down\n\nStopping server-postgre-sql ... done\nRemoving server-postgre-sql ... done\n"})}),"\n",(0,i.jsx)(n.p,{children:"In the next post, I will add working with the database via PrismaORM to the server..."}),"\n",(0,i.jsx)(n.h3,{id:"links",children:"Links"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/commit/4661c2f29170568fdf62d3ba0dd4bf20a79a1afa",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/commit/4661c2f29170568fdf62d3ba0dd4bf20a79a1afa"})," - commit to current changes"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"#postgres #flyway #nestjsmod #fullstack\n#2024-08-11"})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);