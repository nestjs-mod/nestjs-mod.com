"use strict";(self.webpackChunknestjs_mod_com=self.webpackChunknestjs_mod_com||[]).push([[8594],{1728:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var t=s(4848),r=s(8453);const a={},o="Installing Kubernetes via MicroK8s and configuring the deployment of NestJS and Angular applications",i={id:"en-posts/fullstack/2024-09-13",title:"Installing Kubernetes via MicroK8s and configuring the deployment of NestJS and Angular applications",description:"When there are no DevOps engineers in the team, but you really want to embed the application in Kubernetes, you can easily do this using https://microk8s.io in this post, I will describe how to do this and open access to the application on a specific port.",source:"@site/docs/en-posts/fullstack/2024-09-13.md",sourceDirName:"en-posts/fullstack",slug:"/en-posts/fullstack/2024-09-13",permalink:"/docs/en-posts/fullstack/2024-09-13",draft:!1,unlisted:!1,editUrl:"https://github.com/nestjs-mod/nestjs-mod.com/blob/master/docs/en-posts/fullstack/2024-09-13.md",tags:[],version:"current",frontMatter:{},sidebar:"enPostsSidebar",previous:{title:"Accelerating the deployment of NestJS and Angular using public Github runners and creating intermediate Docker images",permalink:"/docs/en-posts/fullstack/2024-09-08"},next:{title:"Access to the site on NestJS and Angular by domain name with SSL certificate in Kubernetes via Ingress",permalink:"/docs/en-posts/fullstack/2024-09-15"}},c={},l=[{value:"1. Installing MicroK8s on a dedicated server",id:"1-installing-microk8s-on-a-dedicated-server",level:3},{value:"2. We allow access to the host machine from Pods Kubernetes",id:"2-we-allow-access-to-the-host-machine-from-pods-kubernetes",level:3},{value:"3. Temporarily share the Kubernetes dashboard and see if it works at all",id:"3-temporarily-share-the-kubernetes-dashboard-and-see-if-it-works-at-all",level:3},{value:"4. Creating a script to create additional environment variables",id:"4-creating-a-script-to-create-additional-environment-variables",level:3},{value:"5. Configuration Templates",id:"5-configuration-templates",level:3},{value:"6. Creating &quot;Docker Compose&quot; files to run the database, migrations and tests",id:"6-creating-docker-compose-files-to-run-the-database-migrations-and-tests",level:3},{value:"7. Creating Kubernetes files for configuring the stand",id:"7-creating-kubernetes-files-for-configuring-the-stand",level:3},{value:"8. Creating Kubernetes files to run the server on NestJS",id:"8-creating-kubernetes-files-to-run-the-server-on-nestjs",level:3},{value:"9. Creating Kubernetes files to run Nginx with a built-in frontend on Angular",id:"9-creating-kubernetes-files-to-run-nginx-with-a-built-in-frontend-on-angular",level:3},{value:"10. Creating a bash script for applying Kubernetes configurations",id:"10-creating-a-bash-script-for-applying-kubernetes-configurations",level:3},{value:"11. Creating a CI/CD configuration for deployment in Kubernetes",id:"11-creating-a-cicd-configuration-for-deployment-in-kubernetes",level:3},{value:"12. Adding a new environment",id:"12-adding-a-new-environment",level:3},{value:"13. Adding new environment variables",id:"13-adding-new-environment-variables",level:3},{value:"14. We connect to a dedicated server and delete all Docker containers",id:"14-we-connect-to-a-dedicated-server-and-delete-all-docker-containers",level:3},{value:"15. We commit the changes and wait for CI/CD to work successfully and check the site operation with our hands",id:"15-we-commit-the-changes-and-wait-for-cicd-to-work-successfully-and-check-the-site-operation-with-our-hands",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Plans",id:"plans",level:3},{value:"Links",id:"links",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"installing-kubernetes-via-microk8s-and-configuring-the-deployment-of-nestjs-and-angular-applications",children:"Installing Kubernetes via MicroK8s and configuring the deployment of NestJS and Angular applications"}),"\n",(0,t.jsxs)(n.p,{children:["When there are no DevOps engineers in the team, but you really want to embed the application in Kubernetes, you can easily do this using ",(0,t.jsx)(n.a,{href:"https://microk8s.io",children:"https://microk8s.io"})," in this post, I will describe how to do this and open access to the application on a specific port."]}),"\n",(0,t.jsx)(n.h3,{id:"1-installing-microk8s-on-a-dedicated-server",children:"1. Installing MicroK8s on a dedicated server"}),"\n",(0,t.jsx)(n.p,{children:"There has already been a lot written about MicroK8s on habra, in general, this Kubernetes installer with additional plugins for typical tasks and it allows you to quickly deploy Kubernetes without studying and deep diving into the world of DevOps."}),"\n",(0,t.jsx)(n.p,{children:"We connect to our server via SSH and install Kubernetes."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Commands"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ssh root@194.226.49.162\nsudo snap install microk8s --classic\nsudo usermod -a -G microk8s $USER\nmkdir ~/.kube\nsudo chown -R $USER ~/.kube\nnewgrp microk8s\n# close and open terminal with ssh\nmicrok8s status --wait-ready\nmicrok8s enable dashboard dns registry ingress hostpath-storage\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Console output"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"root@vps1724252356:~# sudo snap install microk8s --classic\nStart snap \"microk8s\" (7180) services\nmicrok8s (1.30/stable) v1.30.4 from Canonical\u2713 installed\nroot@vps1724252356:~# sudo usermod -a -G microk8s $USER\nroot@vps1724252356:~# mkdir ~/.kube\nroot@vps1724252356:~# sudo chown -R $USER ~/.kube\nroot@vps1724252356:~# newgrp microk8s\n# close and open terminal with ssh\nroot@vps1724252356:~# microk8s status --wait-ready\nmicrok8s is running\nhigh-availability: no\n  datastore master nodes: 127.0.0.1:19001\n  datastore standby nodes: none\naddons:\n  enabled:\n    dns                  # (core) CoreDNS\n    ha-cluster           # (core) Configure high availability on the current node\n    helm                 # (core) Helm - the package manager for Kubernetes\n    helm3                # (core) Helm 3 - the package manager for Kubernetes\n  disabled:\n    cert-manager         # (core) Cloud native certificate management\n    cis-hardening        # (core) Apply CIS K8s hardening\n    community            # (core) The community addons repository\n    dashboard            # (core) The Kubernetes dashboard\n    gpu                  # (core) Alias to nvidia add-on\n    host-access          # (core) Allow Pods connecting to Host services smoothly\n    hostpath-storage     # (core) Storage class; allocates storage from host directory\n    ingress              # (core) Ingress controller for external access\n    kube-ovn             # (core) An advanced network fabric for Kubernetes\n    mayastor             # (core) OpenEBS MayaStor\n    metallb              # (core) Loadbalancer for your Kubernetes cluster\n    metrics-server       # (core) K8s Metrics Server for API access to service metrics\n    minio                # (core) MinIO object storage\n    nvidia               # (core) NVIDIA hardware (GPU and network) support\n    observability        # (core) A lightweight observability stack for logs, traces and metrics\n    prometheus           # (core) Prometheus operator for monitoring and logging\n    rbac                 # (core) Role-Based Access Control for authorisation\n    registry             # (core) Private image registry exposed on localhost:32000\n    rook-ceph            # (core) Distributed Ceph storage using Rook\n    storage              # (core) Alias to hostpath-storage add-on, deprecated\nroot@vps1724252356:~# microk8s enable dashboard dns registry ingress hostpath-storage\nInfer repository core for addon dashboard\nInfer repository core for addon dns\nInfer repository core for addon registry\nInfer repository core for addon ingress\nInfer repository core for addon hostpath-storage\nWARNING: Do not enable or disable multiple addons in one command.\n         This form of chained operations on addons will be DEPRECATED in the future.\n         Please, enable one addon at a time: 'microk8s enable <addon>'\nEnabling Kubernetes Dashboard\nInfer repository core for addon metrics-server\nAddon core/metrics-server is already enabled\nApplying manifest\nserviceaccount/kubernetes-dashboard created\nservice/kubernetes-dashboard created\nsecret/kubernetes-dashboard-certs created\nsecret/kubernetes-dashboard-csrf created\nsecret/kubernetes-dashboard-key-holder created\nconfigmap/kubernetes-dashboard-settings created\nrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\ndeployment.apps/kubernetes-dashboard created\nservice/dashboard-metrics-scraper created\ndeployment.apps/dashboard-metrics-scraper created\nsecret/microk8s-dashboard-token unchanged\n\nIf RBAC is not enabled access the dashboard using the token retrieved with:\n\nmicrok8s kubectl describe secret -n kube-system microk8s-dashboard-token\n\nUse this token in the https login UI of the kubernetes-dashboard service.\n\nIn an RBAC enabled setup (microk8s enable RBAC) you need to create a user with restricted\npermissions as shown in:\nhttps://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md\n\nEnabling DNS\nUsing host configuration from /run/systemd/resolve/resolv.conf\nApplying manifest\nserviceaccount/coredns created\nconfigmap/coredns created\ndeployment.apps/coredns created\nservice/kube-dns created\nclusterrole.rbac.authorization.k8s.io/coredns created\nclusterrolebinding.rbac.authorization.k8s.io/coredns created\nCoreDNS service deployed with IP address 10.152.183.10\nRestarting kubelet\nDNS is enabled\nInfer repository core for addon hostpath-storage\nAddon core/hostpath-storage is already enabled\nThe registry will be created with the size of 20Gi.\nDefault storage class will be used.\nnamespace/container-registry created\npersistentvolumeclaim/registry-claim created\ndeployment.apps/registry created\nservice/registry created\nconfigmap/local-registry-hosting configured\nEnabling Ingress\ningressclass.networking.k8s.io/public created\ningressclass.networking.k8s.io/nginx created\nnamespace/ingress created\nserviceaccount/nginx-ingress-microk8s-serviceaccount created\nclusterrole.rbac.authorization.k8s.io/nginx-ingress-microk8s-clusterrole created\nrole.rbac.authorization.k8s.io/nginx-ingress-microk8s-role created\nclusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-microk8s created\nrolebinding.rbac.authorization.k8s.io/nginx-ingress-microk8s created\nconfigmap/nginx-load-balancer-microk8s-conf created\nconfigmap/nginx-ingress-tcp-microk8s-conf created\nconfigmap/nginx-ingress-udp-microk8s-conf created\ndaemonset.apps/nginx-ingress-microk8s-controller created\nIngress is enabled\nAddon core/hostpath-storage is already enabled\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-we-allow-access-to-the-host-machine-from-pods-kubernetes",children:"2. We allow access to the host machine from Pods Kubernetes"}),"\n",(0,t.jsx)(n.p,{children:"Since the database will be located on the host and there will only be applications in Kubernetes, in order for the Kubernetes application to reach the host, it is necessary to allow access to the host machine."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Commands"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ssh root@194.226.49.162\nmicrok8s enable host-access\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Console output"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"root@vps1724252356:~# microk8s enable host-access\nInfer repository core for addon host-access\nSetting 10.0.1.1 as host-access\nHost-access is enabled\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-temporarily-share-the-kubernetes-dashboard-and-see-if-it-works-at-all",children:"3. Temporarily share the Kubernetes dashboard and see if it works at all"}),"\n",(0,t.jsx)(n.p,{children:"After running the sharing command, it is necessary to transfer the port of the remote server to the local computer, since the dashboard is a web application."}),"\n",(0,t.jsx)(n.p,{children:"After the launch, we will also see a token for connection, it will need to be entered to log in to the dashboard."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Commands"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"microk8s dashboard-proxy\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Console output"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"root@vps1724252356:~# microk8s dashboard-proxy\nChecking if Dashboard is running.\nInfer repository core for addon dashboard\nWaiting for Dashboard to come up.\nTrying to get token from microk8s-dashboard-token\nWaiting for secret token (attempt 0)\nDashboard will be available at https://127.0.0.1:10443\nUse the following token to login:\nSOME_RANDOM_SYMBOLS\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"If you have any errors when connecting to the dashboard, then try running the command:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo microk8s.refresh-certs --cert ca.crt\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-creating-a-script-to-create-additional-environment-variables",children:"4. Creating a script to create additional environment variables"}),"\n",(0,t.jsxs)(n.p,{children:['Some of the variables will be the same as for the "Docker Compose" mode, so you can simply copy and modify an existing ',(0,t.jsx)(n.code,{children:".docker/set-env.sh"})," to ",(0,t.jsx)(n.code,{children:".kubernetes/set-env.sh"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"There are a lot of checks in this script for the presence of necessary variables and in cases of their absence, default values are used instead."}),"\n",(0,t.jsxs)(n.p,{children:["Creating a file ",(0,t.jsx)(n.code,{children:".kubernetes/set-env.sh "})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\nset -e\n\nexport REPOSITORY=nestjs-mod/nestjs-mod-fullstack\nexport REGISTRY=ghcr.io\nexport BASE_SERVER_IMAGE_NAME="${REPOSITORY}-base-server"\nexport BUILDER_IMAGE_NAME="${REPOSITORY}-builder"\nexport MIGRATIONS_IMAGE_NAME="${REPOSITORY}-migrations"\nexport SERVER_IMAGE_NAME="${REPOSITORY}-server"\nexport NGINX_IMAGE_NAME="${REPOSITORY}-nginx"\nexport E2E_TESTS_IMAGE_NAME="${REPOSITORY}-e2e-tests"\nexport COMPOSE_INTERACTIVE_NO_CLI=1\nexport NX_DAEMON=false\nexport NX_PARALLEL=1\nexport NX_SKIP_NX_CACHE=true\nexport DISABLE_SERVE_STATIC=true\n\nexport ROOT_VERSION=$(npm pkg get version --workspaces=false | tr -d \\")\nexport SERVER_VERSION=$(cd ./apps/server && npm pkg get version --workspaces=false | tr -d \\")\n\n# node\nif [ -z "${NAMESPACE}" ]; then\n    export NAMESPACE=master\nfi\n\n# common\nif [ -z "${SERVER_DOMAIN}" ]; then\n    export SERVER_DOMAIN=example.com\nfi\n\n# server\nif [ -z "${SERVER_PORT}" ]; then\n    export SERVER_PORT=9191\nfi\nif [ -z "${SERVER_APP_DATABASE_PASSWORD}" ]; then\n    export SERVER_APP_DATABASE_PASSWORD=app_password\nfi\nif [ -z "${SERVER_APP_DATABASE_USERNAME}" ]; then\n    export SERVER_APP_DATABASE_USERNAME=${NAMESPACE}_app\nfi\nif [ -z "${SERVER_APP_DATABASE_NAME}" ]; then\n    export SERVER_APP_DATABASE_NAME=${NAMESPACE}_app\nfi\n\n# client\nif [ -z "${NGINX_PORT}" ]; then\n    export NGINX_PORT=8181\nfi\n\n# database\nif [ -z "${SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME}" ]; then\n    export SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME=postgres\nfi\nif [ -z "${SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD}" ]; then\n    export SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD=postgres_password\nfi\nif [ -z "${SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE}" ]; then\n    export SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE=postgres\nfi\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-configuration-templates",children:"5. Configuration Templates"}),"\n",(0,t.jsxs)(n.p,{children:["Usually ",(0,t.jsx)(n.a,{href:"https://docs.ansible.com/",children:"Ansible"})," and ",(0,t.jsx)(n.a,{href:"https://helm.sh/",children:"Helm"})," are used to deploy infrastructure and applications, they are not used in this project in order not to overload with unnecessary information."]}),"\n",(0,t.jsxs)(n.p,{children:["In this project, a utility is used to copy and replace environment variables ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/rucken",children:"https://www.npmjs.com/package/rucken"})," , and more specifically, its ",(0,t.jsx)(n.code,{children:"copy-paste"})," command."]}),"\n",(0,t.jsx)(n.p,{children:"A mini example of using the utility:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'mkdir cat-dog\necho "%START_ENV_VARIABLE%\ncatDog\ncat-dogs\ncat_dog" > cat-dog/cat_dog.txt\nexport START_ENV_VARIABLE="examples:"\nnpx -y rucken@latest copy-paste --find=cat-dog --replace=human-ufo --path=./cat-dog --replace-envs=true\ncat ./human-ufo/human_ufo.txt\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ cat ./human-ufo/human_ufo.txt\nexamples:\nhumanUfo\nhuman-ufos\nhuman_ufo\n"})}),"\n",(0,t.jsx)(n.p,{children:"The main stages of the project launch in Kubernetes:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Collecting docker images;"}),"\n",(0,t.jsx)(n.li,{children:"Run the script for creating additional environment variables;"}),"\n",(0,t.jsx)(n.li,{children:"Copy the files with the application launch and infrastructure configuration templates, while replacing all the environment variables found in all copied files;"}),"\n",(0,t.jsx)(n.li,{children:'We launch the infrastructure through "Docker Compose" (database + migrations);'}),"\n",(0,t.jsx)(n.li,{children:"Create and run applications in Kubernetes;"}),"\n",(0,t.jsx)(n.li,{children:'Running E2E tests via "Docker Compose"..'}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"6-creating-docker-compose-files-to-run-the-database-migrations-and-tests",children:'6. Creating "Docker Compose" files to run the database, migrations and tests'}),"\n",(0,t.jsx)(n.p,{children:"Infrastructure things like the broker or database need to be run on separate servers, and within Kubernetes, only our applications need to be run."}),"\n",(0,t.jsx)(n.p,{children:"Specialized teams of DevOps engineers can be responsible for each server and infrastructure program, and there is also less chance of losing all data if the server suddenly physically breaks down."}),"\n",(0,t.jsx)(n.p,{children:'The database and migrations in this project are launched through a separate "Docker Compose" file, so that the database startup step can be reconfigured to run in a separate action runner that will be installed on a separate server that does not have Kubernetes.'}),"\n",(0,t.jsxs)(n.p,{children:["Creating a file ",(0,t.jsx)(n.code,{children:".kubernetes/templates/docker-compose-infra.yml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"version: '3'\nnetworks:\n  nestjs-mod-fullstack-network:\n    driver: 'bridge'\nservices:\n  nestjs-mod-fullstack-postgre-sql:\n    image: 'bitnami/postgresql:15.5.0'\n    container_name: 'nestjs-mod-fullstack-postgre-sql'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    ports:\n      - '5432:5432'\n    healthcheck:\n      test:\n        - 'CMD-SHELL'\n        - 'pg_isready -U postgres'\n      interval: '5s'\n      timeout: '5s'\n      retries: 5\n    tty: true\n    restart: 'always'\n    environment:\n      POSTGRESQL_USERNAME: '%SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME%'\n      POSTGRESQL_PASSWORD: '%SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD%'\n      POSTGRESQL_DATABASE: '%SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE%'\n    volumes:\n      - 'nestjs-mod-fullstack-postgre-sql-volume:/bitnami/postgresql'\n  nestjs-mod-fullstack-postgre-sql-migrations:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-migrations:%ROOT_VERSION%'\n    container_name: 'nestjs-mod-fullstack-postgre-sql-migrations'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    tty: true\n    environment:\n      NX_SKIP_NX_CACHE: 'true'\n      SERVER_ROOT_DATABASE_URL: 'postgres://%SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME%:%SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD%@nestjs-mod-fullstack-postgre-sql:5432/%SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE%?schema=public'\n      SERVER_APP_DATABASE_URL: 'postgres://%SERVER_APP_DATABASE_USERNAME%:%SERVER_APP_DATABASE_PASSWORD%@nestjs-mod-fullstack-postgre-sql:5432/%SERVER_APP_DATABASE_NAME%?schema=public'\n    depends_on:\n      nestjs-mod-fullstack-postgre-sql:\n        condition: 'service_healthy'\n    working_dir: '/usr/src/app'\n    volumes:\n      - './../../apps:/usr/src/app/apps'\n      - './../../libs:/usr/src/app/libs'\nvolumes:\n  nestjs-mod-fullstack-postgre-sql-volume:\n    external: true\n    name: 'nestjs-mod-fullstack-postgre-sql-volume'\n"})}),"\n",(0,t.jsx)(n.p,{children:'The launch of E2E tests also takes place through a special "Docker Compose", this is done so that you can run many parallel Docker containers with tests, and we will get something similar to the load tests of the stand, and we also have the opportunity to run tests from different regions.'}),"\n",(0,t.jsxs)(n.p,{children:["Creating a file ",(0,t.jsx)(n.code,{children:".kubernetes/templates/docker-compose-e2e-tests.yml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"version: '3'\nnetworks:\n  nestjs-mod-fullstack-network:\n    driver: 'bridge'\nservices:\n  nestjs-mod-fullstack-e2e-tests:\n    image: 'ghcr.io/nestjs-mod/nestjs-mod-fullstack-e2e-tests:%ROOT_VERSION%'\n    container_name: 'nestjs-mod-fullstack-e2e-tests'\n    extra_hosts:\n      - 'host.docker.internal:host-gateway'\n    networks:\n      - 'nestjs-mod-fullstack-network'\n    environment:\n      BASE_URL: 'http://host.docker.internal:30222'\n    working_dir: '/usr/src/app'\n    volumes:\n      - './../../apps:/usr/src/app/apps'\n      - './../../libs:/usr/src/app/libs'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"7-creating-kubernetes-files-for-configuring-the-stand",children:"7. Creating Kubernetes files for configuring the stand"}),"\n",(0,t.jsx)(n.p,{children:"We create a namespace of the stand or the current deployment, all the elements of the application will be associated with this namespace, and it is much easier to monitor the status of the elements of the stand."}),"\n",(0,t.jsxs)(n.p,{children:["Name space file: ",(0,t.jsx)(n.code,{children:".kubernetes/templates/node/0.namespace.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: '%NAMESPACE%'\n"})}),"\n",(0,t.jsx)(n.p,{children:"If we have some common environment variables for different applications embedded within the same Kubernetes and the same workspace, then we can put them in the global configuration file of the stand."}),"\n",(0,t.jsxs)(n.p,{children:["Configuration file: ",(0,t.jsx)(n.code,{children:".kubernetes/templates/node/1.configmap.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: '%NAMESPACE%'\n  name: %NAMESPACE%-config\ndata:\n  DEBUG: 'true'\n  BITNAMI_DEBUG: 'true'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"8-creating-kubernetes-files-to-run-the-server-on-nestjs",children:"8. Creating Kubernetes files to run the server on NestJS"}),"\n",(0,t.jsx)(n.p,{children:"In addition to common environment variables, each application can have its own environment variables, for such variables we create an application configuration file."}),"\n",(0,t.jsxs)(n.p,{children:["Configuration file: ",(0,t.jsx)(n.code,{children:".kubernetes/templates/server/1.configmap.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: '%NAMESPACE%'\n  name: %NAMESPACE%-server-config\ndata:\n  NODE_TLS_REJECT_UNAUTHORIZED: '0'\n  SERVER_APP_DATABASE_URL: 'postgres://%SERVER_APP_DATABASE_USERNAME%:%SERVER_APP_DATABASE_PASSWORD%@10.0.1.1:5432/%SERVER_APP_DATABASE_NAME%?schema=public'\n  SERVER_PORT: '%SERVER_PORT%'\n"})}),"\n",(0,t.jsx)(n.p,{children:"The container with the application will be created using the Docker image that we previously collected."}),"\n",(0,t.jsx)(n.p,{children:"Let's set limits for the container: the total limit for the processor is 30% and memory is 512 megabytes, the processor limit for the request is 10% and 128 megabytes of memory."}),"\n",(0,t.jsxs)(n.p,{children:["The deployment file: ",(0,t.jsx)(n.code,{children:".kubernetes/templates/server/3.deployment.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: '%NAMESPACE%'\n  name: %NAMESPACE%-server\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      pod: %NAMESPACE%-server-container\n  template:\n    metadata:\n      namespace: '%NAMESPACE%'\n      labels:\n        app: %NAMESPACE%-server\n        pod: %NAMESPACE%-server-container\n    spec:\n      containers:\n        - name: %NAMESPACE%-server\n          image: ghcr.io/nestjs-mod/nestjs-mod-fullstack-server:%SERVER_VERSION%\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: %SERVER_PORT%\n          envFrom:\n            - configMapRef:\n                name: %NAMESPACE%-config\n            - configMapRef:\n                name: %NAMESPACE%-server-config\n          resources:\n            requests:\n              memory: 128Mi\n              cpu: 100m\n            limits:\n              memory: 512Mi\n              cpu: 300m\n      imagePullSecrets:\n        - name: docker-regcred\n"})}),"\n",(0,t.jsx)(n.p,{children:"In order for other applications (in this case Nginx with a frontend) to access the server container, you need to create a service."}),"\n",(0,t.jsxs)(n.p,{children:["The service file: ",(0,t.jsx)(n.code,{children:".kubernetes/templates/server/4.service.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  namespace: '%NAMESPACE%'\n  name: %NAMESPACE%-server\n  labels:\n    app: %NAMESPACE%-server\nspec:\n  selector:\n    app: %NAMESPACE%-server\n  ports:\n    - name: '%SERVER_PORT%'\n      protocol: TCP\n      port: %SERVER_PORT%\n      targetPort: %SERVER_PORT%\n  type: ClusterIP\n"})}),"\n",(0,t.jsx)(n.h3,{id:"9-creating-kubernetes-files-to-run-nginx-with-a-built-in-frontend-on-angular",children:"9. Creating Kubernetes files to run Nginx with a built-in frontend on Angular"}),"\n",(0,t.jsxs)(n.p,{children:["Configuration file: ",(0,t.jsx)(n.code,{children:".kubernetes/templates/client/1.configmap.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: '%NAMESPACE%'\n  name: %NAMESPACE%-client-config\ndata:\n  SERVER_PORT: '%SERVER_PORT%'\n  NGINX_PORT: '%NGINX_PORT%'\n  SERVER_NAME: %NAMESPACE%-server.%NAMESPACE%\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The deployment file: ",(0,t.jsx)(n.code,{children:".kubernetes/templates/client/3.deployment.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: '%NAMESPACE%'\n  name: %NAMESPACE%-client\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      pod: %NAMESPACE%-client-container\n  template:\n    metadata:\n      namespace: '%NAMESPACE%'\n      labels:\n        app: %NAMESPACE%-client\n        pod: %NAMESPACE%-client-container\n    spec:\n      containers:\n        - name: %NAMESPACE%-client\n          image: ghcr.io/nestjs-mod/nestjs-mod-fullstack-nginx:%SERVER_VERSION%\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: %NGINX_PORT%\n          envFrom:\n            - configMapRef:\n                name: %NAMESPACE%-config\n            - configMapRef:\n                name: %NAMESPACE%-client-config\n          resources:\n            requests:\n              memory: 128Mi\n              cpu: 100m\n            limits:\n              memory: 512Mi\n              cpu: 300m\n      imagePullSecrets:\n        - name: docker-regcred\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The service file: ",(0,t.jsx)(n.code,{children:".kubernetes/templates/client/4.service.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  namespace: '%NAMESPACE%'\n  name: %NAMESPACE%-client\n  labels:\n    app: %NAMESPACE%-client\nspec:\n  selector:\n    app: %NAMESPACE%-client\n  ports:\n    - name: '%NGINX_PORT%'\n      protocol: TCP\n      port: %NGINX_PORT%\n      targetPort: %NGINX_PORT%\n  type: ClusterIP\n"})}),"\n",(0,t.jsx)(n.p,{children:"Since at the beginning we are trying to deploy the application on a certain port without a domain, we need to create another service that will share the container port outside."}),"\n",(0,t.jsxs)(n.p,{children:["Global Service File: ",(0,t.jsx)(n.code,{children:".kubernetes/templates/client/4.global-service.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  namespace: '%NAMESPACE%'\n  name: %NAMESPACE%-client-global\n  labels:\n    app: %NAMESPACE%-client-global\nspec:\n  selector:\n    app: %NAMESPACE%-client\n  ports:\n    - port: 30222\n      nodePort: 30222\n      targetPort: %NGINX_PORT%\n  type: NodePort\n"})}),"\n",(0,t.jsx)(n.h3,{id:"10-creating-a-bash-script-for-applying-kubernetes-configurations",children:"10. Creating a bash script for applying Kubernetes configurations"}),"\n",(0,t.jsxs)(n.p,{children:["Creating a file ",(0,t.jsx)(n.code,{children:".kubernetes/templates/install.sh"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\nset -e\n\n# docker regcred for pull docker images\nsudo microk8s kubectl delete secret docker-regcred || echo 'not need delete secret docker-regcred'\nsudo microk8s kubectl create secret docker-registry docker-regcred --docker-server=%DOCKER_SERVER% --docker-username=%DOCKER_USERNAME% --docker-password=%DOCKER_PASSWORD% --docker-email=docker-regcred\n\n# namespace and common config\nsudo microk8s kubectl apply -f .kubernetes/generated/node\nsudo microk8s kubectl get secret docker-regcred -n default -o yaml || sed s/\"namespace: default\"/\"namespace: %NAMESPACE%\"/ || microk8s kubectl apply -n %NAMESPACE% -f - || echo 'not need update docker-regcred'\n\n# server\nsudo microk8s kubectl apply -f .kubernetes/generated/server\n\n# client\nsudo microk8s kubectl apply -f .kubernetes/generated/client\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"11-creating-a-cicd-configuration-for-deployment-in-kubernetes",children:"11. Creating a CI/CD configuration for deployment in Kubernetes"}),"\n",(0,t.jsxs)(n.p,{children:['Some of the tasks will be the same as for the "Docker Compose" mode, so you can simply copy and modify the existing file ',(0,t.jsx)(n.code,{children:".github/workflows/docker-compose.workflows.yml"}),"in ",(0,t.jsx)(n.code,{children:".github/workflows/kubernetes.yml"})," and replace the deployment task."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Generation of configurations and their application in Kubernetes"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# ...\njobs:\n  # ...\n  deploy:\n    environment: kubernetes\n    needs: [build-and-push-migrations-image, build-and-push-server-image, build-and-push-nginx-image, build-and-push-e2e-tests-image]\n    runs-on: [self-hosted]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          # We must fetch at least the immediate parents so that if this is\n          # a pull request then we can checkout the head.\n          fetch-depth: 2\n\n      - name: Deploy\n        env:\n          DOCKER_SERVER: ${{ env.REGISTRY }}\n          DOCKER_USERNAME: ${{ github.actor }}\n          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}\n          SERVER_APP_DATABASE_NAME: ${{ secrets.SERVER_APP_DATABASE_NAME }}\n          SERVER_APP_DATABASE_PASSWORD: ${{ secrets.SERVER_APP_DATABASE_PASSWORD }}\n          SERVER_APP_DATABASE_USERNAME: ${{ secrets.SERVER_APP_DATABASE_USERNAME }}\n          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}\n          SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE: ${{ secrets.SERVER_POSTGRE_SQL_POSTGRESQL_DATABASE }}\n          SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD: ${{ secrets.SERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD }}\n          SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME: ${{ secrets.SERVER_POSTGRE_SQL_POSTGRESQL_USERNAME }}\n        run: |\n          rm -rf ./.kubernetes/generated\n          . .kubernetes/set-env.sh && npx -y rucken copy-paste --find=templates --replace=generated --replace-plural=generated --path=./.kubernetes/templates --replace-envs=true\n          chmod +x .kubernetes/generated/install.sh\n          docker compose -f ./.kubernetes/generated/docker-compose-infra.yml --compatibility down || echo 'docker-compose-infra not started'\n          docker compose -f ./.kubernetes/generated/docker-compose-e2e-tests.yml --compatibility down || echo 'docker-compose-e2e-tests not started'\n          docker compose -f ./.kubernetes/generated/docker-compose-infra.yml --compatibility up -d\n          .kubernetes/generated/install.sh > /dev/null 2>&1 &\n          docker compose -f ./.kubernetes/generated/docker-compose-e2e-tests.yml --compatibility up\n"})}),"\n",(0,t.jsx)(n.h3,{id:"12-adding-a-new-environment",children:"12. Adding a new environment"}),"\n",(0,t.jsxs)(n.p,{children:["Go to the address ",(0,t.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/settings/environments/new",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/settings/environments/new"})," and add the ",(0,t.jsx)(n.code,{children:"kubernetes"})," environment."]}),"\n",(0,t.jsx)(n.h3,{id:"13-adding-new-environment-variables",children:"13. Adding new environment variables"}),"\n",(0,t.jsxs)(n.p,{children:["Go to the parameters of the previously created environment and alternately add all the variables to the ",(0,t.jsx)(n.code,{children:"Environment secrets"})," section, at this stage you can already generate protected values for some variables."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"SERVER_APP_DATABASE_NAME=app\nSERVER_APP_DATABASE_PASSWORD=9UwcpRh12srXoPlTSN53ZOUc9ev9qNYg\nSERVER_APP_DATABASE_USERNAME=app\nSERVER_DOMAIN=fullstack.nestjs-mod.com\nSERVER_POSTGRE_SQL_POSTGRESQL_DATABASE=postgres\nSERVER_POSTGRE_SQL_POSTGRESQL_PASSWORD=DN7DHoMWd2D13YNH116cFWeJgfVAFO9e\nSERVER_POSTGRE_SQL_POSTGRESQL_USERNAME=postgres\n"})}),"\n",(0,t.jsx)(n.h3,{id:"14-we-connect-to-a-dedicated-server-and-delete-all-docker-containers",children:"14. We connect to a dedicated server and delete all Docker containers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker stop $(docker ps -a -q) || echo 'docker containers not started'\ndocker rm $(docker ps --filter status=exited -q) || echo 'docker containers not exists'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"15-we-commit-the-changes-and-wait-for-cicd-to-work-successfully-and-check-the-site-operation-with-our-hands",children:"15. We commit the changes and wait for CI/CD to work successfully and check the site operation with our hands"}),"\n",(0,t.jsxs)(n.p,{children:["\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b CI/CD: ",(0,t.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/10861775039",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/actions/runs/10861775039"}),"\n\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0430\u0439\u0442: ",(0,t.jsx)(n.a,{href:"http://194.226.49.162:30222/",children:"http://194.226.49.162:30222/"})]}),"\n",(0,t.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"When there is a DevOps engineer in the team, he usually deals with the deployment of the application and this post is more for full stack developers who have to not only write code but also deploy it to production."}),"\n",(0,t.jsx)(n.p,{children:"In a good way, at the first opportunity, you need to hire a DevOps specialist or take a team of DevOps engineers to outsource and so that they implement everything without using bash scripts, as well as infrastructure things need to be run not through Docker Compose, but directly on the machines themselves."}),"\n",(0,t.jsxs)(n.p,{children:["DevOps engineers should also install a normal version of Kubernetes and set up the release of Helm charts, since ",(0,t.jsx)(n.a,{href:"https://microk8s.io",children:"https://microk8s.io"})," / this is more for developers."]}),"\n",(0,t.jsx)(n.p,{children:"Well, in general, the deployment scheme described above can work in a production environment, both in single node mode and in cluster mode."}),"\n",(0,t.jsx)(n.h3,{id:"plans",children:"Plans"}),"\n",(0,t.jsx)(n.p,{children:"In the next post, I will add Ingress to organize access to the site by domain name and generate an SSL certificate..."}),"\n",(0,t.jsx)(n.h3,{id:"links",children:"Links"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://nestjs.com",children:"https://nestjs.com"})," - the official website of the framework"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://nestjs-mod.com",children:"https://nestjs-mod.com"})," - the official website of additional utilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"http://fullstack.nestjs-mod.com:30222",children:"http://fullstack.nestjs-mod.com:30222"})," - website from the post"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack"})," - the project from the post"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/nestjs-mod/nestjs-mod-fullstack/commit/4b1c3c7d6bcb0b3bac479d5f414bbefd49aa5e87",children:"https://github.com/nestjs-mod/nestjs-mod-fullstack/commit/4b1c3c7d6bcb0b3bac479d5f414bbefd49aa5e87"})," - current changes"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"#kubernetes #github #nestjsmod #fullstack\n#2024-09-13"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(6540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);